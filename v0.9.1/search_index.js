var documenterSearchIndex = {"docs":
[{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"CurrentModule = YaoBlocks\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/blocks.html#Blocks","page":"Blocks","title":"Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Blocks are the basic building blocks of a quantum circuit in Yao. It simply means a quantum operator, thus, all the blocks have matrices in principal and one can get its matrix by mat. The basic blocks required to build an arbitrary quantum circuit is defined in the component package YaoBlocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Block Tree serves as an intermediate representation for Yao to analysis, optimize the circuit, then it will be lowered to instructions like for simulations, blocks will be lowered to instruct! calls.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The structure of blocks is the same with a small type system, it consists of two basic kinds of blocks: CompositeBlock (like composite types), and PrimitiveBlock (like primitive types). By combining these two kinds of blocks together, we'll be able to construct a quantum circuit and represent it in a tree data structure.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"AbstractBlock\nPrimitiveBlock\nCompositeBlock","category":"page"},{"location":"man/blocks.html#YaoAPI.AbstractBlock","page":"Blocks","title":"YaoAPI.AbstractBlock","text":"AbstractBlock{D}\n\nAbstract type for quantum circuit blocks. while D is the number level in each qudit.\n\nRequired Methods\n\napply!.\nmat.\noccupied_locs.\nprint_block\n\nOptional Methods\n\ncontent\nchcontent\nsubblocks.\nchsubblocks.\nBase.hash\nBase.:(==)\nnlevel.\ngetiparams.\nsetiparams!.\nparameters.\nnparameters.\niparams_eltype.\nparameters_eltype.\ndispatch!.\nrender_params.\napply_back!.\nmat_back!.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoAPI.PrimitiveBlock","page":"Blocks","title":"YaoAPI.PrimitiveBlock","text":"PrimitiveBlock{D} <: AbstractBlock{D}\n\nAbstract type that all primitive block will subtype from. A primitive block is a concrete block who can not be decomposed into other blocks. All composite block can be decomposed into several primitive blocks.\n\nnote: Note\nsubtype for primitive block with parameter should implement hash and == method to enable key value cache.\n\nRequired Methods\n\napply!\nmat\nprint_block\nBase.hash\nBase.:(==)\n\nOptional Methods\n\nnlevel.\ngetiparams.\nsetiparams!.\nparameters.\nnparameters.\niparams_eltype.\nparameters_eltype.\ndispatch!.\nrender_params.\napply_back!.\nmat_back!.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoAPI.CompositeBlock","page":"Blocks","title":"YaoAPI.CompositeBlock","text":"CompositeBlock{D} <: AbstractBlock{D}\n\nAbstract supertype which composite blocks will inherit from. Composite blocks are blocks composited from other AbstractBlocks, thus it is a AbstractBlock as well.\n\nRequired Methods\n\napply!\nmat\noccupied_locs.\nsubblocks.\nchsubblocks.\n\nOptional Methods\n\nnlevel.\ngetiparams.\nsetiparams!.\nparameters.\nnparameters.\niparams_eltype.\nparameters_eltype.\ndispatch!.\nrender_params.\napply_back!.\nmat_back!.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#Primitive-Blocks","page":"Blocks","title":"Primitive Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Primitive blocks are subtypes of PrimitiveBlock, they are the leaf nodes in a block tree, thus primitive types do not have subtypes.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following primitive blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t ->(t isa Type && t <: YaoBlocks.PrimitiveBlock)","category":"page"},{"location":"man/blocks.html#YaoBlocks.GeneralMatrixBlock","page":"Blocks","title":"YaoBlocks.GeneralMatrixBlock","text":"GeneralMatrixBlock{D, MT} <: PrimitiveBlock{D}\nGeneralMatrixBlock{D}(m, n, A, tag=\"matblock(...)\")\nGeneralMatrixBlock(A; nlevel=2, tag=\"matblock(...)\")\n\nGeneral matrix gate wraps a matrix operator to quantum gates. This is the most general form of a quantum gate.\n\nArguments\n\nm and n are the number of dits in row and column.\nA is a matrix.\ntag is the printed information.\nD and nlevel are the number of levels in each qudit.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.IdentityGate","page":"Blocks","title":"YaoBlocks.IdentityGate","text":"IdentityGate{D} <: TrivialGate{D}\n\nThe identity gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure{D,K, OT, LT, PT, RNG} <: PrimitiveBlock{D}\nMeasure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=1:n, resetto=nothing, remove=false, nlevel=2)\n\nMeasure operator, currently only qudits are supported.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure-Union{Tuple{Int64}, Tuple{RNG}, Tuple{OT}} where {OT, RNG}","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=AllLocs(), resetto=nothing, remove=false)\n\nCreate a Measure block with number of qudits n.\n\nExamples\n\nYou can create a Measure block on given basis (default is the computational basis).\n\njulia> Measure(4)\nMeasure(4)\n\nOr you could specify which qudits you are going to measure\n\njulia> Measure(4; locs=1:3)\nMeasure(4;locs=(1, 2, 3))\n\nby default this will collapse the current register to measure results.\n\njulia> r = normalize!(arrayreg(bit\"000\") + arrayreg(bit\"111\"))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.7071067811865475 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n 0.7071067811865475 + 0.0im\n\njulia> r |> Measure(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 1.0 + 0.0im\n\nBut you can also specify the target bit configuration you want to collapse to with keyword resetto.\n\n```jldoctest; setup=:(using Yao) julia> m = Measure(4; resetto=bit\"0101\") Measure(4;postprocess=ResetTo{BitStr{4,Int64}}(0101 ₍₂₎))\n\njulia> m.postprocess ResetTo{BitStr{4,Int64}}(0101 ₍₂₎)```\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.PhaseGate","page":"Blocks","title":"YaoBlocks.PhaseGate","text":"PhaseGate\n\nGlobal phase gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Projector","page":"Blocks","title":"YaoBlocks.Projector","text":"struct Projector{D, T, AT<:(AbstractArrayReg{D, T})} <: PrimitiveBlock{D}\n\nProjection operator to target state psi.\n\nDefinition\n\nprojector(s) defines the following operator.\n\ns  ss\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ReflectGate","page":"Blocks","title":"YaoBlocks.ReflectGate","text":"ReflectGate{D, T, Tt, AT<:AbstractArrayReg{D, T}} = TimeEvolution{D,Tt,Projector{D,T,AT}}\n\nLet |v⟩ be a quantum state vector, a reflection gate is a unitary operator that defined as the following operation.\n\nv  1 - (1-exp(-iθ)) vv\n\nWhen θ = π, it defines a standard reflection gate 1-2vv.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RotationGate","page":"Blocks","title":"YaoBlocks.RotationGate","text":"RotationGate{D,T,GT<:AbstractBlock{D}} <: PrimitiveBlock{D}\n\nRotationGate, with GT both hermitian and isreflexive.\n\nDefinition\n\nExpression rot(G, θ) defines the following gate\n\ncos fractheta2I - i sin fractheta2 G\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ShiftGate","page":"Blocks","title":"YaoBlocks.ShiftGate","text":"ShiftGate <: PrimitiveBlock\n\nPhase shift gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.TimeEvolution","page":"Blocks","title":"YaoBlocks.TimeEvolution","text":"TimeEvolution{D, TT, GT} <: PrimitiveBlock{D}\n\nTimeEvolution, where GT is block type. input matrix should be hermitian.\n\nnote: Note\nTimeEvolution contructor check hermicity of the input block by default, but sometimes it can be slow. Turn off the check manually by specifying optional parameter check_hermicity = false.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@const_gate","category":"page"},{"location":"man/blocks.html#YaoBlocks.ConstGate.@const_gate","page":"Blocks","title":"YaoBlocks.ConstGate.@const_gate","text":"@const_gate <gate name> = <expr>\n@const_gate <gate name>::<type> = <expr>\n@const_gate <gate>::<type>\n\nThis macro simplify the definition of a constant gate. It will automatically bind the matrix form to a constant which will reduce memory allocation in the runtime.\n\nExamples\n\n@const_gate X = ComplexF64[0 1;1 0]\n\nor\n\n@const_gate X::ComplexF64 = [0 1;1 0]\n\nYou can bind new element types by simply re-declare with a type annotation.\n\n@const_gate X::ComplexF32\n\n\n\n\n\n","category":"macro"},{"location":"man/blocks.html#Composite-Blocks","page":"Blocks","title":"Composite Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Composite blocks are subtypes of CompositeBlock, they are the composition of blocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following composite blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t -> t isa Type && t <: YaoBlocks.CompositeBlock","category":"page"},{"location":"man/blocks.html#YaoBlocks.AbstractAdd","page":"Blocks","title":"YaoBlocks.AbstractAdd","text":"AbstractAdd{D} <: CompositeBlock{D}\n\nThe abstract add interface, aimed to support Hamiltonian types.\n\nRequired Interfaces\n\nchsubblocks\nsubblocks\n\nProvides\n\nunsafe_apply! and its backward\nmat and its backward\nadjoint\noccupied_locs\ngetindex over dit strings\nishermitian\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Add","page":"Blocks","title":"YaoBlocks.Add","text":"Add{D} <: AbstractAdd{D}\nAdd(blocks::AbstractBlock...) -> Add\n\nType for block addition.\n\njulia> X + X\nnqubits: 1\n+\n├─ X\n└─ X\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.CachedBlock","page":"Blocks","title":"YaoBlocks.CachedBlock","text":"CachedBlock{ST, BT, D} <: TagBlock{BT, D}\n\nA label type that tags an instance of type BT. It forwards every methods of the block it contains, except mat and apply!, it will cache the matrix form whenever the program has.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ChainBlock","page":"Blocks","title":"YaoBlocks.ChainBlock","text":"ChainBlock{D} <: CompositeBlock{D}\n\nChainBlock is a basic construct tool to create user defined blocks horizontically. It is a Vector like composite type.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ControlBlock","page":"Blocks","title":"YaoBlocks.ControlBlock","text":"A control block is a composite block that applies a block when the control qubits are all ones.\n\nnote: Note\nIf control qubit index is negative, it means the inverse control, i.e., the block is applied when the control qubit is zero.\n\nFields\n\nn::Int64\nctrl_locs::NTuple{C, Int64} where C\nctrl_config::NTuple{C, Int64} where C\ncontent::AbstractBlock\nlocs::NTuple{M, Int64} where M\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered{BT, D} <: TagBlock{BT,D}\n\nWrapper block allowing to execute the inverse of a block of quantum circuit.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered-Union{Tuple{BT}, Tuple{D}} where {D, BT<:AbstractBlock{D}}","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered(block)\n\nCreate a Daggered block. Let G be a input block, G' or Daggered(block) in code represents G^dagger.\n\nExamples\n\nThe inverse QFT is not hermitian, thus it will be tagged with a Daggered block.\n\njulia> A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))));\n\njulia> B(n, i) = chain(n, i==j ? put(i=>H) : A(j, i) for j in i:n);\n\njulia> qft(n) = chain(B(n, i) for i in 1:n);\n\njulia> struct QFT <: PrimitiveBlock{2} n::Int end\n\njulia> YaoBlocks.nqudits(q::QFT) = q.n\n\n\njulia> circuit(q::QFT) = qft(nqubits(q));\n\njulia> YaoBlocks.mat(x::QFT) = mat(circuit(x));\n\njulia> QFT(2)'\n [†]QFT\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.KronBlock","page":"Blocks","title":"YaoBlocks.KronBlock","text":"KronBlock{D,M,MT<:NTuple{M,Any}} <: CompositeBlock{D}\n\ncomposite block that combine blocks by kronecker product.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.OnLevels","page":"Blocks","title":"YaoBlocks.OnLevels","text":"OnLevels{D, Ds, T <: AbstractBlock{Ds}} <: TagBlock{T, D}\n\nDefine a gate that is applied to a subset of levels.\n\nFields\n\ngate: the gate to be applied.\nlevels: the levels to apply the gate to.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.PSwap","page":"Blocks","title":"YaoBlocks.PSwap","text":"PSwap = PutBlock{2,2,RotationGate{2,T,G}} where {G<:ConstGate.SWAPGate}\nPSwap(n::Int, locs::Tuple{Int,Int}, θ::Real)\n\nParametrized swap gate that swaps two qubits with a phase, defined as\n\nrm SWAP(θ) = e^-iθrm SWAP2\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.PutBlock","page":"Blocks","title":"YaoBlocks.PutBlock","text":"PutBlock{D,C,GT<:AbstractBlock} <: AbstractContainer{GT,D}\n\nType for putting a block at given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RepeatedBlock","page":"Blocks","title":"YaoBlocks.RepeatedBlock","text":"RepeatedBlock{D,C,GT<:AbstractBlock} <: AbstractContainer{GT,D}\n\nRepeat the same block on given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Scale","page":"Blocks","title":"YaoBlocks.Scale","text":"Scale{S <: Union{Number, Val}, D, BT <: AbstractBlock{D}} <: TagBlock{BT, D}\nScale(factor, block)\n\nMultiply a block with a scalar factor, which can be a number or a Val. If the factor is a number, it is regarded as a parameter that can be changed dynamically. If the factor is a Val, it is regarded as a constant.\n\nExamples\n\njulia> 2 * X\n[scale: 2] X\n\njulia> im * Z\n[+im] Z\n\njulia> -im * Z\n[-im] Z\n\njulia> -Z\n[-] Z\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Subroutine","page":"Blocks","title":"YaoBlocks.Subroutine","text":"Subroutine{D, BT <: AbstractBlock, C} <: AbstractContainer{BT, D}\n\nSubroutine node on given locations. This allows you to shoehorn a smaller circuit to a larger one.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Swap","page":"Blocks","title":"YaoBlocks.Swap","text":"Swap = PutBlock{2,2,G} where {G<:ConstGate.SWAPGate}\nSwap(n::Int, locs::Tuple{Int,Int})\n\nSwap gate, which swaps two qubits.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.UnitaryChannel","page":"Blocks","title":"YaoBlocks.UnitaryChannel","text":"UnitaryChannel{D, W<:AbstractVector} <: CompositeBlock{D}\nUnitaryChannel(operators, probs)\n\nCreate a unitary channel, where probs is a real vector that sum up to 1.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#Operations-on-Blocks","page":"Blocks","title":"Operations on Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"unsafe_apply!\napply!\napply\n\nniparams\ngetiparams\nrender_params\nnparameters\n\noccupied_locs\nprint_block\n\napply_back!\nmat_back!","category":"page"},{"location":"man/blocks.html#YaoAPI.unsafe_apply!","page":"Blocks","title":"YaoAPI.unsafe_apply!","text":"unsafe_apply!(r, block)\n\nSimilar to apply!, but will not check the size of the register and block, this is mainly used for overloading new blocks, use at your own risk.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.apply!","page":"Blocks","title":"YaoAPI.apply!","text":"apply!(register, block)\n\nApply a block (of quantum circuit) to a quantum register.\n\nnote: Note\nto overload apply! for a new block, please overload the unsafe_apply! function with same interface. Then the apply! interface will do the size checks on inputs automatically.\n\nExamples\n\njulia> r = zero_state(2)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/2\n    nlevel: 2\n\njulia> apply!(r, put(2, 1=>X))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/2\n    nlevel: 2\n\njulia> measure(r;nshots=10)\n10-element Vector{DitStr{2, 2, Int64}}:\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n 01 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.apply","page":"Blocks","title":"YaoBlocks.apply","text":"apply(register, block)\n\nThe non-inplace version of applying a block (of quantum circuit) to a quantum register. Check apply! for the faster inplace version.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.niparams","page":"Blocks","title":"YaoAPI.niparams","text":"niparam(block) -> Int\n\nReturn number of intrinsic parameters in block. See also nparameters.\n\nExamples\n\njulia> niparams(Rx(0.1))\n1\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.getiparams","page":"Blocks","title":"YaoAPI.getiparams","text":"getiparams(block)\n\nReturns the intrinsic parameters of node block, default is an empty tuple.\n\nExamples\n\njulia> getiparams(Rx(0.1))\n0.1\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.render_params","page":"Blocks","title":"YaoAPI.render_params","text":"render_params(r::AbstractBlock, params)\n\nThis function renders the input parameter to a consumable type to r. params can be a number or a symbol like :zero and :random.\n\nExamples\n\njulia> collect(render_params(Rx(0.1), :zero))\n1-element Vector{Float64}:\n 0.0\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.nparameters","page":"Blocks","title":"YaoAPI.nparameters","text":"nparameters(block) -> Int\n\nReturn number of parameters in block. See also niparams.\n\nExamples\n\njulia> nparameters(chain(Rx(0.1), Rz(0.2)))\n2\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.occupied_locs","page":"Blocks","title":"YaoAPI.occupied_locs","text":"occupied_locs(x)\n\nReturn a tuple of occupied locations of x.\n\nExamples\n\njulia> occupied_locs(kron(5, 1=>X, 3=>X))\n(1, 3)\n\njulia> occupied_locs(kron(5, 1=>X, 3=>I2))\n(1,)\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.print_block","page":"Blocks","title":"YaoAPI.print_block","text":"print_block(io, block)\n\nDefine how blocks are printed as text in one line.\n\nExamples\n\njulia> print_block(stdout, X)\nX\n\njulia> print_block(stdout, put(2, 1=>X))\nput on (1)\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.apply_back!","page":"Blocks","title":"YaoAPI.apply_back!","text":"apply_back!((ψ, ∂L/∂ψ*), circuit::AbstractBlock, collector) -> AbstractRegister\n\nback propagate and calculate the gradient ∂L/∂θ = 2Re(∂L/∂ψ⋅∂ψ/∂θ), given ∂L/∂ψ. ψ is the output register, ∂L/∂ψ* should also be register type.\n\nNote: gradients are stored in Diff blocks, it can be access by either diffblock.grad or gradient(circuit). Note2: now apply_back! returns the inversed gradient!\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.mat_back!","page":"Blocks","title":"YaoAPI.mat_back!","text":"mat_back!(T, rb::AbstractBlock, adjy, collector)\n\nBack propagate the matrix gradients.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#Error-and-Exceptions","page":"Blocks","title":"Error and Exceptions","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nPages = [\"error.jl\"]","category":"page"},{"location":"man/blocks.html#Extending-Blocks","page":"Blocks","title":"Extending Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Blocks are defined as a sub-type system inside Julia, you could extend it by defining new Julia types by subtyping abstract types we provide. But we also provide some handy tools to help you create your own blocks.","category":"page"},{"location":"man/blocks.html#Define-Custom-Constant-Blocks","page":"Blocks","title":"Define Custom Constant Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Constant blocks are used quite often and in numerical simulation we would expect it to be a real constant in the program, which means it won't allocate new memory when we try to get its matrix for several times, and it won't change with parameters.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"In Yao, you can simply define a constant block with @const_gate, with the corresponding matrix:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"using YaoBlocks, BitBasis # hide\n@const_gate Rand = rand(ComplexF64, 4, 4)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"This will automatically create a type RandGate{T} and a constant binding Rand to the instance of RandGate{ComplexF64}, and it will also bind a Julia constant for the given matrix, so when you call mat(Rand), no allocation will happen.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@allocated mat(Rand)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"If you want to use other data type like ComplexF32, you could directly call Rand(ComplexF32), which will create a new instance with data type ComplexF32.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Rand(ComplexF32)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"But remember this won't bind the matrix, it only binds the matrix you give","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@allocated mat(Rand(ComplexF32))","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"so if you want to make the matrix call mat for ComplexF32 to have zero allocation as well, you need to do it explicitly.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"@const_gate Rand::ComplexF32","category":"page"},{"location":"man/blocks.html#Define-Custom-Blocks","page":"Blocks","title":"Define Custom Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Primitive blocks are the most basic block to build a quantum circuit, if a primitive block has a certain structure, like containing tweakable parameters, it cannot be defined as a constant, thus create a new type by subtyping PrimitiveBlock is necessary","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"using YaoBlocks\n\nmutable struct PhaseGate{T <: Real} <: PrimitiveBlock{1}\n    theta::T\nend","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"If your insterested block is a composition of other blocks, you should define a CompositeBlock, e.g","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"struct ChainBlock{N} <: CompositeBlock{N}\n    blocks::Vector{AbstractBlock{N}}\nend","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Besides types, there are several interfaces you could define for a block, but don't worry, they should just error if it doesn't work.","category":"page"},{"location":"man/blocks.html#Define-the-matrix","page":"Blocks","title":"Define the matrix","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The matrix form of a block is the minimal requirement to make a custom block functional, defining it is super simple, e.g for phase gate:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"mat(::Type{T}, gate::PhaseGate) where T = exp(T(im * gate.theta)) * Matrix{Complex{T}}(I, 2, 2)","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Or for composite blocks, you could just calculate the matrix by call mat on its subblocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"mat(::Type{T}, c::ChainBlock) where T = prod(x->mat(T, x), reverse(c.blocks))","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The rest will just work, but might be slow since you didn't define any specification for this certain block.","category":"page"},{"location":"man/blocks.html#Define-how-blocks-are-applied-to-registers","page":"Blocks","title":"Define how blocks are applied to registers","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Although, having its matrix is already enough for applying a block to register, we could improve the performance or dispatch to other actions by overloading apply! interface, e.g we can use specialized instruction to make X gate (a builtin gate defined @const_gate) faster:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"function apply!(r::ArrayReg, x::XGate)\n    nactive(r) == 1 || throw(QubitMismatchError(\"register size $(nactive(r)) mismatch with block size $N\"))\n    instruct!(matvec(r.state), Val(:X), (1, ))\n    return r\nend","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"In Yao, this interface allows us to provide more aggressive specialization on different patterns of quantum circuits to accelerate the simulation etc.","category":"page"},{"location":"man/blocks.html#Define-Parameters","page":"Blocks","title":"Define Parameters","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"If you want to use some member of the block to be parameters, you need to declare them explicitly","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"niparams(::Type{<:PhaseGate}) = 1\ngetiparams(x::PhaseGate) = x.theta\nsetiparams!(r::PhaseGate, param::Real) = (r.theta = param; r)","category":"page"},{"location":"man/blocks.html#Define-Adjoint","page":"Blocks","title":"Define Adjoint","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Since blocks are actually quantum operators, it makes sense to call their adjoint as well. We provide Daggered for general purpose, but some blocks may have more specific transformation rules for adjoints, e.g","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Base.adjoint(x::PhaseGate) = PhaseGate(-x.theta)","category":"page"},{"location":"man/blocks.html#Define-Cache-Keys","page":"Blocks","title":"Define Cache Keys","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"To enable cache, you should define cache_key, e.g for phase gate, we only cares about its phase, instead of the whole instance","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"cache_key(gate::PhaseGate) = gate.theta","category":"page"},{"location":"man/blocks.html#APIs","page":"Blocks","title":"APIs","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nOrder = [:function, :macro]","category":"page"},{"location":"man/blocks.html#Base.:|>-Tuple{AbstractRegister, AbstractBlock}","page":"Blocks","title":"Base.:|>","text":"|>(register, circuit) -> register\n\nApply a quantum circuits to register, which modifies the register directly.\n\nExample\n\njulia> arrayreg(bit\"0\") |> X |> Y\n\nwarning: Warning\n|> is equivalent to apply!, which means it has side effects. You need to use apply if you do not want to change it in-place.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Int64, Vararg{Pair{<:Any, <:AbstractBlock}}}","page":"Blocks","title":"Base.kron","text":"kron(n, locs_and_blocks::Pair{<:Any, <:AbstractBlock}...) -> KronBlock\n\nReturns a n-qudit KronBlock. The inputs contains a list of location-block pairs, where a location can be an integer or a range. It is conceptually a chain of put block without address conflicts, but it has a richer type information that can be useful for various purposes such as more efficient mat function.\n\nLet I be a 2times 2 identity matrix, G and H be two 2times 2 matrix, the matrix representation of kron(n, i=>G, j=>H) (assume j  i) is defined as\n\nI^otimes n-j otimes H otimes I^otimes j-i-1 otimes G otimes I^i-1\n\nFor multiple locations, the expression can be complicated.\n\nExamples\n\nUse kron to construct a KronBlock, it will put an X gate on the 1st qubit, and a Y gate on the 3rd qubit.\n\njulia> kron(4, 1=>X, 3=>Y)\nnqubits: 4\nkron\n├─ 1=>X\n└─ 3=>Y\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{AbstractBlock}}","page":"Blocks","title":"Base.kron","text":"kron(blocks::AbstractBlock...)\nkron(n, itr)\n\nReturn a KronBlock, with total number of qubits n, and blocks should use all the locations on n wires in quantum circuits.\n\nExamples\n\nYou can use kronecker product to composite small blocks to a large blocks.\n\njulia> kron(X, Y, Z, Z)\nnqubits: 4\nkron\n├─ 1=>X\n├─ 2=>Y\n├─ 3=>Z\n└─ 4=>Z\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{Pair{<:Any, <:AbstractBlock}}}","page":"Blocks","title":"Base.kron","text":"kron(blocks...) -> f(n)\nkron(itr) -> f(n)\n\nReturn a lambda, which will take the total number of qubits as input.\n\nExamples\n\nIf you don't know the number of qubit yet, or you are just too lazy, it is fine.\n\njulia> kron(put(1=>X) for _ in 1:2)\n(n -> kron(n, ((n  ->  put(n, 1 => X)), (n  ->  put(n, 1 => X)))...))\n\njulia> kron(X for _ in 1:2)\nnqubits: 2\nkron\n├─ 1=>X\n└─ 2=>X\n\njulia> kron(1=>X, 3=>Y)\n(n -> kron(n, (1 => X, 3 => Y)...))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{AbstractBlock, Any}","page":"Blocks","title":"Base.repeat","text":"repeat(x::AbstractBlock, locs)\n\nLazy curried version of repeat.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{Int64, AbstractBlock, Vararg{Int64}}","page":"Blocks","title":"Base.repeat","text":"repeat(n, subblock::AbstractBlock[, locs]) -> RepeatedBlock{n}\n\nCreate a n-qudit RepeatedBlock block, which is conceptually a [kron] block with all gates being the same. If locs is provided, repeat on locs, otherwise repeat on all locations. Let G be a 2times 2 matrix, the matrix representation of repeat(n, X) is\n\nX^otimes n\n\nThe RepeatedBlock can be used to accelerate repeated applying certain gate types: X, Y, Z, S, T, Sdag, and Tdag.\n\nExamples\n\nThis will create a repeat block which puts 4 X gates on each location.\n\njulia> repeat(4, X)\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ X\n\nYou can also specify the location\n\njulia> repeat(4, X, (1, 2))\nnqubits: 4\nrepeat on (1, 2)\n└─ X\n\nBut repeat won't copy the gate, thus, if it is a gate with parameter, e.g a phase(0.1), the parameter will change simultaneously.\n\njulia> g = repeat(4, phase(0.1))\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.1)\n\njulia> g.content\nphase(0.1)\n\njulia> g.content.theta = 0.2\n0.2\n\njulia> g\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.2)\n\nRepeat over certain gates will provide speed up.\n\njulia> reg = rand_state(20);\n\njulia> @time apply!(reg, repeat(20, X));\n  0.002252 seconds (5 allocations: 656 bytes)\n\njulia> @time apply!(reg, chain([put(20, i=>X) for i=1:20]));\n  0.049362 seconds (82.48 k allocations: 4.694 MiB, 47.11% compilation time)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#LinearAlgebra.ishermitian-Tuple{Any}","page":"Blocks","title":"LinearAlgebra.ishermitian","text":"ishermitian(op::AbstractBlock) -> Bool\n\nReturns true if op is hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chcontent-Tuple{AbstractContainer, Any}","page":"Blocks","title":"YaoAPI.chcontent","text":"chcontent(x, blk)\n\nCreate a similar block of x and change its content to blk.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chsubblocks-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.chsubblocks","text":"chsubblocks(composite_block, itr)\n\nChange the sub-blocks of a CompositeBlock with given iterator itr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.content-Tuple{AbstractContainer}","page":"Blocks","title":"YaoAPI.content","text":"content(x)\n\nReturns the content of x.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.dispatch!-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.dispatch!","text":"dispatch!(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.expect-Tuple{AbstractBlock, AbstractRegister}","page":"Blocks","title":"YaoAPI.expect","text":"expect(op::AbstractBlock, reg) -> Real\nexpect(op::AbstractBlock, reg => circuit) -> Real\nexpect(op::AbstractBlock, density_matrix) -> Real\n\nGet the expectation value of an operator, the second parameter can be a register reg or a pair of input register and circuit reg => circuit.\n\nexpect'(op::AbstractBlock, reg=>circuit) -> Pair expect'(op::AbstractBlock, reg) -> AbstracRegister\n\nObtain the gradient with respect to registers and circuit parameters. For pair input, the second return value is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nnote: Note\nFor batched register, expect(op, reg=>circuit) returns a vector of size number of batch as output. However, one can not differentiate over a vector loss, so expect'(op, reg=>circuit) accumulates the gradient over batch, rather than returning a batched gradient of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.getiparams-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.getiparams","text":"getiparams(block)\n\nReturns the intrinsic parameters of node block, default is an empty tuple.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.iparams_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.iparams_eltype","text":"iparams_eltype(block)\n\nReturn the element type of getiparams.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat([T=ComplexF64], blk)\n\nReturns the matrix form of given block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{GeneralMatrixBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat(A::GeneralMatrixBlock)\n\nReturn the matrix of general matrix block.\n\nwarn: Warn\nInstead of converting it to the default data type ComplexF64, this will return its contained matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.operator_fidelity-Tuple{AbstractBlock, AbstractBlock}","page":"Blocks","title":"YaoAPI.operator_fidelity","text":"operator_fidelity(b1::AbstractBlock, b2::AbstractBlock) -> Number\n\nOperator fidelity defined as\n\nF^2 = frac1dleftrm Tr(b1^dagger b2)right\n\nHere, d is the size of the Hilbert space. Note this quantity is independant to global phase. See arXiv: 0803.2940v2, Equation (2) for reference.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters","text":"parameters(block)\n\nReturns all the parameters contained in block tree with given root block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters_eltype","text":"parameters_eltype(x)\n\nReturn the element type of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.setiparams!","page":"Blocks","title":"YaoAPI.setiparams!","text":"setiparams!([f], block, itr)\nsetiparams!([f], block, params...)\n\nSet the parameters of block. When f is provided, set parameters of block to the value in collection mapped by f. iter can be an iterator or a symbol, the symbol can be :zero, :random.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoAPI.subblocks-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.subblocks","text":"subblocks(x)\n\nReturns an iterator of the sub-blocks of a composite block. Default is empty.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rx-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rx","text":"Rx(theta)\n\nReturn a RotationGate on X axis.\n\nExample\n\njulia> Rx(0.1)\nrot(X, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Ry-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Ry","text":"Ry(theta)\n\nReturn a RotationGate on Y axis.\n\nExample\n\njulia> Ry(0.1)\nrot(Y, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rz-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rz","text":"Rz(theta)\n\nReturn a RotationGate on Z axis.\n\nExample\n\njulia> Rz(0.1)\nrot(Z, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.apply-Union{Tuple{D}, Tuple{AbstractRegister{D}, Any}} where D","page":"Blocks","title":"YaoBlocks.apply","text":"apply(register, block)\n\nThe non-inplace version of applying a block (of quantum circuit) to a quantum register. Check apply! for the faster inplace version.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.applymatrix-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.applymatrix","text":"applymatrix(g::AbstractBlock) -> Matrix\n\nTransform the apply! function of specific block to dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.bit_flip_channel-Tuple{Real}","page":"Blocks","title":"YaoBlocks.bit_flip_channel","text":"bit_flip_channel(p::Real)\n\nCreate a bit flip channel as a UnitaryChannel.\n\n(1-p)ρ + pXρX\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache","page":"Blocks","title":"YaoBlocks.cache","text":"cache(x[, level=1; recursive=false])\n\nCreate a CachedBlock with given block x, which will cache the matrix of x for the first time it calls mat, and use the cached matrix in the following calculations.\n\nExamples\n\njulia> cache(control(3, 1, 2=>X))\nnqubits: 3\n[cached] control(1)\n   └─ (2,) X\n\n\njulia> chain(cache(control(3, 1, 2=>X)), repeat(H))\nnqubits: 3\nchain\n└─ [cached] control(1)\n      └─ (2,) X\n\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cache_key-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.cache_key","text":"cache_key(block)\n\nReturns the key that identify the matrix cache of this block. By default, we use the returns of parameters as its key.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache_type-Tuple{Type{<:AbstractBlock}}","page":"Blocks","title":"YaoBlocks.cache_type","text":"cache_type(::Type) -> DataType\n\nReturn the element type that a CacheFragment will use.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.chain","text":"chain(n)\n\nReturn an empty ChainBlock which can be used like a list of blocks.\n\nExamples\n\njulia> chain(2)\nnqubits: 2\nchain\n\n\njulia> chain(2; nlevel=3)\nnqudits: 2\nchain\n\n\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{}","page":"Blocks","title":"YaoBlocks.chain","text":"chain()\n\nReturn an lambda n->chain(n).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Union{Tuple{Vararg{AbstractBlock{D}}}, Tuple{D}} where D","page":"Blocks","title":"YaoBlocks.chain","text":"chain(blocks...) -> ChainBlock\nchain(n) -> ChainBlock\n\nReturn a ChainBlock which chains a list of blocks with the same number of qudits. Let G_i be a sequence of n-qudit blocks, the matrix representation of block chain(G_1, G_2, ..., G_m) is\n\nG_m G_m-1ldots G_1\n\nIt is almost equivalent to matrix multiplication except the order is reversed. We make its order different from regular matrix multiplication because quantum circuits can be represented more naturally in this form.\n\nExamples\n\njulia> chain(X, Y, Z)\nnqubits: 1\nchain\n├─ X\n├─ Y\n└─ Z\n\njulia> chain(2, put(1=>X), put(2=>Y), cnot(2, 1))\nnqubits: 2\nchain\n├─ put on (1)\n│  └─ X\n├─ put on (2)\n│  └─ Y\n└─ control(2)\n   └─ (1,) X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chmeasureoperator-Union{Tuple{D}, Tuple{Measure{D, K} where K, AbstractBlock}} where D","page":"Blocks","title":"YaoBlocks.chmeasureoperator","text":"chmeasureoperator(m::Measure, op::AbstractBlock)\n\nchange the measuring operator. It will also discard existing measuring results.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cleanup-Tuple{EntryTable}","page":"Blocks","title":"YaoBlocks.cleanup","text":"cleanup(entries::EntryTable; zero_threshold=0.0)\n\nClean up the entry table by 1) sort entries, 2) merge items and 3) clean up zeros. Any value with amplitude ≤ zero_threshold will be regarded as zero.\n\njulia> et = EntryTable([bit\"000\",bit\"011\",bit\"101\",bit\"101\",bit\"011\",bit\"110\",bit\"110\",bit\"011\",], [1.0 + 0.0im,-1, 1,1,1,-1,1,1,-1])\nEntryTable{DitStr{2, 3, Int64}, ComplexF64}:\n  000 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   -1.0 + 0.0im\n  101 ₍₂₎   1.0 + 0.0im\n  101 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   1.0 + 0.0im\n  110 ₍₂₎   -1.0 + 0.0im\n  110 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   1.0 + 0.0im\n\n\njulia> cleanup(et)\nEntryTable{DitStr{2, 3, Int64}, ComplexF64}:\n  000 ₍₂₎   1.0 + 0.0im\n  011 ₍₂₎   1.0 + 0.0im\n  101 ₍₂₎   2.0 + 0.0im\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cnot-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cnot","text":"cnot([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CNOT gate with number of active qubits n and locs of control qubits ctrl_locs, and location of X gate.\n\nExamples\n\njulia> cnot(3, (2, 3), 1)\nnqubits: 3\ncontrol(2, 3)\n└─ (1,) X\n\njulia> cnot(2, 1)\n(n -> cnot(n, 2, 1))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.collect_blocks-Union{Tuple{T}, Tuple{Type{T}, AbstractBlock}} where T<:AbstractBlock","page":"Blocks","title":"YaoBlocks.collect_blocks","text":"collect_blocks(block_type, root)\n\nReturn a ChainBlock with all block of block_type in root.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(ctrl_locs, target) -> f(n)\n\nReturn a lambda that takes the number of total active qubits as input. See also control.\n\nExamples\n\njulia> control((2, 3), 1=>X)\n(n -> control(n, (2, 3), 1 => X))\n\njulia> control(2, 1=>X)\n(n -> control(n, 2, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Int64, Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(n, ctrl_locs, locations => subblock)\n\nReturn a n-qubit ControlBlock, where the control locations ctrl_locs and the subblock locations in the third argument can be an integer, a tuple or a range, and the size of the subblock should match the length of locations. Let I be the 2 times 2 identity matrix, G be a 2 times 2 subblock, P_0=0ranglelangle 0 and P_1=1ranglelangle 1 be two single qubit projection operators to subspace 0rangle and 1rangle, i and j be two integers that ij. The matrix representation of control(n, i, j=>G) is\n\nbeginalign\nI^otimes n-i P_0 otimes I^otimes i-j-1 otimes Iotimes I^otimes j-1\n+\n I^otimes n-i P_1 otimes I^otimes i-j-1 otimes Gotimes I^otimes j-1\nendalign\n\nThe multi-controlled multi-qubit controlled block is more complicated, it means apply the gate when control qubits are all ones. Each control location can take a negative sign to represent the inverse control, meaning only when this qubit is 0, the controlled gate is applied.\n\nExamples\n\njulia> control(4, (1, 2), 3=>X)\nnqubits: 4\ncontrol(1, 2)\n└─ (3,) X\n\njulia> control(4, 1, 3=>X)\nnqubits: 4\ncontrol(1)\n└─ (3,) X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cunmat","page":"Blocks","title":"YaoBlocks.cunmat","text":"cunmat(nbit::Int, cbits::NTuple{C, Int}, cvals::NTuple{C, Int}, U0::AbstractMatrix, locs::NTuple{M, Int}) where {C, M} -> AbstractMatrix\n\ncontrol-unitary matrix\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cz-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cz","text":"cz([n, ]ctrl_locs, location)\n\nReturn a special ControlBlock, aka CZ gate with number of active qubits n and locs of control qubits ctrl_locs, and location of Z gate. See also cnot.\n\nExamples\n\njulia> cz(2, 1, 2)\nnqubits: 2\ncontrol(1)\n└─ (2,) Z\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.decode_sign-Union{Tuple{NTuple{N, Int64}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.decode_sign","text":"decode_sign(ctrls...)\n\nDecode signs into control sequence on control or inversed control.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.depolarizing_channel-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.depolarizing_channel","text":"depolarizing_channel(n::Int; p::Real)\n\nCreate a global depolarizing channel.\n\nArguments\n\nn: number of qubits.\n\nKeyword Arguments\n\np: probability of this error to occur.\n\nSee also\n\nsingle_qubit_depolarizing_channel and two_qubit_depolarizing_channel for depolarizing channels acting on only one or two qubits.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dispatch-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.dispatch","text":"dispatch(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x, the generic non-inplace version.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dump_gate","page":"Blocks","title":"YaoBlocks.dump_gate","text":"dump_gate(blk::AbstractBlock) -> Expr\n\nconvert a gate to a YaoScript expression for serization. The fallback is GateTypeName(fields...)\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.eigenbasis-Union{Tuple{AbstractBlock{D}}, Tuple{D}} where D","page":"Blocks","title":"YaoBlocks.eigenbasis","text":"eigenbasis(op::AbstractBlock)\n\nReturn the eigenvalue and eigenvectors of target operator. By applying eigenvector' to target state, one can swith the basis to the eigenbasis of this operator. However, eigenvalues does not have a specific form.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.gate_expr-Union{Tuple{G}, Tuple{Val{G}, Any, Any}} where G","page":"Blocks","title":"YaoBlocks.gate_expr","text":"gate_expr(::Val{G}, args, info)\n\nObtain the gate constructior from its YaoScript expression. G is a symbol for the gate type, the default constructor is G(args...). info contains the informations about the number of qubit and Yao version.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.getcol-Tuple{LuxurySparse.SDSparseMatrixCSC, Int64}","page":"Blocks","title":"YaoBlocks.getcol","text":"getcol(csc::SDparseMatrixCSC, icol::Int) -> (View, View)\n\nget specific col of a CSC matrix, returns a slice of (rowval, nzval)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.igate-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.igate","text":"igate(n::Int; nlevel=2)\n\nThe constructor for IdentityGate. Let I_d be a d times d identity matrix, igate(n; nlevel=d) is defined as I_d^otimes n.\n\nExamples\n\njulia> igate(2)\nigate(2)\n\njulia> igate(2; nlevel=3)\nigate(2;nlevel=3)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.isclean-Tuple{EntryTable}","page":"Blocks","title":"YaoBlocks.isclean","text":"isclean(entries::EntryTable; zero_threshold=0.0)\n\nReturn true if the entries are ordered, unique and amplitudes are nonzero. Any value with amplitude ≤ zero_threshold will be regarded as zero.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.map_address","page":"Blocks","title":"YaoBlocks.map_address","text":"map_address(block::AbstractBlock, info::AddressInfo) -> AbstractBlock\n\nmap the locations in block to target locations.\n\nExample\n\nmap_address can be used to embed a sub-circuit to a larger one.\n\njulia> c = chain(5, repeat(H, 1:5), put(2=>X), kron(1=>X, 3=>Y))\nnqubits: 5\nchain\n├─ repeat on (1, 2, 3, 4, 5)\n│  └─ H\n├─ put on (2)\n│  └─ X\n└─ kron\n   ├─ 1=>X\n   └─ 3=>Y\n\n\njulia> map_address(c, AddressInfo(10, [6,7,8,9,10]))\nnqubits: 10\nchain\n├─ repeat on (6, 7, 8, 9, 10)\n│  └─ H\n├─ put on (7)\n│  └─ X\n└─ kron\n   ├─ 6=>X\n   └─ 8=>Y\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.matblock-Tuple{AbstractMatrix}","page":"Blocks","title":"YaoBlocks.matblock","text":"matblock(mat_or_block; nlevel=2, tag=\"matblock(...)\")\n\nCreate a GeneralMatrixBlock with a matrix m.\n\nExamples\n\njulia> matblock(ComplexF64[0 1;1 0])\nmatblock(...)\n\n!!!warn\n\nInstead of converting it to the default data type `ComplexF64`,\nthis will return its contained matrix when calling `mat`.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.num_nonzero","page":"Blocks","title":"YaoBlocks.num_nonzero","text":"num_nonzero(nbits, nctrls, U, [N])\n\nReturn number of nonzero entries of the matrix form of control-U gate. nbits is the number of qubits, and nctrls is the number of control qubits.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.parameters!-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters!","text":"parameters!(out, block)\n\nAppend all the parameters contained in block tree with given root block to out.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parameters_range-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters_range","text":"parameters_range(block)\n\nReturn the range of real parameters present in block.\n\nnote: Note\nIt may not be the case that length(parameters_range(block)) == nparameters(block).\n\nExample\n\njulia> YaoBlocks.parameters_range(RotationGate(X, 0.1))\n1-element Vector{Tuple{Float64, Float64}}:\n (0.0, 6.283185307179586)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parse_block","page":"Blocks","title":"YaoBlocks.parse_block","text":"parse_block(n, ex)\n\nThis function parse the julia object ex to a quantum block, it defines the syntax of high level interfaces. ex can be a function takes number of qubits n as input or it can be a pair.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.pauli_error_channel-Tuple{}","page":"Blocks","title":"YaoBlocks.pauli_error_channel","text":"pauli_error_channel(; px::Real, py::Real=px, pz::Real=px)\n\nCreate the Pauli error channel as a UnitaryChannel\n\n    (1 - (p_x + p_y + p_z))ρ + p_xXρX + p_yYρY  + p_zZρZ\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.phase-Tuple{Real}","page":"Blocks","title":"YaoBlocks.phase","text":"phase(theta)\n\nReturns a global phase gate. Defined with following matrix form:\n\ne^iθ I\n\nExamples\n\nYou can create a global phase gate with a phase (a real number).\n\njulia> phase(0.1)\nphase(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.phase_flip_channel-Tuple{Real}","page":"Blocks","title":"YaoBlocks.phase_flip_channel","text":"phase_flip_channel(::Real)\n\nCreate a phase flip channel as UnitaryChannel.\n\n(1-p)ρ + pZρZ\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{AbstractBlock, Vector}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(block, list)\n\nPop the first nparameters parameters of list, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{Function, AbstractBlock, Vector}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(f, block, list)\n\nPop the first nparameters parameters of list, map them with a function f, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.postwalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.postwalk","text":"postwalk(f, src::AbstractBlock)\n\nWalk the tree and call f after the children are visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.prewalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.prewalk","text":"prewalk(f, src::AbstractBlock)\n\nWalk the tree and call f once the node is visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_annotation-Tuple{IO, Vararg{Any, 4}}","page":"Blocks","title":"YaoBlocks.print_annotation","text":"print_annotation(io, root, node, child, k)\n\nPrint the annotation of k-th child of node, aka the k-th element of subblocks(node).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_prefix-Tuple{IO, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_prefix","text":"print_prefix(io, depth, charset, active_levels)\n\nprint prefix of a tree node in a single line.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_subtypetree","page":"Blocks","title":"YaoBlocks.print_subtypetree","text":"print_subtypetree(::Type[, level=1, indent=4])\n\nPrint subtype tree, level specify the depth of the tree.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_title-Tuple{IO, AbstractBlock}","page":"Blocks","title":"YaoBlocks.print_title","text":"print_title(io, block)\n\nPrint the title of given block of an AbstractBlock.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_tree","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree(io, root, node[, depth=1, active_levels=()]; kwargs...)\n\nPrint the block tree.\n\nKeywords\n\nmaxdepth: max tree depth to print\ncharset: default is ('├','└','│','─'). See also YaoBlocks.BlockTreeCharSet.\ntitle: control whether to print the title, true or false, default is true\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_tree-Tuple{Any}","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree([io=stdout], root)\n\nPrint the block tree.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.projection-Tuple{AbstractMatrix, AbstractMatrix}","page":"Blocks","title":"YaoBlocks.projection","text":"projection(y::AbstractMatrix, op::AbstractMatrix) -> typeof(y)\n\nProject op to sparse matrix with same sparsity as y.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.projector-Tuple{AbstractArrayReg}","page":"Blocks","title":"YaoBlocks.projector","text":"projector(v::AbstractArrayReg) -> Projector\n\n\nCreate a Projector with an quantum state vector v.\n\nExample\n\njulia> projector(rand_state(3))\n|s⟩⟨s|, nqudits = 3\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.projector-Tuple{Any}","page":"Blocks","title":"YaoBlocks.projector","text":"projector(x)\n\nReturn projector on 0 or projector on 1.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.pswap-Tuple{Int64, Int64, Int64, Real}","page":"Blocks","title":"YaoBlocks.pswap","text":"pswap(n::Int, i::Int, j::Int, α::Real)\npswap(i::Int, j::Int, α::Real) -> f(n)\n\nparametrized swap gate.\n\nExamples\n\njulia> pswap(2, 1, 2, 0.1)\nnqubits: 2\nput on (1, 2)\n└─ rot(SWAP, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Tuple{Pair}","page":"Blocks","title":"YaoBlocks.put","text":"put(pair) -> f(n)\n\nLazy curried version of put.\n\nExamples\n\njulia> put(1=>X)\n(n -> put(n, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Union{Tuple{M}, Tuple{Int64, Pair{NTuple{M, Int64}, <:AbstractBlock}}} where M","page":"Blocks","title":"YaoBlocks.put","text":"put(n::Int, locations => subblock) => PutBlock\n\nCreate a n-qudit PutBlock. The second argument is a pair of locations and subblock, where the locations can be a tuple, an integer or a range and the subblock size should match the length of locations. Let I be a 2times 2 identity matrix and G be a 2times 2 matrix, the matrix representation of put(n, i=>G) is defined as\n\nI^otimes n-i otimes G otimes I^otimes i-1\n\nFor multiple locations, the expression can be complicated,  which corresponds to the matrix representation of multi-qubit gate applied on n-qubit space in quantum computing.\n\nExamples\n\njulia> put(4, 1=>X)\nnqubits: 4\nput on (1)\n└─ X\n\nIf you want to put a multi-qubit gate on specific locations, you need to write down all possible locations.\n\njulia> put(4, (1, 3)=>kron(X, Y))\nnqubits: 4\nput on (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\nThe outter locations creates a scope which make it seems to be a contiguous two qubits for the block inside PutBlock.\n\ntips: Tips\nIt is better to use subroutine instead of put for large blocks, since put will use the matrix of its contents directly instead of making use of what's in it. put is more efficient for small blocks.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rand_hermitian-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.rand_hermitian","text":"rand_hermitian([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random hermitian matrix.\n\njulia> ishermitian(rand_hermitian(2))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rand_unitary-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.rand_unitary","text":"rand_unitary([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random unitary matrix.\n\nExamples\n\njulia> isunitary(rand_unitary(2))\ntrue\n\njulia> eltype(rand_unitary(ComplexF32, 2))\nComplexF32 (alias for Complex{Float32})\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.reflect","page":"Blocks","title":"YaoBlocks.reflect","text":"reflect(\n    v::AbstractArrayReg\n) -> ReflectGate{D, T, Irrational{:π}, AT} where {D, T, AT<:(AbstractArrayReg{D, T})}\nreflect(\n    v::AbstractArrayReg,\n    θ::Real\n) -> ReflectGate{_A, T, Tt, AT} where {_A, Tt<:Real, T, AT<:(AbstractArrayReg{_A, T})}\n\n\nCreate a ReflectGate with respect to an quantum state vector v.\n\nExample\n\njulia> reflect(rand_state(3))\nTime Evolution Δt = π, tol = 1.0e-7\n|s⟩⟨s|, nqudits = 3\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.rmlines-Tuple{Expr}","page":"Blocks","title":"YaoBlocks.rmlines","text":"rmlines(ex)\n\nRemove LineNumberNode from an Expr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rot-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.rot","text":"rot(U, theta)\n\nReturn a RotationGate on U axis.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.sandwich-Tuple{AbstractArrayReg, AbstractBlock, AbstractArrayReg}","page":"Blocks","title":"YaoBlocks.sandwich","text":"sandwich(bra::AbstractRegister, op::AbstractBlock, ket::AbstracRegister) -> Complex\n\nCompute the sandwich function ⟨bra|op|ket⟩.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setcol!-Tuple{SparseMatrixCSC, Int64, AbstractVector, Any}","page":"Blocks","title":"YaoBlocks.setcol!","text":"setcol!(csc::SparseMatrixCSC, icol::Int, rowval::AbstractVector, nzval) -> SparseMatrixCSC\n\nset specific col of a CSC matrix\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setiparams","page":"Blocks","title":"YaoBlocks.setiparams","text":"setiparams([f], block, itr)\nsetiparams([f], block, params...)\n\nSet the parameters of block, the non-inplace version. When f is provided, set parameters of block to the value in collection mapped by f. iter can be an iterator or a symbol, the symbol can be :zero, :random.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.shift-Tuple{Any}","page":"Blocks","title":"YaoBlocks.shift","text":"shift(θ)\n\nCreate a ShiftGate with phase θ.\n\nbeginpmatrix\n1  0\n0  e^itheta\nendpmatrix\n\nExamples\n\njulia> shift(0.1)\nshift(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.simple_commute_eachother-Union{Tuple{Vector{<:AbstractBlock{D}}}, Tuple{D}} where D","page":"Blocks","title":"YaoBlocks.simple_commute_eachother","text":"Return true if operators commute to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.single_qubit_depolarizing_channel-Tuple{Real}","page":"Blocks","title":"YaoBlocks.single_qubit_depolarizing_channel","text":"single_qubit_depolarizing_channel(p::Real)\n\nCreate a single-qubit depolarizing channel.\n\nThe factor of 3/4 in front of p ensures that  single_qubit_depolarizing_channel(p) == depolarizing_channel(1, p)\n\n(1 - 3p4 ρ) + p4(XρX + YρY + ZρZ)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.sprand_hermitian-Tuple{Int64, Any}","page":"Blocks","title":"YaoBlocks.sprand_hermitian","text":"sprand_hermitian([T=ComplexF64], N, density)\n\nCreate a sparse random hermitian matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.sprand_unitary-Tuple{Int64, Real}","page":"Blocks","title":"YaoBlocks.sprand_unitary","text":"sprand_unitary([T=ComplexF64], N::Int, density) -> SparseMatrixCSC\n\nCreate a random sparse unitary matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(block, locs) -> f(n)\n\nLazy curried version of subroutine.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{Int64, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(n, block, locs)\n\nCreate a n-qudit Subroutine block, where the subblock is a subprogram of size m, and locs is a tuple or range of length m. It runs a quantum subprogram with smaller size on a subset of locations. While its mathematical definition is the same as the put block, while it is more suited for running a larger chunk of circuit.\n\nExamples\n\nSubroutine is equivalent to put a block on given position mathematically, but more efficient and convenient for large blocks.\n\njulia> r = rand_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> apply!(copy(r), subroutine(X, 1)) ≈ apply!(copy(r), put(1=>X))\ntrue\n\nIt works for in-contigious locs as well\n\njulia> r = rand_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> cc = subroutine(4, kron(X, Y), (1, 3))\nnqubits: 4\nSubroutine: (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\njulia> pp = chain(4, put(1=>X), put(3=>Y))\nnqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n└─ put on (3)\n   └─ Y\n\njulia> apply!(copy(r), cc) ≈ apply!(copy(r), pp)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(n, loc1, loc2)\n\nCreate a n-qubit Swap gate which swap loc1 and loc2.\n\nExamples\n\njulia> swap(4, 1, 2)\nnqubits: 4\nput on (1, 2)\n└─ SWAP\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(loc1, loc2) -> f(n)\n\nCreate a lambda that takes the total number of active qubits as input. Lazy curried version of swap(n, loc1, loc2). See also Swap.\n\nExamples\n\njulia> swap(1, 2)\n(n -> swap(n, 1, 2))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.time_evolve-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.time_evolve","text":"time_evolve(H, dt[; tol=1e-7, check_hermicity=true])\n\nCreate a TimeEvolution block with Hamiltonian H and time step dt. The TimeEvolution block will use Krylove based expv to calculate time propagation. TimeEvolution block can also be used for imaginary time evolution if dt is complex. Let H be a hamiltonian and t be a time, the matrix representation of time_evolve(H, t) is e^-iHt.\n\nArguments\n\nH the hamiltonian represented as an AbstractBlock.\ndt: the evolution duration (start time is zero).\n\nKeyword Arguments\n\ntol::Real=1e-7: error tolerance.\ncheck_hermicity=true: check hermicity or not.\n\nExamples\n\njulia> time_evolve(kron(2, 1=>X, 2=>X), 0.1)\nTime Evolution Δt = 0.1, tol = 1.0e-7\nkron\n├─ 1=>X\n└─ 2=>X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.two_qubit_depolarizing_channel-Tuple{Real}","page":"Blocks","title":"YaoBlocks.two_qubit_depolarizing_channel","text":"two_qubit_depolarizing_channel(p::Real)\n\nCreate a two-qubit depolarizing channel. Note that this is not the same  as kron(single_qubit_depolarizing_channel(p), single_qubit_depolarizing_channel(p)).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.u1ij!","page":"Blocks","title":"YaoBlocks.u1ij!","text":"u1ij!(target, i, j, a, b, c, d)\n\nsingle u1 matrix into a target matrix.\n\nnote: Note\nFor coo, we take an additional parameter     * ptr: starting position to store new data.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.unitary_channel-Tuple{Any, AbstractVector}","page":"Blocks","title":"YaoBlocks.unitary_channel","text":"unitary_channel(operators, probs) -> UnitaryChannel\n\nReturns a UnitaryChannel instance, where `operators is a list of operators, probs is a real vector that sum up to 1. The unitary channel is defined as below\n\nphi(rho) = sum_i p_i U_i ρ U_i^dagger\n\nwhere rho in a DensityMatrix as the register to apply on, p_i is the i-th element in probs, U_i is the i-th operator in operators.\n\nExamples\n\njulia> unitary_channel([X, Y, Z], [0.1, 0.2, 0.7])\nnqubits: 1\nunitary_channel\n├─ [0.1] X\n├─ [0.2] Y\n└─ [0.7] Z\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.unmat-Tuple{Val{2}, Int64, AbstractMatrix, NTuple{N, T} where {N, T}}","page":"Blocks","title":"YaoBlocks.unmat","text":"unmat(::Val{D}, nbit::Int, U::AbstractMatrix, locs::NTuple) -> AbstractMatrix\n\nReturn the matrix representation of putting matrix at locs.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.@yao_str-Tuple{String}","page":"Blocks","title":"YaoBlocks.@yao_str","text":"@yao_str\nyao\"...\"\n\nThe mark up language for quantum circuit.\n\n\n\n\n\n","category":"macro"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"CurrentModule = YaoPlots\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister, YaoSym\n    using YaoBlocks\n    using YaoArrayRegister\n    using YaoPlots\nend","category":"page"},{"location":"man/plot.html#Quantum-Circuit-Visualization","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"YaoPlots is the Quantum circuit visualization component for Yao.","category":"page"},{"location":"man/plot.html#Examples","page":"Quantum Circuit Visualization","title":"Examples","text":"","category":"section"},{"location":"man/plot.html#Example-1:-Visualize-a-QBIR-define-in-Yao","page":"Quantum Circuit Visualization","title":"Example 1: Visualize a QBIR define in Yao","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"using Yao.EasyBuild, YaoPlots\n\n# show a qft circuit\nvizcircuit(qft_circuit(5))","category":"page"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"If you are using a Pluto/Jupyter notebook, Atom/VSCode editor, you should see the above image in your plotting panel.","category":"page"},{"location":"man/plot.html#Example-2:-Visualize-a-single-qubit","page":"Quantum Circuit Visualization","title":"Example 2: Visualize a single qubit","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"using YaoPlots, Yao\n\nreg = zero_state(1) |> Rx(π/8) |> Rx(π/8)\nrho = density_matrix(ghz_state(2), 1)\n\nbloch_sphere(\"|ψ⟩\"=>reg, \"ρ\"=>rho; show_projection_lines=true)","category":"page"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"See more examples.","category":"page"},{"location":"man/plot.html#Adjusting-the-plot-attributes","page":"Quantum Circuit Visualization","title":"Adjusting the plot attributes","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"Various attributes of the visualizations can be altered.  The plot can be modified, if we change the following attributes","category":"page"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"YaoPlots.CircuitStyles.linecolor[] for line color, default value being \"#000000\" (black color)\nYaoPlots.CircuitStyles.gate_bgcolor[] for background color of square blocks, the default value being \"#FFFFFF\" (white color)\nYaoPlots.CircuitStyles.textcolor[] for text color, default value being \"#000000\nYaoPlots.CircuitStyles.lw[] for line width, default value being 1 (pt)\nYaoPlots.CircuitStyles.textsize[] for text size, default value being 16 (pt)\nYaoPlots.CircuitStyles.paramtextsize[] for parameter text size, for parameterized gates, default value being 10 (pt)","category":"page"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"For example,","category":"page"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"using YaoPlots, Yao\nYaoPlots.CircuitStyles.linecolor[] = \"pink\" \nYaoPlots.CircuitStyles.gate_bgcolor[] = \"yellow\" \nYaoPlots.CircuitStyles.textcolor[] = \"#000080\" # the navy blue color\nYaoPlots.CircuitStyles.fontfamily[] = \"JuliaMono\"\nYaoPlots.CircuitStyles.lw[] = 2.5\nYaoPlots.CircuitStyles.textsize[] = 13\nYaoPlots.CircuitStyles.paramtextsize[] = 8\n\t\t\nvizcircuit(chain(3, put(1=>X), repeat(3, H), put(2=>Y), repeat(3, Rx(π/2))))","category":"page"},{"location":"man/plot.html#Circuit-Visualization","page":"Quantum Circuit Visualization","title":"Circuit Visualization","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"vizcircuit\nplot","category":"page"},{"location":"man/plot.html#YaoPlots.vizcircuit","page":"Quantum Circuit Visualization","title":"YaoPlots.vizcircuit","text":"vizcircuit(circuit; w_depth=0.85, w_line=0.75, format=:svg, filename=nothing,\n    show_ending_bar=false, starting_texts=nothing, starting_offset=-0.3,\n    ending_texts=nothing, ending_offset=0.3)\n\nVisualize a Yao quantum circuit.\n\nKeyword Arguments\n\nw_depth is the circuit column width.\nw_line is the circuit row width.\nformat can be :svg, :png or :pdf.\nfilename can be \"*.svg\", \"*.png\", \"*.pdf\" or nothing (not saving to a file).\nstarting_texts and ending_texts are texts shown before and after the circuit.\nstarting_offset and end_offset are offsets (real values) for starting and ending texts.\nshow_ending_bar is a boolean switch to show ending bar.\n\nStyles\n\nTo change the gates styles like colors and lines, please modify the constants in submodule CircuitStyles. They are defined as:\n\nCircuitStyles.unit = Ref(60)                      # number of points in a unit\nCircuitStyles.r = Ref(0.2)                        # size of nodes\nCircuitStyles.lw = Ref(1.0)                       # line width\nCircuitStyles.textsize = Ref(16.0)                # text size\nCircuitStyles.paramtextsize = Ref(10.0)           # text size (longer texts)\nCircuitStyles.fontfamily = Ref(\"JuliaMono\")       # font family\nCircuitStyles.linecolor = Ref(\"#000000\")          # line color\nCircuitStyles.gate_bgcolor = Ref(\"transparent\")   # gate background color\nCircuitStyles.textcolor = Ref(\"#000000\")          # text color\n\n\n\n\n\n","category":"function"},{"location":"man/plot.html#YaoPlots.plot","page":"Quantum Circuit Visualization","title":"YaoPlots.plot","text":"An alias of vizcircuit\n\n\n\n\n\n","category":"function"},{"location":"man/plot.html#Bloch-Sphere-Visualization","page":"Quantum Circuit Visualization","title":"Bloch Sphere Visualization","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"CircuitStyles\nbloch_sphere\nBlochStyles","category":"page"},{"location":"man/plot.html#YaoPlots.CircuitStyles","page":"Quantum Circuit Visualization","title":"YaoPlots.CircuitStyles","text":"CircuitStyles\n\nA module to define the styles of the circuit visualization. To change the styles, please modify the variables in this module, e.g.\n\njulia> using YaoPlots\n\njulia> YaoPlots.CircuitStyles.unit[] = 40\n40\n\nStyle variables\n\nSizes\n\nunit is the number of pixels in a unit.\nr is the size of nodes.\nlw is the line width.\n\nTexts\n\ntextsize is the text size.\nparamtextsize is the text size for longer texts.\nfontfamily is the font family.\n\nColors\n\nlinecolor is the line color.\ngate_bgcolor is the gate background color.\ntextcolor is the text color.\n\n\n\n\n\n","category":"module"},{"location":"man/plot.html#YaoPlots.bloch_sphere","page":"Quantum Circuit Visualization","title":"YaoPlots.bloch_sphere","text":"bloch_sphere(\n    states...;\n    textsize,\n    color,\n    drawing_size,\n    offset_x,\n    offset_y,\n    filename,\n    format,\n    fontfamily,\n    background_color,\n    lw,\n    eye_point,\n    extra_kwargs...\n) -> Luxor.Drawing\n\n\nDraw a bloch sphere, with the inputs being a list of string => state pairs, where the string is a label for the state and a state can be a complex vector of size 2, a Yao register or DensityMatrix. If you want to get a raw drawing, use draw_bloch_sphere instead.\n\nKeyword Arguments\n\nNote: The default values can be specified in submodule BlochStyles.\n\ntextsize: the size of the text\ncolor: the color of the drawing\ndrawing_size: the size of the drawing\noffset_x: the offset of the drawing in x direction\noffset_y: the offset of the drawing in y direction\nfilename: the filename of the output file, if not specified, a temporary file will be used\nformat: the format of the output file, if not specified, the format will be inferred from the filename\nfontfamily: the font family of the text\nbackground_color: the background color of the drawing\nlw: the line width of the drawing\neye_point: the eye point of the drawing\nextra_kwargs: extra keyword arguments passed to draw_bloch_sphere\ndot_size: the size of the dot\nball_size: the size of the ball\nshow_projection_lines: whether to show the projection lines\nshow_angle_texts: whether to show the angle texts\nshow_line: whether to show the line\nshow01: whether to show the 0 and 1 states\ncolors: the colors of the states\naxes_lw: the line width of the axes\naxes_textsize: the size of the axes texts\naxes_colors: the colors of the axes\naxes_texts: the texts of the axes\n\nExamples\n\njulia> using YaoPlots, YaoArrayRegister\n\njulia> bloch_sphere(\"|ψ⟩\"=>rand_state(1), \"ρ\"=>density_matrix(rand_state(2), 1));\n\n\n\n\n\n","category":"function"},{"location":"man/plot.html#YaoPlots.BlochStyles","page":"Quantum Circuit Visualization","title":"YaoPlots.BlochStyles","text":"BlochStyles\n\nThe module to define the default styles for bloch sphere drawing. To change the default styles, you can modify the values in this module, e.g.\n\nusing YaoPlots\nYaoPlots.BlochStyles.lw[] = 2.0\n\nStyle variables\n\nGeneric\n\nlw: the line width of the drawing\ntextsize: the size of the text\nfontfamily: the font family of the text\nbackground_color: the background color of the drawing\ncolor: the color of the drawing\n\nSphere\n\nball_size: the size of the ball\ndot_size: the size of the dot\neye_point: the eye point of the drawing\n\nAxis\n\naxes_lw: the line width of the axes\naxes_colors: the colors of the axes\naxes_texts: the texts of the axes, default to [\"x\", \"y\", \"z\"]\n\nState display\n\nshow_projection_lines: whether to show the projection lines\nshow_angle_texts: whether to show the angle texts\nshow_line: whether to show the line\nshow01: whether to show the 0 and 1 states\n\n\n\n\n\n","category":"module"},{"location":"man/plot.html#Themes","page":"Quantum Circuit Visualization","title":"Themes","text":"","category":"section"},{"location":"man/plot.html","page":"Quantum Circuit Visualization","title":"Quantum Circuit Visualization","text":"darktheme!\nlighttheme!","category":"page"},{"location":"man/plot.html#YaoPlots.darktheme!","page":"Quantum Circuit Visualization","title":"YaoPlots.darktheme!","text":"darktheme!()\n\nChange the default theme to dark.\n\n\n\n\n\n","category":"function"},{"location":"man/plot.html#YaoPlots.lighttheme!","page":"Quantum Circuit Visualization","title":"YaoPlots.lighttheme!","text":"lighttheme!()\n\nChange the default theme to light.\n\n\n\n\n\n","category":"function"},{"location":"man/yao2einsum.html#Tensor-network-backend","page":"Tensor network backend","title":"Tensor network backend","text":"","category":"section"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"Simulating quantum circuits using tensor networks has been studied in the literature[Markov2008][Pan2022]. The YaoToEinsum package provides a convenient way to convert Yao circuits to tensor networks, which can be used for further analysis and optimization.","category":"page"},{"location":"man/yao2einsum.html#Tutorial","page":"Tensor network backend","title":"Tutorial","text":"","category":"section"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"The main function is","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"yao2einsum(circuit; initial_state=Dict(), final_state=Dict(), optimizer=TreeSA())","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"which transforms a Yao circuit to a tensor network that generalizes the hyper-graph (einsum notation).  The return value is a TensorNetwork object.","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"initial_state and final_state are for specifying the initial state and final state. Left the qubits unspecified if you want to keep them as the open indices.\noptimizer is for specifying the contraction order optimizing algorithm of the tensor network. The default value is the TreeSA() algorithm that developed in [Kalachev2021][Liu2023]. Please check the README of OMEinsumEinsumContractors.jl for more information.","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"In the following example, we show how to convert a quantum Fourier transform circuit to a tensor network and contract it to","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"Get the matrix representation of the circuit.\nGet the probability of measuring the zero state after applying the circuit on the zero state.","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"import Yao\nusing Yao.EasyBuild: qft_circuit\nn = 10;\ncircuit = qft_circuit(n);  # build a quantum Fourier transform circuit\nnetwork = Yao.yao2einsum(circuit)  # convert this circuit to tensor network\nreshape(Yao.contract(network), 1<<n, 1<<n) ≈ Yao.mat(circuit)\nnetwork = Yao.yao2einsum(circuit;  # convert circuit sandwiched by zero states\n        initial_state=Dict([i=>0 for i=1:n]), final_state=Dict([i=>0 for i=1:n]),\n        optimizer=Yao.YaoToEinsum.TreeSA(; nslices=3)) # slicing technique\nYao.contract(network)[] ≈ Yao.zero_state(n)' * (Yao.zero_state(n) |> circuit)","category":"page"},{"location":"man/yao2einsum.html#API","page":"Tensor network backend","title":"API","text":"","category":"section"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"yao2einsum\nTensorNetwork\noptimize_code\ncontraction_complexity\ncontract","category":"page"},{"location":"man/yao2einsum.html#YaoToEinsum.yao2einsum","page":"Tensor network backend","title":"YaoToEinsum.yao2einsum","text":"yao2einsum(circuit; initial_state=Dict(), final_state=Dict(), optimizer=TreeSA())\nyao2einsum(circuit, initial_state::Dict, final_state::Dict, optimizer)\n\nTransform a Yao circuit to a generalized tensor network (einsum) notation. The return value is a TensorNetwork instance.\n\nArguments\n\ncircuit is a Yao block as the input.\ninitial_state and final_state are dictionaries to specify the initial states and final states (taking conjugate).\nIn the first interface, a state is specified as an integer, e.g. Dict(1=>1, 2=>1, 3=>0, 4=>1) specifies a product state |1⟩⊗|1⟩⊗|0⟩⊗|1⟩.\nIn the second interface, a state is specified as an ArrayReg, e.g. Dict(1=>rand_state(1), 2=>rand_state(1)).\n\nIf any qubit in initial state or final state is not specified, it will be treated as a free leg in the tensor network.\n\noptimizer is the optimizer used to optimize the tensor network. The default is TreeSA().\n\nPlease check OMEinsumContractors.jl for more information.\n\njulia> using Yao\n\njulia> c = chain(3, put(3, 2=>X), put(3, 1=>Y), control(3, 1, 3=>Y))\nnqubits: 3\nchain\n├─ put on (2)\n│  └─ X\n├─ put on (1)\n│  └─ Y\n└─ control(1)\n   └─ (3,) Y\n\n\njulia> yao2einsum(c; initial_state=Dict(1=>0, 2=>1), final_state=Dict(1=>ArrayReg([0.6, 0.8im]), 2=>1))\nTensorNetwork\nTime complexity: 2^4.700439718141093\nSpace complexity: 2^2.0\nRead-write complexity: 2^6.0\n\n\n\n\n\n","category":"function"},{"location":"man/yao2einsum.html#YaoToEinsum.TensorNetwork","page":"Tensor network backend","title":"YaoToEinsum.TensorNetwork","text":"TensorNetwork\n\nA (generalized) tensor network representation of a quantum circuit.\n\nFields\n\ncode::AbstractEinsum: The einsum code.\ntensors::Vector: The tensors in the network.\n\n\n\n\n\n","category":"type"},{"location":"man/yao2einsum.html#OMEinsumContractionOrders.optimize_code","page":"Tensor network backend","title":"OMEinsumContractionOrders.optimize_code","text":"optimize_code(c::TensorNetwork, optimizer=TreeSA())\n\nOptimize the code of the tensor network.\n\nArguments\n\nc::TensorNetwork: The tensor network.\noptimizer::Optimizer: The optimizer to use, default is TreeSA(). Please check OMEinsumContractors.jl for more information.\n\n\n\n\n\n","category":"function"},{"location":"man/yao2einsum.html#OMEinsumContractionOrders.contraction_complexity","page":"Tensor network backend","title":"OMEinsumContractionOrders.contraction_complexity","text":"contraction_complexity(c::TensorNetwork)\n\nReturn the contraction complexity of the tensor network.\n\n\n\n\n\n","category":"function"},{"location":"man/yao2einsum.html#YaoToEinsum.contract","page":"Tensor network backend","title":"YaoToEinsum.contract","text":"contract(c::TensorNetwork)\n\nContract the tensor network, and return the result tensor.\n\n\n\n\n\n","category":"function"},{"location":"man/yao2einsum.html#References","page":"Tensor network backend","title":"References","text":"","category":"section"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"[Pan2022]: Pan, Feng, and Pan Zhang. \"Simulation of quantum circuits using the big-batch tensor network method.\" Physical Review Letters 128.3 (2022): 030501.","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"[Kalachev2021]: Kalachev, Gleb, Pavel Panteleev, and Man-Hong Yung. \"Recursive multi-tensor contraction for xeb verification of quantum circuits.\" arXiv preprint arXiv:2108.05665 (2021).","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"[Markov2008]: Markov, Igor L., and Yaoyun Shi. \"Simulating quantum computation by contracting tensor networks.\" SIAM Journal on Computing 38.3 (2008): 963-981.","category":"page"},{"location":"man/yao2einsum.html","page":"Tensor network backend","title":"Tensor network backend","text":"[Liu2023]: Liu, Jin-Guo, et al. \"Computing solution space properties of combinatorial optimization problems via generic tensor networks.\" SIAM Journal on Scientific Computing 45.3 (2023): A1239-A1270.","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"CurrentModule = YaoSym\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister, YaoSym\n    using YaoBlocks\n    using YaoArrayRegister\n    using YaoSym\nend","category":"page"},{"location":"man/symbolic.html#Symbolic-Computation","page":"Symbolic Computation","title":"Symbolic Computation","text":"","category":"section"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"The symbolic engine of Yao is based on SymEngine.jl. It allows one to define quantum circuits with symbolic parameters and perform symbolic computation on them. Two macro/functions play a key role in the symbolic computation:","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"@vars for defining symbolic variables\nsubs for substituting symbolic variables with concrete values","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"using Yao\n@vars θ\ncircuit = chain(2, put(1=>H), put(2=>Ry(θ)))\nmat(circuit)\nnew_circuit = subs(circuit, θ=>π/2)\nmat(new_circuit)","category":"page"},{"location":"man/symbolic.html#API","page":"Symbolic Computation","title":"API","text":"","category":"section"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"The following functions are for working with symbolic states.","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"@ket_str\n@bra_str\nszero_state","category":"page"},{"location":"man/symbolic.html#YaoSym.@ket_str","page":"Symbolic Computation","title":"YaoSym.@ket_str","text":"@ket_str\n\nCreate a ket register. See also @bra_str.\n\nExamples\n\na symbolic quantum state can be created simply by\n\njulia> ket\"110\" + 2ket\"111\"\n|110⟩ + 2.0|111⟩\n\nqubits can be partially actived by focus!\n\njulia> ket\"100\" + ket\"111\" |> focus!(1:2)\n|100⟩ + |111⟩\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.@bra_str","page":"Symbolic Computation","title":"YaoSym.@bra_str","text":"@bra_str\n\nCreate a bra register. See also @ket_str.\n\nExamples\n\nSimilar to @ket_str literal, a symbolic quantum state can be created by\n\njulia> bra\"111\" + 2bra\"101\"\n2.0⟨101| + ⟨111|\n\njulia> bra\"111\" * (ket\"101\" + ket\"111\")\n1\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.szero_state","page":"Symbolic Computation","title":"YaoSym.szero_state","text":"szero_state(n; nbatch=1)\n\nCreate a symbolic zero state, same as ket\"000\", but allows you use an integer.\n\n\n\n\n\n","category":"function"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"EditURL = \"../../../examples/4.shor-algorithm/main.jl\"","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"(Image: )","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Shor","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html#References","page":"Shor's Algorithm","title":"References","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Neilsen\nAn Insightful Blog","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The main program of a Shor's algorithm can be summarized in several lines of code. For the theory part, please refer to the reference materials above. It factorizes an integer L, and returns one of the factors.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"using Yao, BitBasis\nusing Yao.EasyBuild: qft_circuit","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Number-theory-basic","page":"Shor's Algorithm","title":"Number theory basic","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Before entering the main program, let us define some useful functions in number theory.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"module NumberTheory\n\nexport Z_star, Eulerφ, continued_fraction, mod_inverse, rand_primeto, factor_a_power_b\nexport is_order, order_from_float, find_order\n\n\"\"\"\n    Z_star(N::Int) -> Vector\n\nreturns the Z* group elements of `N`, i.e. {x | gcd(x, N) == 1}\n\"\"\"\nZ_star(N::Int) = filter(i->gcd(i, N)==1, 0:N-1)\nEulerφ(N) = length(Z_star(N))\n\n\"\"\"\n    continued_fraction(ϕ, niter::Int) -> Rational\n\nobtain `s` and `r` from `ϕ` that satisfies `|s/r - ϕ| ≦ 1/2r²`\n\"\"\"\ncontinued_fraction(ϕ, niter::Int) = niter==0 || isinteger(ϕ) ? floor(Int, ϕ) : floor(Int, ϕ) + 1//continued_fraction(1/mod(ϕ, 1), niter-1)\ncontinued_fraction(ϕ::Rational, niter::Int) = niter==0 || ϕ.den==1 ? floor(Int, ϕ) : floor(Int, ϕ) + 1//continued_fraction(1/mod(ϕ, 1), niter-1)\n\n\"\"\"\n    mod_inverse(x::Int, N::Int) -> Int\n\nReturn `y` that `(x*y)%N == 1`, notice the `(x*y)%N` operations in Z* forms a group and this is the definition of inverse.\n\"\"\"\nfunction mod_inverse(x::Int, N::Int)\n    for i=1:N\n        (x*i)%N == 1 && return i\n    end\n    throw(ArgumentError(\"Can not find the inverse, $x is probably not in Z*($N)!\"))\nend\n\n\"\"\"\n    is_order(r, x, N) -> Bool\n\nReturns true if `r` is the order of `x`, i.e. `r` satisfies `x^r % N == 1`.\n\"\"\"\nis_order(r, x, N) = powermod(x, r, N) == 1\n\n\"\"\"\n    find_order(x::Int, N::Int) -> Int\n\nFind the order of `x` by brute force search.\n\"\"\"\nfunction find_order(x::Int, N::Int)\n    findfirst(r->is_order(r, x, N), 1:N)\nend\n\n\"\"\"\n    rand_primeto(N::Int) -> Int\n\nReturns a random number `2 ≦ x < N` that is prime to `N`.\n\"\"\"\nfunction rand_primeto(N::Int)\n    while true\n        x = rand(2:N-1)\n        d = gcd(x, N)\n        if d == 1\n            return x\n        end\n    end\nend\n\n\"\"\"\n    order_from_float(ϕ, x, L) -> Int\n\nEstimate the order of `x` to `L`, `r`, from a floating point number `ϕ ∼ s/r` using the continued fraction method.\n\"\"\"\nfunction order_from_float(ϕ, x, L)\n    k = 1\n    rnum = continued_fraction(ϕ, k)\n    while rnum.den < L && k < 100\n        r = rnum.den\n        if is_order(r, x, L)\n            return r\n        end\n        k += 1\n        rnum = continued_fraction(ϕ, k)\n    end\n    return nothing\nend\n\n\"\"\"\n    factor_a_power_b(N::Int) -> (Int, Int) or nothing\n\nFactorize `N` into the power form `a^b`.\n\"\"\"\nfunction factor_a_power_b(N::Int)\n    y = log2(N)\n    for b = 2:ceil(Int, y)\n        x = 2^(y/b)\n        u1 = floor(Int, x)\n        u1^b == N && return (u1, b)\n        (u1+1)^b == N && return (u1+1, b)\n    end\nend\n\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Main.var\"##235\".NumberTheory","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#A-quantum-function-to-compute-mod","page":"Shor's Algorithm","title":"A quantum function to compute mod","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Before introducing the main program, let us customize a block for computing the classical function mod. In a more practical setup, it should be compiled to basic quantum gates. Here we just hack this function for simplicity.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"\n    KMod <: PrimitiveBlock{2}\n\nThe first `k` qubits are exponent, and the rest `n-k` are base `a`,\nit calculates `mod(a^k*x, L)`, notice `gcd(a, L)` should be 1.\n\"\"\"\nstruct KMod <: PrimitiveBlock{2}\n    n::Int\n    k::Int\n    a::Int\n    L::Int\n    function KMod(n, k, a, L)\n        @assert gcd(a, L) == 1 && L<=1<<(n-k)\n        new(n, k, a, L)\n    end\nend\n\nYao.nqudits(m::KMod) = m.n\n\nfunction bint2_reader(T, k::Int)\n    mask = bmask(T, 1:k)\n    return b -> (b&mask, b>>k)\nend\n\nfunction Yao.unsafe_apply!(reg::AbstractArrayReg, m::KMod)\n    nstate = zero(reg.state)\n\n    reader = bint2_reader(Int, m.k)\n    for b in 0:1<<m.n-1\n        k, i = reader(b)\n        _i = i >= m.L ? i : mod(i*powermod(m.a, k, m.L), m.L)\n        _b = k + _i<<m.k + 1\n        for j in 1:size(nstate,2)\n            @inbounds nstate[_b,j] = reg.state[b+1,j]\n        end\n    end\n    reg.state .= nstate\n    reg\nend\n\nfunction Yao.mat(::Type{T}, m::KMod) where {T}\n    perm = Vector{Int}(undef, 1<<m.n)\n    reader = bint2_reader(Int, m.k)\n    for b in 0:1<<m.n-1\n        k, i = reader(b)\n        _i = i >= m.L ? i : mod(i*powermod(m.a, k, m.L), m.L)\n        _b = k + _i<<m.k + 1\n        @inbounds perm[_b] = b+1\n    end\n    YaoBlocks.LuxurySparse.PermMatrix(perm, ones(T, 1<<m.n))\nend\n\nBase.adjoint(m::KMod) = KMod(m.n, m.k, mod_inverse(m.a, m.L), m.L)\nYao.print_block(io::IO, m::KMod) = print(io, \"Mod: $(m.a)^k*x % $(m.L) (nqubits = $(nqudits(m)), number of control bits = $(m.k))\")","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Main-Program","page":"Shor's Algorithm","title":"Main Program","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Here, the input ver can be either Val(:quantum) or Val(:classical), where the classical version is for comparison.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"using .NumberTheory\n\nfunction shor(L::Int, ver=Val(:quantum); maxtry=100)\n    L%2 == 0 && return 2\n\n    # find short cut solutions like `a^b`\n    res = NumberTheory.factor_a_power_b(L)\n    res !== nothing && return res[1]\n\n    for _ = 1:maxtry\n        # step 1\n        x = NumberTheory.rand_primeto(L)\n\n        # step 2\n        r = get_order(ver, x, L; )\n        if r%2 == 0 && powermod(x, r÷2, L) != L-1\n            # step 3\n            f1, f2 = gcd(powermod(x, r÷2, L)-1, L), gcd(powermod(x, r÷2, L)+1, L)\n            if f1!=1\n                return f1\n            elseif f2!=1\n                return f2\n            else\n                error(\"Algorithm Fail!\")\n            end\n        end\n    end\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"shor (generic function with 2 methods)","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Except some shortcuts, in each try, the main program can be summarized in several steps","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"randomly pick a number that prime to the input numebr L, i.e. gcd(x, L) = 1.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The complexity of this algorithm is polynomial.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"get the order x, i.e. finding a number r that satisfies mod(x^r, L) = 1.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"If r is even and x^(r÷2) is non-trivial, go on, otherwise start another try. Here, trivial means equal to L-1 (mod L).","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"According to Theorem 5.2 in Neilsen book,","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"one of gcd(x^(r÷2)-1, L) and gcd(x^(r÷2)+1, L) must be a non-trivial (!=1) factor of L. Notice powermod(x, r÷2, L) must be -1 rather than 1, otherwise the order should be r/2 according to definition.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The only difference between classical and quantum version is the order finding algorithm.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Order-Finding","page":"Shor's Algorithm","title":"Order Finding","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"We provided a classical order finding algorithm in NumberTheory, here we focus on the quantum version. The algorithm is consisted","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"run the circuit to get a bitstring,\ninterpret this bitstring in output register as a rational number s/r.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"To achieve this, we first interpret it as a floating point number, then the continued fraction algorithm can find the best match for us.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"When using the quantum version, we have the flexibility to set key word arguments nshot, nbit (size of input data register) and ncbit (size of control register, or output register). nbit can be simply chosen as the minimum register size to store input, while ncbit can be estimated with the following function","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"estimate the required size of the output register.\"\"\"\nestimate_ncbit(nbit::Int, ϵ::Real) = 2*nbit + 1 + ceil(Int,log2(2+1/2ϵ))\n\nget_order(::Val{:classical}, x::Int, L::Int; kwargs...) = NumberTheory.find_order(x, L)\nfunction get_order(::Val{:quantum}, x::Int, L::Int; nshots::Int=10,\n            nbit::Int=bit_length(L-1), ncbit::Int=estimate_ncbit(nbit, 0.25))\n    c = order_finding_circuit(x, L; nbit=nbit, ncbit=ncbit)\n    reg = join(product_state(nbit, 1), zero_state(ncbit))\n\n    res = measure(copy(reg) |> c; nshots=nshots)\n    for r in res\n        # split bit string b into lower bits `k` and higher bits `r`.\n        mask = bmask(1:ncbit)\n        k,i = r&mask, r>>ncbit\n        # get s/r\n        ϕ = bfloat(k)  #\n        ϕ == 0 && continue\n\n        # order_from_float: given a floating point number,\n        # return the closest rational number with bounded number of continued fraction steps.\n        order = NumberTheory.order_from_float(ϕ, x, L)\n        if order === nothing\n            continue\n        else\n            return order\n        end\n    end\n    return nothing\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"get_order (generic function with 2 methods)","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#The-circuit-used-for-finding-order","page":"Shor's Algorithm","title":"The circuit used for finding order","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"\"\"\"\n    order_finding_circuit(x::Int, L::Int; nbit::Int=bit_length(L-1), ncbit::Int=estimate_ncbit(nbit, 0.25)) -> AbstractBlock\n\nReturns the circuit for finding the order of `x` to `L`,\nfeeding input `|1>⊗|0>` will get the resulting quantum register with the desired \"phase\" information.\n\"\"\"\nfunction order_finding_circuit(x::Int, L::Int; nbit::Int, ncbit::Int)\n    N = nbit+ncbit\n    chain(N, repeat(N, H, 1:ncbit), KMod(N, ncbit, x, L),\n        subroutine(N, qft_circuit(ncbit)', 1:ncbit))\nend","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Main.var\"##235\".order_finding_circuit","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"The circuit for order finding is consisted of three parts","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Hadamard gates,\nKMod that computes a classical function mod(a^k*x, L).","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"k is the integer stored in first K (or ncbit) qubits and the rest N-K qubits stores a. Notice it is not a basic gate, it should have been compiled to multiple gates, which is not implemented in Yao for the moment. To learn more about implementing arithmatics on a quantum circuit, please read this paper.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Inverse quantum fourier transformation.","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html#Run","page":"Shor's Algorithm","title":"Run","text":"","category":"section"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"Factorizing 15, you should see 3 or 5, please report a bug if it is not...","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"shor(15, Val(:quantum))","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"3","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"","category":"page"},{"location":"generated/examples/4.shor-algorithm/index.html","page":"Shor's Algorithm","title":"Shor's Algorithm","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"EditURL = \"../../../examples/8.riemannian-gradient-flow/main.jl\"","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"(Image: )","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html#Riemannian-gradient-flow-optimizer","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"","category":"section"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"In this tutorial we will present the Riemannian gradient descent algorithm described in Miao and Barthel (2021) and Wiersema and Killoran (2022) As opposed to most standard optimization algorithms that optimize parameters of variational quantum circuits, this algorithm optimizes a function directly over the special unitary group by following the gradient flow over the manifold. Let's start by importing the necessary packages.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"using Yao, Yao.EasyBuild, Plots, Random\nusing KrylovKit: eigsolve","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Variational quantum eigensolver (VQE) is one of the most celebrated near-term quantum algorithms. In the usual setting, VQE tries to reach the ground state by minimizing the energy cost function","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"mathcalL(theta) = textTrHU(theta)rho_0U^dagger(theta)","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"with respect to parameters theta which parameterize a quantum circuit U(theta), where rho_0 = psi_0ranglelanglepsi_0 is some initial state and H the Hamiltonian whose ground state we want to approximate. We can solve the optimization problem textmin_thetamathcalL(theta) by following the direction of the steepest descent in parameter space which is given by the gradient of the cost function, i.e. by considering the following gradient flow","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"dottheta = -textgradmathcalL(theta)","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Discretizing the equation above, we recover the well-known gradient descent algorithm","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"theta_k + 1 = theta_k - alphatextgradmathcalL(theta)","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"where alpha is the learning rate. Let's demonstrate it on the example of finding the ground state of the transverse field Ising model.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"n = 8\nh = transverse_ising(n, 1.0)\nw, v = eigsolve(mat(h), 1, :SR, ishermitian=true)\n\nRandom.seed!(0)\ncircuit = dispatch!(variational_circuit(n, 100), :random);\nhistory = Float64[]\nfor i in 1:100\n    _, grad = expect'(h, zero_state(n) => circuit)\n    dispatch!(-, circuit, 0.01 * grad)\n    push!(history, real.(expect(h, zero_state(n)=>circuit)))\nend\n\nPlots.plot(history, legend=false)\nPlots.plot!(1:100, [w[1] for i=1:100])\nxlabel!(\"steps\")\nylabel!(\"energy\")","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip320\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip320)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip321\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip320)\" d=\"M242.135 1423.18 L2352.76 1423.18 L2352.76 47.2441 L242.135 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip322\">\n    <rect x=\"242\" y=\"47\" width=\"2112\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"281.757,1423.18 281.757,47.2441 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"784.573,1423.18 784.573,47.2441 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1287.39,1423.18 1287.39,47.2441 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1790.21,1423.18 1790.21,47.2441 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2293.02,1423.18 2293.02,47.2441 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.135,1350.71 2352.76,1350.71 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.135,1084.25 2352.76,1084.25 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.135,817.787 2352.76,817.787 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.135,551.326 2352.76,551.326 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.135,284.865 2352.76,284.865 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"281.757,1423.18 281.757,1404.28 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"784.573,1423.18 784.573,1404.28 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1287.39,1423.18 1287.39,1404.28 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1790.21,1423.18 1790.21,1404.28 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2293.02,1423.18 2293.02,1404.28 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M281.757 1454.1 Q278.145 1454.1 276.317 1457.66 Q274.511 1461.2 274.511 1468.33 Q274.511 1475.44 276.317 1479.01 Q278.145 1482.55 281.757 1482.55 Q285.391 1482.55 287.196 1479.01 Q289.025 1475.44 289.025 1468.33 Q289.025 1461.2 287.196 1457.66 Q285.391 1454.1 281.757 1454.1 M281.757 1450.39 Q287.567 1450.39 290.622 1455 Q293.701 1459.58 293.701 1468.33 Q293.701 1477.06 290.622 1481.67 Q287.567 1486.25 281.757 1486.25 Q275.946 1486.25 272.868 1481.67 Q269.812 1477.06 269.812 1468.33 Q269.812 1459.58 272.868 1455 Q275.946 1450.39 281.757 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M763.844 1481.64 L780.163 1481.64 L780.163 1485.58 L758.219 1485.58 L758.219 1481.64 Q760.881 1478.89 765.464 1474.26 Q770.071 1469.61 771.251 1468.27 Q773.496 1465.74 774.376 1464.01 Q775.279 1462.25 775.279 1460.56 Q775.279 1457.8 773.334 1456.07 Q771.413 1454.33 768.311 1454.33 Q766.112 1454.33 763.659 1455.09 Q761.228 1455.86 758.45 1457.41 L758.45 1452.69 Q761.274 1451.55 763.728 1450.97 Q766.182 1450.39 768.219 1450.39 Q773.589 1450.39 776.783 1453.08 Q779.978 1455.77 779.978 1460.26 Q779.978 1462.39 779.168 1464.31 Q778.381 1466.2 776.274 1468.8 Q775.696 1469.47 772.594 1472.69 Q769.492 1475.88 763.844 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M790.024 1451.02 L808.381 1451.02 L808.381 1454.96 L794.307 1454.96 L794.307 1463.43 Q795.325 1463.08 796.344 1462.92 Q797.362 1462.73 798.381 1462.73 Q804.168 1462.73 807.547 1465.9 Q810.927 1469.08 810.927 1474.49 Q810.927 1480.07 807.455 1483.17 Q803.982 1486.25 797.663 1486.25 Q795.487 1486.25 793.219 1485.88 Q790.973 1485.51 788.566 1484.77 L788.566 1480.07 Q790.649 1481.2 792.871 1481.76 Q795.094 1482.32 797.57 1482.32 Q801.575 1482.32 803.913 1480.21 Q806.251 1478.1 806.251 1474.49 Q806.251 1470.88 803.913 1468.77 Q801.575 1466.67 797.57 1466.67 Q795.695 1466.67 793.82 1467.08 Q791.969 1467.5 790.024 1468.38 L790.024 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1262.09 1451.02 L1280.44 1451.02 L1280.44 1454.96 L1266.37 1454.96 L1266.37 1463.43 Q1267.39 1463.08 1268.41 1462.92 Q1269.43 1462.73 1270.44 1462.73 Q1276.23 1462.73 1279.61 1465.9 Q1282.99 1469.08 1282.99 1474.49 Q1282.99 1480.07 1279.52 1483.17 Q1276.05 1486.25 1269.73 1486.25 Q1267.55 1486.25 1265.28 1485.88 Q1263.04 1485.51 1260.63 1484.77 L1260.63 1480.07 Q1262.71 1481.2 1264.94 1481.76 Q1267.16 1482.32 1269.63 1482.32 Q1273.64 1482.32 1275.98 1480.21 Q1278.31 1478.1 1278.31 1474.49 Q1278.31 1470.88 1275.98 1468.77 Q1273.64 1466.67 1269.63 1466.67 Q1267.76 1466.67 1265.88 1467.08 Q1264.03 1467.5 1262.09 1468.38 L1262.09 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1302.2 1454.1 Q1298.59 1454.1 1296.76 1457.66 Q1294.96 1461.2 1294.96 1468.33 Q1294.96 1475.44 1296.76 1479.01 Q1298.59 1482.55 1302.2 1482.55 Q1305.84 1482.55 1307.64 1479.01 Q1309.47 1475.44 1309.47 1468.33 Q1309.47 1461.2 1307.64 1457.66 Q1305.84 1454.1 1302.2 1454.1 M1302.2 1450.39 Q1308.01 1450.39 1311.07 1455 Q1314.15 1459.58 1314.15 1468.33 Q1314.15 1477.06 1311.07 1481.67 Q1308.01 1486.25 1302.2 1486.25 Q1296.39 1486.25 1293.31 1481.67 Q1290.26 1477.06 1290.26 1468.33 Q1290.26 1459.58 1293.31 1455 Q1296.39 1450.39 1302.2 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1764.06 1451.02 L1786.28 1451.02 L1786.28 1453.01 L1773.74 1485.58 L1768.85 1485.58 L1780.66 1454.96 L1764.06 1454.96 L1764.06 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1795.45 1451.02 L1813.8 1451.02 L1813.8 1454.96 L1799.73 1454.96 L1799.73 1463.43 Q1800.75 1463.08 1801.77 1462.92 Q1802.79 1462.73 1803.8 1462.73 Q1809.59 1462.73 1812.97 1465.9 Q1816.35 1469.08 1816.35 1474.49 Q1816.35 1480.07 1812.88 1483.17 Q1809.41 1486.25 1803.09 1486.25 Q1800.91 1486.25 1798.64 1485.88 Q1796.4 1485.51 1793.99 1484.77 L1793.99 1480.07 Q1796.07 1481.2 1798.3 1481.76 Q1800.52 1482.32 1802.99 1482.32 Q1807 1482.32 1809.34 1480.21 Q1811.67 1478.1 1811.67 1474.49 Q1811.67 1470.88 1809.34 1468.77 Q1807 1466.67 1802.99 1466.67 Q1801.12 1466.67 1799.24 1467.08 Q1797.39 1467.5 1795.45 1468.38 L1795.45 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2252.63 1481.64 L2260.27 1481.64 L2260.27 1455.28 L2251.96 1456.95 L2251.96 1452.69 L2260.22 1451.02 L2264.9 1451.02 L2264.9 1481.64 L2272.54 1481.64 L2272.54 1485.58 L2252.63 1485.58 L2252.63 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2291.98 1454.1 Q2288.37 1454.1 2286.54 1457.66 Q2284.73 1461.2 2284.73 1468.33 Q2284.73 1475.44 2286.54 1479.01 Q2288.37 1482.55 2291.98 1482.55 Q2295.61 1482.55 2297.42 1479.01 Q2299.25 1475.44 2299.25 1468.33 Q2299.25 1461.2 2297.42 1457.66 Q2295.61 1454.1 2291.98 1454.1 M2291.98 1450.39 Q2297.79 1450.39 2300.85 1455 Q2303.92 1459.58 2303.92 1468.33 Q2303.92 1477.06 2300.85 1481.67 Q2297.79 1486.25 2291.98 1486.25 Q2286.17 1486.25 2283.09 1481.67 Q2280.04 1477.06 2280.04 1468.33 Q2280.04 1459.58 2283.09 1455 Q2286.17 1450.39 2291.98 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2322.14 1454.1 Q2318.53 1454.1 2316.7 1457.66 Q2314.9 1461.2 2314.9 1468.33 Q2314.9 1475.44 2316.7 1479.01 Q2318.53 1482.55 2322.14 1482.55 Q2325.78 1482.55 2327.58 1479.01 Q2329.41 1475.44 2329.41 1468.33 Q2329.41 1461.2 2327.58 1457.66 Q2325.78 1454.1 2322.14 1454.1 M2322.14 1450.39 Q2327.95 1450.39 2331.01 1455 Q2334.09 1459.58 2334.09 1468.33 Q2334.09 1477.06 2331.01 1481.67 Q2327.95 1486.25 2322.14 1486.25 Q2316.33 1486.25 2313.25 1481.67 Q2310.2 1477.06 2310.2 1468.33 Q2310.2 1459.58 2313.25 1455 Q2316.33 1450.39 2322.14 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1238.66 1533.45 L1238.66 1538.98 Q1236.18 1537.71 1233.5 1537.07 Q1230.83 1536.44 1227.96 1536.44 Q1223.6 1536.44 1221.41 1537.77 Q1219.24 1539.11 1219.24 1541.79 Q1219.24 1543.82 1220.8 1545 Q1222.36 1546.15 1227.07 1547.2 L1229.08 1547.64 Q1235.32 1548.98 1237.93 1551.43 Q1240.57 1553.85 1240.57 1558.21 Q1240.57 1563.17 1236.62 1566.07 Q1232.71 1568.97 1225.83 1568.97 Q1222.97 1568.97 1219.85 1568.39 Q1216.76 1567.85 1213.32 1566.74 L1213.32 1560.69 Q1216.57 1562.38 1219.72 1563.24 Q1222.87 1564.07 1225.96 1564.07 Q1230.1 1564.07 1232.32 1562.66 Q1234.55 1561.23 1234.55 1558.65 Q1234.55 1556.27 1232.93 1554.99 Q1231.34 1553.72 1225.89 1552.54 L1223.86 1552.07 Q1218.42 1550.92 1216 1548.56 Q1213.58 1546.18 1213.58 1542.04 Q1213.58 1537.01 1217.14 1534.27 Q1220.71 1531.54 1227.26 1531.54 Q1230.51 1531.54 1233.37 1532.01 Q1236.24 1532.49 1238.66 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1255.69 1522.27 L1255.69 1532.4 L1267.75 1532.4 L1267.75 1536.95 L1255.69 1536.95 L1255.69 1556.3 Q1255.69 1560.66 1256.86 1561.9 Q1258.07 1563.14 1261.73 1563.14 L1267.75 1563.14 L1267.75 1568.04 L1261.73 1568.04 Q1254.95 1568.04 1252.38 1565.53 Q1249.8 1562.98 1249.8 1556.3 L1249.8 1536.95 L1245.5 1536.95 L1245.5 1532.4 L1249.8 1532.4 L1249.8 1522.27 L1255.69 1522.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1305.94 1548.76 L1305.94 1551.62 L1279.02 1551.62 Q1279.4 1557.67 1282.65 1560.85 Q1285.92 1564 1291.75 1564 Q1295.12 1564 1298.27 1563.17 Q1301.46 1562.35 1304.57 1560.69 L1304.57 1566.23 Q1301.42 1567.57 1298.11 1568.27 Q1294.8 1568.97 1291.4 1568.97 Q1282.87 1568.97 1277.87 1564 Q1272.91 1559.04 1272.91 1550.57 Q1272.91 1541.82 1277.62 1536.69 Q1282.36 1531.54 1290.38 1531.54 Q1297.57 1531.54 1301.74 1536.18 Q1305.94 1540.8 1305.94 1548.76 M1300.09 1547.04 Q1300.02 1542.23 1297.38 1539.37 Q1294.77 1536.5 1290.44 1536.5 Q1285.54 1536.5 1282.58 1539.27 Q1279.65 1542.04 1279.21 1547.07 L1300.09 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1321.22 1562.7 L1321.22 1581.6 L1315.33 1581.6 L1315.33 1532.4 L1321.22 1532.4 L1321.22 1537.81 Q1323.07 1534.62 1325.87 1533.1 Q1328.7 1531.54 1332.62 1531.54 Q1339.11 1531.54 1343.15 1536.69 Q1347.23 1541.85 1347.23 1550.25 Q1347.23 1558.65 1343.15 1563.81 Q1339.11 1568.97 1332.62 1568.97 Q1328.7 1568.97 1325.87 1567.44 Q1323.07 1565.88 1321.22 1562.7 M1341.15 1550.25 Q1341.15 1543.79 1338.47 1540.13 Q1335.83 1536.44 1331.18 1536.44 Q1326.54 1536.44 1323.86 1540.13 Q1321.22 1543.79 1321.22 1550.25 Q1321.22 1556.71 1323.86 1560.4 Q1326.54 1564.07 1331.18 1564.07 Q1335.83 1564.07 1338.47 1560.4 Q1341.15 1556.71 1341.15 1550.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1379.66 1533.45 L1379.66 1538.98 Q1377.18 1537.71 1374.5 1537.07 Q1371.83 1536.44 1368.96 1536.44 Q1364.6 1536.44 1362.41 1537.77 Q1360.24 1539.11 1360.24 1541.79 Q1360.24 1543.82 1361.8 1545 Q1363.36 1546.15 1368.07 1547.2 L1370.08 1547.64 Q1376.32 1548.98 1378.93 1551.43 Q1381.57 1553.85 1381.57 1558.21 Q1381.57 1563.17 1377.62 1566.07 Q1373.71 1568.97 1366.83 1568.97 Q1363.97 1568.97 1360.85 1568.39 Q1357.76 1567.85 1354.32 1566.74 L1354.32 1560.69 Q1357.57 1562.38 1360.72 1563.24 Q1363.87 1564.07 1366.96 1564.07 Q1371.1 1564.07 1373.32 1562.66 Q1375.55 1561.23 1375.55 1558.65 Q1375.55 1556.27 1373.93 1554.99 Q1372.34 1553.72 1366.9 1552.54 L1364.86 1552.07 Q1359.42 1550.92 1357 1548.56 Q1354.58 1546.18 1354.58 1542.04 Q1354.58 1537.01 1358.14 1534.27 Q1361.71 1531.54 1368.26 1531.54 Q1371.51 1531.54 1374.37 1532.01 Q1377.24 1532.49 1379.66 1533.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,1423.18 242.135,47.2441 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,1350.71 261.032,1350.71 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,1084.25 261.032,1084.25 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,817.787 261.032,817.787 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,551.326 261.032,551.326 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.135,284.865 261.032,284.865 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M114.26 1351.16 L143.936 1351.16 L143.936 1355.1 L114.26 1355.1 L114.26 1351.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M154.839 1364.05 L162.477 1364.05 L162.477 1337.69 L154.167 1339.36 L154.167 1335.1 L162.431 1333.43 L167.107 1333.43 L167.107 1364.05 L174.746 1364.05 L174.746 1367.99 L154.839 1367.99 L154.839 1364.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M194.19 1336.51 Q190.579 1336.51 188.75 1340.07 Q186.945 1343.61 186.945 1350.74 Q186.945 1357.85 188.75 1361.42 Q190.579 1364.96 194.19 1364.96 Q197.825 1364.96 199.63 1361.42 Q201.459 1357.85 201.459 1350.74 Q201.459 1343.61 199.63 1340.07 Q197.825 1336.51 194.19 1336.51 M194.19 1332.8 Q200 1332.8 203.056 1337.41 Q206.135 1341.99 206.135 1350.74 Q206.135 1359.47 203.056 1364.08 Q200 1368.66 194.19 1368.66 Q188.38 1368.66 185.301 1364.08 Q182.246 1359.47 182.246 1350.74 Q182.246 1341.99 185.301 1337.41 Q188.38 1332.8 194.19 1332.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M144.515 1084.7 L174.19 1084.7 L174.19 1088.63 L144.515 1088.63 L144.515 1084.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M194.283 1085.12 Q190.95 1085.12 189.028 1086.9 Q187.13 1088.68 187.13 1091.81 Q187.13 1094.93 189.028 1096.71 Q190.95 1098.5 194.283 1098.5 Q197.616 1098.5 199.537 1096.71 Q201.459 1094.91 201.459 1091.81 Q201.459 1088.68 199.537 1086.9 Q197.639 1085.12 194.283 1085.12 M189.607 1083.13 Q186.598 1082.38 184.908 1080.32 Q183.241 1078.26 183.241 1075.3 Q183.241 1071.16 186.181 1068.75 Q189.144 1066.34 194.283 1066.34 Q199.445 1066.34 202.385 1068.75 Q205.324 1071.16 205.324 1075.3 Q205.324 1078.26 203.635 1080.32 Q201.968 1082.38 198.982 1083.13 Q202.362 1083.91 204.237 1086.2 Q206.135 1088.5 206.135 1091.81 Q206.135 1096.83 203.056 1099.51 Q200 1102.2 194.283 1102.2 Q188.565 1102.2 185.487 1099.51 Q182.431 1096.83 182.431 1091.81 Q182.431 1088.5 184.329 1086.2 Q186.227 1083.91 189.607 1083.13 M187.894 1075.74 Q187.894 1078.43 189.561 1079.93 Q191.25 1081.44 194.283 1081.44 Q197.292 1081.44 198.982 1079.93 Q200.695 1078.43 200.695 1075.74 Q200.695 1073.06 198.982 1071.55 Q197.292 1070.05 194.283 1070.05 Q191.25 1070.05 189.561 1071.55 Q187.894 1073.06 187.894 1075.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M144.26 818.239 L173.936 818.239 L173.936 822.174 L144.26 822.174 L144.26 818.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M194.607 815.924 Q191.459 815.924 189.607 818.077 Q187.778 820.229 187.778 823.979 Q187.778 827.706 189.607 829.882 Q191.459 832.035 194.607 832.035 Q197.755 832.035 199.584 829.882 Q201.436 827.706 201.436 823.979 Q201.436 820.229 199.584 818.077 Q197.755 815.924 194.607 815.924 M203.889 801.271 L203.889 805.53 Q202.13 804.697 200.325 804.257 Q198.542 803.817 196.783 803.817 Q192.153 803.817 189.7 806.942 Q187.269 810.067 186.922 816.387 Q188.288 814.373 190.348 813.308 Q192.408 812.22 194.885 812.22 Q200.093 812.22 203.102 815.391 Q206.135 818.54 206.135 823.979 Q206.135 829.303 202.987 832.521 Q199.838 835.738 194.607 835.738 Q188.612 835.738 185.44 831.155 Q182.269 826.549 182.269 817.822 Q182.269 809.628 186.158 804.766 Q190.047 799.882 196.598 799.882 Q198.357 799.882 200.139 800.229 Q201.945 800.577 203.889 801.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M143.936 551.778 L173.612 551.778 L173.612 555.713 L143.936 555.713 L143.936 551.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M196.551 538.12 L184.746 556.569 L196.551 556.569 L196.551 538.12 M195.325 534.046 L201.204 534.046 L201.204 556.569 L206.135 556.569 L206.135 560.458 L201.204 560.458 L201.204 568.606 L196.551 568.606 L196.551 560.458 L180.95 560.458 L180.95 555.944 L195.325 534.046 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M146.019 285.317 L175.695 285.317 L175.695 289.252 L146.019 289.252 L146.019 285.317 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M189.815 298.21 L206.135 298.21 L206.135 302.145 L184.19 302.145 L184.19 298.21 Q186.852 295.455 191.436 290.826 Q196.042 286.173 197.223 284.83 Q199.468 282.307 200.348 280.571 Q201.25 278.812 201.25 277.122 Q201.25 274.368 199.306 272.631 Q197.385 270.895 194.283 270.895 Q192.084 270.895 189.63 271.659 Q187.2 272.423 184.422 273.974 L184.422 269.252 Q187.246 268.118 189.7 267.539 Q192.153 266.96 194.19 266.96 Q199.561 266.96 202.755 269.645 Q205.949 272.331 205.949 276.821 Q205.949 278.951 205.139 280.872 Q204.352 282.77 202.246 285.363 Q201.667 286.034 198.565 289.252 Q195.463 292.446 189.815 298.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M44.7161 812.969 L47.5806 812.969 L47.5806 839.896 Q53.6281 839.514 56.8109 836.268 Q59.9619 832.989 59.9619 827.165 Q59.9619 823.791 59.1344 820.64 Q58.3069 817.457 56.6518 814.338 L62.1899 814.338 Q63.5267 817.489 64.227 820.799 Q64.9272 824.109 64.9272 827.515 Q64.9272 836.045 59.9619 841.042 Q54.9967 846.007 46.5303 846.007 Q37.7774 846.007 32.6531 841.296 Q27.4968 836.554 27.4968 828.533 Q27.4968 821.34 32.1438 817.17 Q36.7589 812.969 44.7161 812.969 M42.9973 818.826 Q38.1912 818.889 35.3266 821.531 Q32.4621 824.141 32.4621 828.47 Q32.4621 833.371 35.2312 836.331 Q38.0002 839.259 43.0292 839.705 L42.9973 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M42.4881 773.724 L64.0042 773.724 L64.0042 779.581 L42.679 779.581 Q37.6183 779.581 35.1038 781.554 Q32.5894 783.528 32.5894 787.474 Q32.5894 792.217 35.6131 794.954 Q38.6368 797.691 43.8567 797.691 L64.0042 797.691 L64.0042 803.58 L28.3562 803.58 L28.3562 797.691 L33.8944 797.691 Q30.6797 795.591 29.0883 792.758 Q27.4968 789.893 27.4968 786.169 Q27.4968 780.027 31.3163 776.876 Q35.1038 773.724 42.4881 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M44.7161 731.552 L47.5806 731.552 L47.5806 758.479 Q53.6281 758.097 56.8109 754.85 Q59.9619 751.572 59.9619 745.747 Q59.9619 742.373 59.1344 739.222 Q58.3069 736.04 56.6518 732.92 L62.1899 732.92 Q63.5267 736.071 64.227 739.382 Q64.9272 742.692 64.9272 746.097 Q64.9272 754.627 59.9619 759.624 Q54.9967 764.59 46.5303 764.59 Q37.7774 764.59 32.6531 759.879 Q27.4968 755.137 27.4968 747.116 Q27.4968 739.923 32.1438 735.753 Q36.7589 731.552 44.7161 731.552 M42.9973 737.408 Q38.1912 737.472 35.3266 740.114 Q32.4621 742.724 32.4621 747.052 Q32.4621 751.954 35.2312 754.914 Q38.0002 757.842 43.0292 758.288 L42.9973 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M33.8307 701.283 Q33.2578 702.269 33.0032 703.447 Q32.7167 704.593 32.7167 705.993 Q32.7167 710.959 35.9632 713.632 Q39.1779 716.274 45.2253 716.274 L64.0042 716.274 L64.0042 722.162 L28.3562 722.162 L28.3562 716.274 L33.8944 716.274 Q30.6479 714.428 29.0883 711.468 Q27.4968 708.508 27.4968 704.275 Q27.4968 703.67 27.5923 702.938 Q27.656 702.206 27.8151 701.315 L33.8307 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M45.7664 672.828 Q39.4007 672.828 35.8996 675.47 Q32.3984 678.08 32.3984 682.822 Q32.3984 687.533 35.8996 690.175 Q39.4007 692.785 45.7664 692.785 Q52.1003 692.785 55.6014 690.175 Q59.1026 687.533 59.1026 682.822 Q59.1026 678.08 55.6014 675.47 Q52.1003 672.828 45.7664 672.828 M59.58 666.972 Q68.683 666.972 73.1071 671.014 Q77.5631 675.056 77.5631 683.395 Q77.5631 686.482 77.0857 689.22 Q76.6401 691.957 75.6852 694.535 L69.9879 694.535 Q71.3884 691.957 72.0568 689.443 Q72.7252 686.928 72.7252 684.318 Q72.7252 678.557 69.7015 675.693 Q66.7096 672.828 60.6303 672.828 L57.7339 672.828 Q60.885 674.642 62.4446 677.475 Q64.0042 680.308 64.0042 684.254 Q64.0042 690.811 59.0071 694.822 Q54.01 698.832 45.7664 698.832 Q37.491 698.832 32.4939 694.822 Q27.4968 690.811 27.4968 684.254 Q27.4968 680.308 29.0564 677.475 Q30.616 674.642 33.7671 672.828 L28.3562 672.828 L28.3562 666.972 L59.58 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M67.3143 640.076 Q73.68 642.559 75.6216 644.914 Q77.5631 647.27 77.5631 651.216 L77.5631 655.895 L72.6615 655.895 L72.6615 652.458 Q72.6615 650.039 71.5157 648.702 Q70.3699 647.365 66.1048 645.742 L63.4312 644.692 L28.3562 659.11 L28.3562 652.903 L56.238 641.763 L28.3562 630.623 L28.3562 624.417 L67.3143 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip322)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"301.869,86.1857 321.982,173.337 342.095,256.341 362.207,334.198 382.32,406.575 402.432,473.665 422.545,535.988 442.658,594.185 462.77,648.872 482.883,700.554 502.996,749.584 523.108,796.167 543.221,840.38 563.334,882.21 583.446,921.591 603.559,958.453 623.672,992.748 643.784,1024.47 663.897,1053.67 684.01,1080.45 704.122,1104.93 724.235,1127.27 744.347,1147.63 764.46,1166.2 784.573,1183.12 804.685,1198.55 824.798,1212.62 844.911,1225.46 865.023,1237.18 885.136,1247.88 905.249,1257.65 925.361,1266.57 945.474,1274.72 965.587,1282.16 985.699,1288.96 1005.81,1295.16 1025.92,1300.83 1046.04,1306 1066.15,1310.73 1086.26,1315.04 1106.38,1318.99 1126.49,1322.59 1146.6,1325.88 1166.71,1328.89 1186.83,1331.64 1206.94,1334.16 1227.05,1336.47 1247.16,1338.58 1267.28,1340.52 1287.39,1342.29 1307.5,1343.92 1327.61,1345.42 1347.73,1346.79 1367.84,1348.06 1387.95,1349.22 1408.06,1350.29 1428.18,1351.28 1448.29,1352.19 1468.4,1353.03 1488.52,1353.81 1508.63,1354.53 1528.74,1355.19 1548.85,1355.81 1568.97,1356.38 1589.08,1356.91 1609.19,1357.4 1629.3,1357.86 1649.42,1358.29 1669.53,1358.68 1689.64,1359.05 1709.75,1359.4 1729.87,1359.72 1749.98,1360.02 1770.09,1360.3 1790.21,1360.57 1810.32,1360.82 1830.43,1361.05 1850.54,1361.27 1870.66,1361.47 1890.77,1361.67 1910.88,1361.85 1930.99,1362.03 1951.11,1362.19 1971.22,1362.34 1991.33,1362.49 2011.44,1362.63 2031.56,1362.76 2051.67,1362.89 2071.78,1363.01 2091.89,1363.12 2112.01,1363.23 2132.12,1363.34 2152.23,1363.44 2172.35,1363.53 2192.46,1363.62 2212.57,1363.71 2232.68,1363.8 2252.8,1363.88 2272.91,1363.96 2293.02,1364.03 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"301.869,1384.24 321.982,1384.24 342.095,1384.24 362.207,1384.24 382.32,1384.24 402.432,1384.24 422.545,1384.24 442.658,1384.24 462.77,1384.24 482.883,1384.24 502.996,1384.24 523.108,1384.24 543.221,1384.24 563.334,1384.24 583.446,1384.24 603.559,1384.24 623.672,1384.24 643.784,1384.24 663.897,1384.24 684.01,1384.24 704.122,1384.24 724.235,1384.24 744.347,1384.24 764.46,1384.24 784.573,1384.24 804.685,1384.24 824.798,1384.24 844.911,1384.24 865.023,1384.24 885.136,1384.24 905.249,1384.24 925.361,1384.24 945.474,1384.24 965.587,1384.24 985.699,1384.24 1005.81,1384.24 1025.92,1384.24 1046.04,1384.24 1066.15,1384.24 1086.26,1384.24 1106.38,1384.24 1126.49,1384.24 1146.6,1384.24 1166.71,1384.24 1186.83,1384.24 1206.94,1384.24 1227.05,1384.24 1247.16,1384.24 1267.28,1384.24 1287.39,1384.24 1307.5,1384.24 1327.61,1384.24 1347.73,1384.24 1367.84,1384.24 1387.95,1384.24 1408.06,1384.24 1428.18,1384.24 1448.29,1384.24 1468.4,1384.24 1488.52,1384.24 1508.63,1384.24 1528.74,1384.24 1548.85,1384.24 1568.97,1384.24 1589.08,1384.24 1609.19,1384.24 1629.3,1384.24 1649.42,1384.24 1669.53,1384.24 1689.64,1384.24 1709.75,1384.24 1729.87,1384.24 1749.98,1384.24 1770.09,1384.24 1790.21,1384.24 1810.32,1384.24 1830.43,1384.24 1850.54,1384.24 1870.66,1384.24 1890.77,1384.24 1910.88,1384.24 1930.99,1384.24 1951.11,1384.24 1971.22,1384.24 1991.33,1384.24 2011.44,1384.24 2031.56,1384.24 2051.67,1384.24 2071.78,1384.24 2091.89,1384.24 2112.01,1384.24 2132.12,1384.24 2152.23,1384.24 2172.35,1384.24 2192.46,1384.24 2212.57,1384.24 2232.68,1384.24 2252.8,1384.24 2272.91,1384.24 2293.02,1384.24 \"/>\n</svg>\n","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Let's now consider the energy cost function directly over the special unitary group mathcalL textSU(2^n) rightarrow mathbbR","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"mathcalL(U) = textTrHUrho_0U^dagger","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"To minimize the cost function we can follow the Riemannian gradient flow defined through the following differential equation","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"dotU = -textgradmathcalL(U) = Urho_0U^dagger HU","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Discretizing the flow we get the following recursive update rule","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"U_k + 1 = expalphaU_krho_0U^dagger_k HU_k = expalpharho_k HU_k","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"where alpha is the appropriate learning rate and U_0 = I.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"We can expand the commutator in the exponent in the basis of Pauli strings P^j","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"rho_k H = frac12^nsum_j = 1^4^n - 1omega^j_kP^j","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"where","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"omega^j_k = textTrrho_k HP^j = textTrH P^jrho_k = langleH P^jrangle_rho_k","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"It turns out that omega^j_k can easily be evaluated with the help of a parameter shift rule","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"omega^j_k = langleH P^jrangle_rho_k = -ilangle V^dagger_j(pi4)HV_j(pi4) - V^dagger_j(-pi4)HV_j(-pi4)rangle_rho_k","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"where V_j(t) = exp-itP^j.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Next, we write a function for generation of 2-local Pauli operators. We will restrict the Riemannian gradient to this subspace of the Lie algebra since otherwise the number of parameters to calculate would be 4^8 - 1 = 65535 which is too much for a reasonable runtime of the algorithm.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"function generate_2local_pauli_strings(n)\n    pauli_strings = []\n    for i = 1:n\n        push!(pauli_strings, kron(n, i => X))\n        push!(pauli_strings, kron(n, i => Y))\n        push!(pauli_strings, kron(n, i => Z))\n    end\n    for i = 1:n-1\n        for j = i+1:n\n            for P1 in [X, Y, Z]\n                for P2 in [X, Y, Z]\n                    push!(pauli_strings, kron(n, i => P1, j => P2))\n                end\n            end\n        end\n    end\n    pauli_strings\nend;","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Next we write functions for calculating the expansion coefficients and a single optimization step. We will absorb the factor of 12^n into the learning rate.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"function calculate_omegas(n, reg, h, pauli_strings)\n    iω = []\n    for P in pauli_strings\n        push!(iω, real(expect(h, reg => time_evolve(P, π/4)) - expect(h, reg => time_evolve(P, -π/4))))\n    end\n    iω\nend;\n\nfunction step_and_cost!(n, circuit, h, α, pauli_strings)\n    iω = calculate_omegas(n, zero_state(n) |> circuit, h, pauli_strings)\n\n    for (iωʲ, P) in zip(iω, pauli_strings)\n        if abs(iωʲ) > 1e-6 # we will only keep the ones that actually contribute\n            append!(circuit, chain(n, time_evolve(P, -α * iωʲ)))\n        end\n    end\n\n    real(expect(h, zero_state(n) => circuit))\nend;","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"Finally, let's try it out. We initialize the state 0rangle and apply several optimization steps.","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"circuit = chain(n)\npauli_strings = generate_2local_pauli_strings(n)\nhistory = Float64[]\n\nfor i=1:100\n    cost = step_and_cost!(n, circuit, h, 0.01, pauli_strings)\n    push!(history, cost)\nend\n\nPlots.plot(history, legend=false)\nPlots.plot!(1:100, [w[1] for i=1:100])\nxlabel!(\"steps\")\nylabel!(\"energy\")","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"<img src=\"/assets/images/Riemannian.png\" alt=\"Riemannian gradient flow\" width=\"600\"/>","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"When we compare the final states achieved with the Riemannian gradient flow optimizer and with the standard VQE we can notice that the former has lower quality. This is because the Riemannian gradient flow optimizer has only a local view of the cost landscape while VQE can access these directions since the ansatz we used is universal. However, if we were able to calculate all of the 4^n - 1 projections, Riemannian gradient flow optimizer would be guaranteed to converge given the appropriate learning rate!","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"","category":"page"},{"location":"generated/examples/8.riemannian-gradient-flow/index.html","page":"Riemannian gradient flow optimizer","title":"Riemannian gradient flow optimizer","text":"This page was generated using Literate.jl.","category":"page"},{"location":"dev/index.html#Developer-Notes","page":"Developer Notes","title":"Developer Notes","text":"","category":"section"},{"location":"dev/index.html#Overview-of-the-Architecture","page":"Developer Notes","title":"Overview of the Architecture","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"The following is an overview of the entire ecosystem, where Yao and CuYao are two meta-packages.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: stack)","category":"page"},{"location":"dev/index.html#The-role-of-QBIR","page":"Developer Notes","title":"The role of QBIR","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"Currently the main functionality is built on the Quantum Block Intermediate Representation (QBIR). A quantum program is defined by QBIR and then interpreted to different targets, such as different simulation backend or matrix representation.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: framework)","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"EditURL = \"../../../examples/7.variation-quantum-eigen-solver/main.jl\"","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"(Image: )","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html#Variational-Quantum-Eigen-Solver","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"","category":"section"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"using Yao, Yao.AD, Yao.EasyBuild","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"number of qubits","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"n = 4","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"4","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"depth","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"d = 5\ncircuit = dispatch!(variational_circuit(n, d),:random)\n\ngatecount(circuit)\n\nnparameters(circuit)\n\nh = heisenberg(n)","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"nqubits: 4\n+\n├─ +\n│  ├─ repeat on (1, 2)\n│  │  └─ X\n│  ├─ repeat on (1, 2)\n│  │  └─ Y\n│  └─ repeat on (1, 2)\n│     └─ Z\n├─ +\n│  ├─ repeat on (2, 3)\n│  │  └─ X\n│  ├─ repeat on (2, 3)\n│  │  └─ Y\n│  └─ repeat on (2, 3)\n│     └─ Z\n├─ +\n│  ├─ repeat on (3, 4)\n│  │  └─ X\n│  ├─ repeat on (3, 4)\n│  │  └─ Y\n│  └─ repeat on (3, 4)\n│     └─ Z\n└─ +\n   ├─ repeat on (1, 4)\n   │  └─ X\n   ├─ repeat on (1, 4)\n   │  └─ Y\n   └─ repeat on (1, 4)\n      └─ Z\n","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"pick the one you like either reverse-mode or forward mode grad = faithfulgrad(h, zerostate(n) => circuit; nshots=100)","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"for i in 1:1000\n      _, grad = expect'(h, zero_state(n) => circuit)\n      dispatch!(-, circuit, 1e-2 * grad)\n      println(\"Step $i, energy = $(real.(expect(h, zero_state(n)=>circuit)))\")\nend\n\nusing LinearAlgebra\nw, _ = eigen(Matrix(mat(h)))","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"LinearAlgebra.Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n16-element Vector{Float64}:\n -7.9999999999999964\n -4.0\n -3.9999999999999956\n -3.999999999999994\n -7.437659514860159e-32\n -4.426399962566284e-32\n  0.0\n  2.7369110631344083e-48\n  2.003298162163793e-32\n  3.552713678800501e-15\n  4.440892098500626e-15\n  3.9999999999999987\n  3.9999999999999996\n  4.0\n  4.0\n  4.0\nvectors:\n16×16 Matrix{ComplexF64}:\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  1.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im          -0.5+0.0im   0.0+0.0im      0.559869+0.0im      0.43191+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.5+0.0im   0.0+0.0im   2.22045e-16+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im      0.707107+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im   6.41024e-18+0.0im   0.0+0.0im      0.481733+0.0im    -0.624453+0.0im        0.0+0.0im     -0.211325+0.0im   1.34897e-17+0.0im           0.0+0.0im     -0.288675+0.0im  -6.41024e-18+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im          -0.5+0.0im   0.0+0.0im     -0.559869+0.0im     -0.43191+0.0im        0.0+0.0im           0.0+0.0im   2.22045e-16+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n -0.57735+0.0im     0.707107+0.0im  -1.30125e-33+0.0im   0.0+0.0im  -1.30736e-32+0.0im          0.0+0.0im        0.0+0.0im  -8.71576e-33+0.0im   3.06708e-33+0.0im           0.0+0.0im  -1.97795e-16+0.0im   1.30125e-33+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im  -2.39233e-17+0.0im   0.0+0.0im      -0.12908+0.0im     0.167322+0.0im        0.0+0.0im      0.788675+0.0im   2.77891e-17+0.0im           0.0+0.0im     -0.288675+0.0im   2.39233e-17+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im  -0.5+0.0im           0.0+0.0im          0.0+0.0im   0.707107+0.0im           0.0+0.0im           0.0+0.0im  -4.71028e-16+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.5+0.0im   0.0+0.0im  -1.29477e-16+0.0im  6.29876e-17+0.0im        0.0+0.0im   6.06671e-17+0.0im     -0.707107+0.0im           0.0+0.0im           0.0+0.0im          -0.5+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n 0.288675+0.0im  9.56933e-17+0.0im   1.75131e-17+0.0im   0.0+0.0im     -0.352653+0.0im     0.457131+0.0im        0.0+0.0im      -0.57735+0.0im  -4.12788e-17+0.0im           0.0+0.0im     -0.288675+0.0im  -1.75131e-17+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n -0.57735+0.0im    -0.707107+0.0im   1.30125e-33+0.0im   0.0+0.0im   1.30736e-32+0.0im          0.0+0.0im        0.0+0.0im   8.71576e-33+0.0im  -3.06708e-33+0.0im           0.0+0.0im  -3.14995e-16+0.0im  -1.30125e-33+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.5+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im     -0.707107+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n 0.288675+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im      0.866025+0.0im           0.0+0.0im  -0.408248+0.0im  0.0+0.0im   0.0+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im  -0.5+0.0im           0.0+0.0im          0.0+0.0im  -0.707107+0.0im           0.0+0.0im           0.0+0.0im  -4.71028e-16+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5+0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.5+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im      0.707107+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im  -0.5-0.0im  0.0+0.0im\n      0.0+0.0im          0.0+0.0im           0.0+0.0im   0.0+0.0im           0.0+0.0im          0.0+0.0im        0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im           0.0+0.0im        0.0+0.0im  0.0+0.0im   0.0+0.0im  1.0+0.0im","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"","category":"page"},{"location":"generated/examples/7.variation-quantum-eigen-solver/index.html","page":"Variational Quantum Eigen Solver","title":"Variational Quantum Eigen Solver","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"EditURL = \"../../../examples/5.shor-9-code/main.jl\"","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"(Image: )","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html#Shor's-9-qubit-code","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"","category":"section"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"The well-known Shor's 9 qubit code can correct any single Pauli error, but it can also correct some other kinds of errors. Its circuit is shown as below (Image: shor-9-circuit) which can be constructed by the following code","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"using Yao\nusing SymEngine\n\nshor(E) = chain(9,\n    # encode circuit\n    cnot(1, 4), cnot(1, 7),\n    put(1=>H), put(4=>H), put(7=>H),\n    cnot(1,2), cnot(1,3), cnot(4,5), cnot(4,6), cnot(7,8), cnot(7,9),\n    E, # the error\n    # decode circuit\n    cnot(1,2), cnot(1,3), cnot((2, 3), 1),\n    cnot(4,5), cnot(4,6), cnot((5, 6), 4),\n    cnot(7,8), cnot(7,9), cnot((8, 9), 7),\n    put(1=>H), put(4=>H), put(7=>H), cnot(1, 4), cnot(1, 7), cnot((4, 7), 1)\n)","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"shor (generic function with 1 method)","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"Now we can check whether it can correct a given error by doing symbolic computation on an arbitrary 1-qubit pure quantum state α0 + β1 and a specific weight-9 error.","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"@vars α β\ns = α * ket\"0\" + β * ket\"1\" |> append_qudits!(8)\nE = kron(1=>X, 2=>Z, 3=>Z, 4=>X, 5=>Z, 6=>Z, 7=>X, 8=>Z, 9=>Z);\ns |> shor(E) |> expand","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"α|110110110⟩ + β|110110111⟩","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"","category":"page"},{"location":"generated/examples/5.shor-9-code/index.html","page":"Shor's 9 qubit code","title":"Shor's 9 qubit code","text":"This page was generated using Literate.jl.","category":"page"},{"location":"benchmarks.html#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks.html#Benchmark-Guard","page":"Benchmarks","title":"Benchmark Guard","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"To ensure some PR do not contain performance regression, we defined package benchmarks with PkgBenchmark in each component package, you can run the benchmark suite and compare the performance between different version and commits.","category":"page"},{"location":"benchmarks.html#Benchmark-with-Other-Packages","page":"Benchmarks","title":"Benchmark with Other Packages","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"We also provide benchmarks comparing to other packages, you can find a complete benchmark results here: quantum-benchmarks","category":"page"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"a glance of Yao's benchmark comparing to other packages:","category":"page"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"(Image: relative-gate)","category":"page"},{"location":"benchmarks.html","page":"Benchmarks","title":"Benchmarks","text":"(Image: relative-circuit)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"EditURL = \"../../../examples/1.prepare-ghz-state/main.jl\"","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(Image: )","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#example-ghz","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, you have to use this package in Julia.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"using Yao","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Now, we just define the circuit according to the circuit image below: (Image: ghz)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Let me explain what happens here.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Put-single-qubit-gate-X-to-location-1","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Put single qubit gate X to location 1","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"we have an X gate applied to the first qubit. We need to tell Yao to put this gate on the first qubit by","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, 1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We use Julia's Pair to denote the gate and its location in the circuit, for two-qubit gate, you could also use a tuple of locations:","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(4, (1, 2)=>swap(2, 1, 2))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1, 2)\n└─ put on (1, 2)\n   └─ SWAP\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"But, wait, why there's no 4 in the definition above? This is because all the functions in Yao that requires to input the number of qubits as its first arguement could be lazy (curried), and let other constructors to infer the total number of qubits later, e.g","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> put(n, 1 => X))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"which will return a lambda that ask for a single arguement n.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"put(1=>X)(4)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nput on (1)\n└─ X","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Apply-the-same-gate-on-different-locations","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Apply the same gate on different locations","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"next we should put Hadmard gates on all locations except the 1st qubits.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"We provide repeat to apply the same block repeatly, repeat can take an iterator of desired locations, and like put, we can also leave the total number of qubits there.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"repeat(H, 2:4)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> repeat(n, H, 2:4...))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Define-control-gates","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Define control gates","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"In Yao, we could define controlled gates by feeding a gate to control","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(4, 2, 1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\ncontrol(2)\n└─ (1,) X","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Like many others, you could leave the number of total qubits there, and infer it later.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"control(2, 1=>X)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"(n -> control(n, 2, 1 => X))","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Composite-each-part-together","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Composite each part together","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This will create a ControlBlock, the concept of block in Yao basically just means quantum operators, since the quantum circuit itself is a quantum operator, we could create a quantum circuit by composite each part of.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Here, we use chain to chain each part together, a chain of quantum operators means to apply each operators one by one in the chain. This will create a ChainBlock.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"circuit = chain(\n    4,\n    put(1=>X),\n    repeat(H, 2:4),\n    control(2, 1=>X),\n    control(4, 3=>X),\n    control(3, 1=>X),\n    control(4, 3=>X),\n    repeat(H, 1:4),\n)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"nqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n├─ repeat on (2, 3, 4)\n│  └─ H\n├─ control(2)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n├─ control(3)\n│  └─ (1,) X\n├─ control(4)\n│  └─ (3,) X\n└─ repeat on (1, 2, 3, 4)\n   └─ H\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"You can check the type of it with typeof","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"typeof(circuit)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ChainBlock{2}","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Construct-GHZ-state-from-00...00","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Construct GHZ state from 00...00","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"For simulation, we provide a builtin register type called ArrayReg, we will use the simulated register in this example.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"First, let's create 0000, you can create it with zero_state","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"zero_state(4)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Or we also provide bit string literals to create arbitrary eigen state","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg(bit\"0000\")","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"They will both create a register with Julia's builtin Array as storage.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html#Feed-Registers-to-Circuits","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Feed Registers to Circuits","text":"","category":"section"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"Circuits can be applied to registers with apply!","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"apply!(zero_state(4), circuit)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"or you can use pipe operator |>, when you want to chain several operations together, here we measure the state right after the circuit for 1000 times","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"results = zero_state(4) |> circuit |> r->measure(r, nshots=1000)\n\nusing StatsBase, Plots\n\nhist = fit(Histogram, Int.(results), 0:16)\nbar(hist.edges[1] .- 0.5, hist.weights, legend=:none)","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip200\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip201\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M172.015 1486.45 L2352.76 1486.45 L2352.76 47.2441 L172.015 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip202\">\n    <rect x=\"172\" y=\"47\" width=\"2182\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"341.095,1486.45 341.095,47.2441 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"955.289,1486.45 955.289,47.2441 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1569.48,1486.45 1569.48,47.2441 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2183.68,1486.45 2183.68,47.2441 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"172.015,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"172.015,1201.46 2352.76,1201.46 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"172.015,916.466 2352.76,916.466 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"172.015,631.475 2352.76,631.475 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"172.015,346.484 2352.76,346.484 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"172.015,61.4936 2352.76,61.4936 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"341.095,1486.45 341.095,1467.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"955.289,1486.45 955.289,1467.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1569.48,1486.45 1569.48,1467.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2183.68,1486.45 2183.68,1467.55 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M341.095 1517.37 Q337.484 1517.37 335.655 1520.93 Q333.85 1524.47 333.85 1531.6 Q333.85 1538.71 335.655 1542.27 Q337.484 1545.82 341.095 1545.82 Q344.729 1545.82 346.535 1542.27 Q348.363 1538.71 348.363 1531.6 Q348.363 1524.47 346.535 1520.93 Q344.729 1517.37 341.095 1517.37 M341.095 1513.66 Q346.905 1513.66 349.961 1518.27 Q353.039 1522.85 353.039 1531.6 Q353.039 1540.33 349.961 1544.94 Q346.905 1549.52 341.095 1549.52 Q335.285 1549.52 332.206 1544.94 Q329.151 1540.33 329.151 1531.6 Q329.151 1522.85 332.206 1518.27 Q335.285 1513.66 341.095 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M945.566 1514.29 L963.923 1514.29 L963.923 1518.22 L949.849 1518.22 L949.849 1526.7 Q950.867 1526.35 951.886 1526.19 Q952.904 1526 953.923 1526 Q959.71 1526 963.089 1529.17 Q966.469 1532.34 966.469 1537.76 Q966.469 1543.34 962.997 1546.44 Q959.525 1549.52 953.205 1549.52 Q951.029 1549.52 948.761 1549.15 Q946.515 1548.78 944.108 1548.04 L944.108 1543.34 Q946.191 1544.47 948.414 1545.03 Q950.636 1545.58 953.113 1545.58 Q957.117 1545.58 959.455 1543.48 Q961.793 1541.37 961.793 1537.76 Q961.793 1534.15 959.455 1532.04 Q957.117 1529.94 953.113 1529.94 Q951.238 1529.94 949.363 1530.35 Q947.511 1530.77 945.566 1531.65 L945.566 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1544.17 1544.91 L1551.81 1544.91 L1551.81 1518.55 L1543.5 1520.21 L1543.5 1515.95 L1551.76 1514.29 L1556.44 1514.29 L1556.44 1544.91 L1564.08 1544.91 L1564.08 1548.85 L1544.17 1548.85 L1544.17 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1583.52 1517.37 Q1579.91 1517.37 1578.08 1520.93 Q1576.28 1524.47 1576.28 1531.6 Q1576.28 1538.71 1578.08 1542.27 Q1579.91 1545.82 1583.52 1545.82 Q1587.16 1545.82 1588.96 1542.27 Q1590.79 1538.71 1590.79 1531.6 Q1590.79 1524.47 1588.96 1520.93 Q1587.16 1517.37 1583.52 1517.37 M1583.52 1513.66 Q1589.33 1513.66 1592.39 1518.27 Q1595.47 1522.85 1595.47 1531.6 Q1595.47 1540.33 1592.39 1544.94 Q1589.33 1549.52 1583.52 1549.52 Q1577.71 1549.52 1574.63 1544.94 Q1571.58 1540.33 1571.58 1531.6 Q1571.58 1522.85 1574.63 1518.27 Q1577.71 1513.66 1583.52 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2158.86 1544.91 L2166.5 1544.91 L2166.5 1518.55 L2158.19 1520.21 L2158.19 1515.95 L2166.45 1514.29 L2171.13 1514.29 L2171.13 1544.91 L2178.77 1544.91 L2178.77 1548.85 L2158.86 1548.85 L2158.86 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2188.26 1514.29 L2206.62 1514.29 L2206.62 1518.22 L2192.54 1518.22 L2192.54 1526.7 Q2193.56 1526.35 2194.58 1526.19 Q2195.6 1526 2196.62 1526 Q2202.4 1526 2205.78 1529.17 Q2209.16 1532.34 2209.16 1537.76 Q2209.16 1543.34 2205.69 1546.44 Q2202.22 1549.52 2195.9 1549.52 Q2193.72 1549.52 2191.45 1549.15 Q2189.21 1548.78 2186.8 1548.04 L2186.8 1543.34 Q2188.88 1544.47 2191.11 1545.03 Q2193.33 1545.58 2195.81 1545.58 Q2199.81 1545.58 2202.15 1543.48 Q2204.49 1541.37 2204.49 1537.76 Q2204.49 1534.15 2202.15 1532.04 Q2199.81 1529.94 2195.81 1529.94 Q2193.93 1529.94 2192.06 1530.35 Q2190.2 1530.77 2188.26 1531.65 L2188.26 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,1486.45 172.015,47.2441 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,1486.45 190.912,1486.45 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,1201.46 190.912,1201.46 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,916.466 190.912,916.466 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,631.475 190.912,631.475 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,346.484 190.912,346.484 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"172.015,61.4936 190.912,61.4936 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M124.07 1472.25 Q120.459 1472.25 118.631 1475.81 Q116.825 1479.35 116.825 1486.48 Q116.825 1493.59 118.631 1497.15 Q120.459 1500.7 124.07 1500.7 Q127.705 1500.7 129.51 1497.15 Q131.339 1493.59 131.339 1486.48 Q131.339 1479.35 129.51 1475.81 Q127.705 1472.25 124.07 1472.25 M124.07 1468.54 Q129.881 1468.54 132.936 1473.15 Q136.015 1477.73 136.015 1486.48 Q136.015 1495.21 132.936 1499.82 Q129.881 1504.4 124.07 1504.4 Q118.26 1504.4 115.182 1499.82 Q112.126 1495.21 112.126 1486.48 Q112.126 1477.73 115.182 1473.15 Q118.26 1468.54 124.07 1468.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M54.5569 1214.8 L62.1958 1214.8 L62.1958 1188.44 L53.8856 1190.1 L53.8856 1185.84 L62.1495 1184.18 L66.8254 1184.18 L66.8254 1214.8 L74.4642 1214.8 L74.4642 1218.74 L54.5569 1218.74 L54.5569 1214.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M93.9086 1187.26 Q90.2975 1187.26 88.4688 1190.82 Q86.6632 1194.36 86.6632 1201.49 Q86.6632 1208.6 88.4688 1212.16 Q90.2975 1215.7 93.9086 1215.7 Q97.5428 1215.7 99.3483 1212.16 Q101.177 1208.6 101.177 1201.49 Q101.177 1194.36 99.3483 1190.82 Q97.5428 1187.26 93.9086 1187.26 M93.9086 1183.55 Q99.7187 1183.55 102.774 1188.16 Q105.853 1192.74 105.853 1201.49 Q105.853 1210.22 102.774 1214.83 Q99.7187 1219.41 93.9086 1219.41 Q88.0984 1219.41 85.0197 1214.83 Q81.9642 1210.22 81.9642 1201.49 Q81.9642 1192.74 85.0197 1188.16 Q88.0984 1183.55 93.9086 1183.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M124.07 1187.26 Q120.459 1187.26 118.631 1190.82 Q116.825 1194.36 116.825 1201.49 Q116.825 1208.6 118.631 1212.16 Q120.459 1215.7 124.07 1215.7 Q127.705 1215.7 129.51 1212.16 Q131.339 1208.6 131.339 1201.49 Q131.339 1194.36 129.51 1190.82 Q127.705 1187.26 124.07 1187.26 M124.07 1183.55 Q129.881 1183.55 132.936 1188.16 Q136.015 1192.74 136.015 1201.49 Q136.015 1210.22 132.936 1214.83 Q129.881 1219.41 124.07 1219.41 Q118.26 1219.41 115.182 1214.83 Q112.126 1210.22 112.126 1201.49 Q112.126 1192.74 115.182 1188.16 Q118.26 1183.55 124.07 1183.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M57.7745 929.811 L74.0939 929.811 L74.0939 933.746 L52.1495 933.746 L52.1495 929.811 Q54.8115 927.056 59.3949 922.427 Q64.0013 917.774 65.1819 916.431 Q67.4272 913.908 68.3068 912.172 Q69.2096 910.413 69.2096 908.723 Q69.2096 905.969 67.2652 904.232 Q65.3439 902.496 62.2421 902.496 Q60.043 902.496 57.5893 903.26 Q55.1588 904.024 52.381 905.575 L52.381 900.853 Q55.2051 899.719 57.6588 899.14 Q60.1124 898.561 62.1495 898.561 Q67.5198 898.561 70.7142 901.246 Q73.9087 903.932 73.9087 908.422 Q73.9087 910.552 73.0985 912.473 Q72.3115 914.371 70.205 916.964 Q69.6263 917.635 66.5245 920.853 Q63.4226 924.047 57.7745 929.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M93.9086 902.265 Q90.2975 902.265 88.4688 905.83 Q86.6632 909.371 86.6632 916.501 Q86.6632 923.607 88.4688 927.172 Q90.2975 930.714 93.9086 930.714 Q97.5428 930.714 99.3483 927.172 Q101.177 923.607 101.177 916.501 Q101.177 909.371 99.3483 905.83 Q97.5428 902.265 93.9086 902.265 M93.9086 898.561 Q99.7187 898.561 102.774 903.168 Q105.853 907.751 105.853 916.501 Q105.853 925.228 102.774 929.834 Q99.7187 934.417 93.9086 934.417 Q88.0984 934.417 85.0197 929.834 Q81.9642 925.228 81.9642 916.501 Q81.9642 907.751 85.0197 903.168 Q88.0984 898.561 93.9086 898.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M124.07 902.265 Q120.459 902.265 118.631 905.83 Q116.825 909.371 116.825 916.501 Q116.825 923.607 118.631 927.172 Q120.459 930.714 124.07 930.714 Q127.705 930.714 129.51 927.172 Q131.339 923.607 131.339 916.501 Q131.339 909.371 129.51 905.83 Q127.705 902.265 124.07 902.265 M124.07 898.561 Q129.881 898.561 132.936 903.168 Q136.015 907.751 136.015 916.501 Q136.015 925.228 132.936 929.834 Q129.881 934.417 124.07 934.417 Q118.26 934.417 115.182 929.834 Q112.126 925.228 112.126 916.501 Q112.126 907.751 115.182 903.168 Q118.26 898.561 124.07 898.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M67.9133 630.121 Q71.2698 630.839 73.1448 633.107 Q75.0429 635.376 75.0429 638.709 Q75.0429 643.825 71.5244 646.626 Q68.0059 649.427 61.5245 649.427 Q59.3486 649.427 57.0338 648.987 Q54.7421 648.57 52.2884 647.714 L52.2884 643.2 Q54.2328 644.334 56.5477 644.913 Q58.8625 645.491 61.3856 645.491 Q65.7837 645.491 68.0754 643.755 Q70.3902 642.019 70.3902 638.709 Q70.3902 635.654 68.2374 633.941 Q66.1078 632.204 62.2884 632.204 L58.2606 632.204 L58.2606 628.362 L62.4735 628.362 Q65.9226 628.362 67.7513 626.996 Q69.58 625.607 69.58 623.015 Q69.58 620.353 67.6819 618.941 Q65.8069 617.505 62.2884 617.505 Q60.3671 617.505 58.168 617.922 Q55.969 618.339 53.3301 619.218 L53.3301 615.052 Q55.9921 614.311 58.3069 613.941 Q60.6449 613.57 62.705 613.57 Q68.0291 613.57 71.1309 616.001 Q74.2327 618.408 74.2327 622.529 Q74.2327 625.399 72.5892 627.39 Q70.9457 629.357 67.9133 630.121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M93.9086 617.274 Q90.2975 617.274 88.4688 620.839 Q86.6632 624.38 86.6632 631.51 Q86.6632 638.616 88.4688 642.181 Q90.2975 645.723 93.9086 645.723 Q97.5428 645.723 99.3483 642.181 Q101.177 638.616 101.177 631.51 Q101.177 624.38 99.3483 620.839 Q97.5428 617.274 93.9086 617.274 M93.9086 613.57 Q99.7187 613.57 102.774 618.177 Q105.853 622.76 105.853 631.51 Q105.853 640.237 102.774 644.843 Q99.7187 649.427 93.9086 649.427 Q88.0984 649.427 85.0197 644.843 Q81.9642 640.237 81.9642 631.51 Q81.9642 622.76 85.0197 618.177 Q88.0984 613.57 93.9086 613.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M124.07 617.274 Q120.459 617.274 118.631 620.839 Q116.825 624.38 116.825 631.51 Q116.825 638.616 118.631 642.181 Q120.459 645.723 124.07 645.723 Q127.705 645.723 129.51 642.181 Q131.339 638.616 131.339 631.51 Q131.339 624.38 129.51 620.839 Q127.705 617.274 124.07 617.274 M124.07 613.57 Q129.881 613.57 132.936 618.177 Q136.015 622.76 136.015 631.51 Q136.015 640.237 132.936 644.843 Q129.881 649.427 124.07 649.427 Q118.26 649.427 115.182 644.843 Q112.126 640.237 112.126 631.51 Q112.126 622.76 115.182 618.177 Q118.26 613.57 124.07 613.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M66.5939 333.279 L54.7884 351.728 L66.5939 351.728 L66.5939 333.279 M65.367 329.204 L71.2466 329.204 L71.2466 351.728 L76.1772 351.728 L76.1772 355.616 L71.2466 355.616 L71.2466 363.764 L66.5939 363.764 L66.5939 355.616 L50.9921 355.616 L50.9921 351.103 L65.367 329.204 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M93.9086 332.283 Q90.2975 332.283 88.4688 335.848 Q86.6632 339.39 86.6632 346.519 Q86.6632 353.626 88.4688 357.19 Q90.2975 360.732 93.9086 360.732 Q97.5428 360.732 99.3483 357.19 Q101.177 353.626 101.177 346.519 Q101.177 339.39 99.3483 335.848 Q97.5428 332.283 93.9086 332.283 M93.9086 328.579 Q99.7187 328.579 102.774 333.186 Q105.853 337.769 105.853 346.519 Q105.853 355.246 102.774 359.852 Q99.7187 364.436 93.9086 364.436 Q88.0984 364.436 85.0197 359.852 Q81.9642 355.246 81.9642 346.519 Q81.9642 337.769 85.0197 333.186 Q88.0984 328.579 93.9086 328.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M124.07 332.283 Q120.459 332.283 118.631 335.848 Q116.825 339.39 116.825 346.519 Q116.825 353.626 118.631 357.19 Q120.459 360.732 124.07 360.732 Q127.705 360.732 129.51 357.19 Q131.339 353.626 131.339 346.519 Q131.339 339.39 129.51 335.848 Q127.705 332.283 124.07 332.283 M124.07 328.579 Q129.881 328.579 132.936 333.186 Q136.015 337.769 136.015 346.519 Q136.015 355.246 132.936 359.852 Q129.881 364.436 124.07 364.436 Q118.26 364.436 115.182 359.852 Q112.126 355.246 112.126 346.519 Q112.126 337.769 115.182 333.186 Q118.26 328.579 124.07 328.579 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M53.793 44.2136 L72.1494 44.2136 L72.1494 48.1488 L58.0754 48.1488 L58.0754 56.621 Q59.0939 56.2738 60.1124 56.1117 Q61.131 55.9265 62.1495 55.9265 Q67.9365 55.9265 71.3161 59.0978 Q74.6957 62.2691 74.6957 67.6857 Q74.6957 73.2644 71.2235 76.3662 Q67.7513 79.4449 61.4319 79.4449 Q59.256 79.4449 56.9875 79.0746 Q54.7421 78.7042 52.3347 77.9635 L52.3347 73.2644 Q54.418 74.3987 56.6402 74.9542 Q58.8625 75.5098 61.3393 75.5098 Q65.3439 75.5098 67.6819 73.4033 Q70.0198 71.2968 70.0198 67.6857 Q70.0198 64.0746 67.6819 61.9682 Q65.3439 59.8617 61.3393 59.8617 Q59.4643 59.8617 57.5893 60.2784 Q55.7375 60.695 53.793 61.5747 L53.793 44.2136 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M93.9086 47.2923 Q90.2975 47.2923 88.4688 50.8571 Q86.6632 54.3988 86.6632 61.5284 Q86.6632 68.6348 88.4688 72.1996 Q90.2975 75.7412 93.9086 75.7412 Q97.5428 75.7412 99.3483 72.1996 Q101.177 68.6348 101.177 61.5284 Q101.177 54.3988 99.3483 50.8571 Q97.5428 47.2923 93.9086 47.2923 M93.9086 43.5886 Q99.7187 43.5886 102.774 48.1951 Q105.853 52.7784 105.853 61.5284 Q105.853 70.2552 102.774 74.8616 Q99.7187 79.4449 93.9086 79.4449 Q88.0984 79.4449 85.0197 74.8616 Q81.9642 70.2552 81.9642 61.5284 Q81.9642 52.7784 85.0197 48.1951 Q88.0984 43.5886 93.9086 43.5886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M124.07 47.2923 Q120.459 47.2923 118.631 50.8571 Q116.825 54.3988 116.825 61.5284 Q116.825 68.6348 118.631 72.1996 Q120.459 75.7412 124.07 75.7412 Q127.705 75.7412 129.51 72.1996 Q131.339 68.6348 131.339 61.5284 Q131.339 54.3988 129.51 50.8571 Q127.705 47.2923 124.07 47.2923 M124.07 43.5886 Q129.881 43.5886 132.936 48.1951 Q136.015 52.7784 136.015 61.5284 Q136.015 70.2552 132.936 74.8616 Q129.881 79.4449 124.07 79.4449 Q118.26 79.4449 115.182 74.8616 Q112.126 70.2552 112.126 61.5284 Q112.126 52.7784 115.182 48.1951 Q118.26 43.5886 124.07 43.5886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip202)\" d=\"M291.959 47.2441 L291.959 1486.45 L390.23 1486.45 L390.23 47.2441 L291.959 47.2441 L291.959 47.2441  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"291.959,47.2441 291.959,1486.45 390.23,1486.45 390.23,47.2441 291.959,47.2441 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M414.798 1486.45 L414.798 1486.45 L513.069 1486.45 L513.069 1486.45 L414.798 1486.45 L414.798 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"414.798,1486.45 414.798,1486.45 513.069,1486.45 414.798,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M537.637 1486.45 L537.637 1486.45 L635.908 1486.45 L635.908 1486.45 L537.637 1486.45 L537.637 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"537.637,1486.45 537.637,1486.45 635.908,1486.45 537.637,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M660.476 1486.45 L660.476 1486.45 L758.747 1486.45 L758.747 1486.45 L660.476 1486.45 L660.476 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"660.476,1486.45 660.476,1486.45 758.747,1486.45 660.476,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M783.314 1486.45 L783.314 1486.45 L881.585 1486.45 L881.585 1486.45 L783.314 1486.45 L783.314 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"783.314,1486.45 783.314,1486.45 881.585,1486.45 783.314,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M906.153 1486.45 L906.153 1486.45 L1004.42 1486.45 L1004.42 1486.45 L906.153 1486.45 L906.153 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"906.153,1486.45 906.153,1486.45 1004.42,1486.45 906.153,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1028.99 1486.45 L1028.99 1486.45 L1127.26 1486.45 L1127.26 1486.45 L1028.99 1486.45 L1028.99 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1028.99,1486.45 1028.99,1486.45 1127.26,1486.45 1028.99,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1151.83 1486.45 L1151.83 1486.45 L1250.1 1486.45 L1250.1 1486.45 L1151.83 1486.45 L1151.83 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1151.83,1486.45 1151.83,1486.45 1250.1,1486.45 1151.83,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1274.67 1486.45 L1274.67 1486.45 L1372.94 1486.45 L1372.94 1486.45 L1274.67 1486.45 L1274.67 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1274.67,1486.45 1274.67,1486.45 1372.94,1486.45 1274.67,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1397.51 1486.45 L1397.51 1486.45 L1495.78 1486.45 L1495.78 1486.45 L1397.51 1486.45 L1397.51 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1397.51,1486.45 1397.51,1486.45 1495.78,1486.45 1397.51,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1520.35 1486.45 L1520.35 1486.45 L1618.62 1486.45 L1618.62 1486.45 L1520.35 1486.45 L1520.35 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1520.35,1486.45 1520.35,1486.45 1618.62,1486.45 1520.35,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1643.19 1486.45 L1643.19 1486.45 L1741.46 1486.45 L1741.46 1486.45 L1643.19 1486.45 L1643.19 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1643.19,1486.45 1643.19,1486.45 1741.46,1486.45 1643.19,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1766.02 1486.45 L1766.02 1486.45 L1864.3 1486.45 L1864.3 1486.45 L1766.02 1486.45 L1766.02 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1766.02,1486.45 1766.02,1486.45 1864.3,1486.45 1766.02,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M1888.86 1486.45 L1888.86 1486.45 L1987.13 1486.45 L1987.13 1486.45 L1888.86 1486.45 L1888.86 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1888.86,1486.45 1888.86,1486.45 1987.13,1486.45 1888.86,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M2011.7 1486.45 L2011.7 1486.45 L2109.97 1486.45 L2109.97 1486.45 L2011.7 1486.45 L2011.7 1486.45  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2011.7,1486.45 2011.7,1486.45 2109.97,1486.45 2011.7,1486.45 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M2134.54 75.7432 L2134.54 1486.45 L2232.81 1486.45 L2232.81 75.7432 L2134.54 75.7432 L2134.54 75.7432  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2134.54,75.7432 2134.54,1486.45 2232.81,1486.45 2232.81,75.7432 2134.54,75.7432 \"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"341.095\" cy=\"47.2441\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"463.934\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"586.772\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"709.611\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"832.45\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"955.289\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1078.13\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1200.97\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1323.8\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1446.64\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1569.48\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1692.32\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1815.16\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1938\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2060.84\" cy=\"1486.45\" r=\"2\"/>\n<circle clip-path=\"url(#clip202)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2183.68\" cy=\"75.7432\" r=\"2\"/>\n</svg>\n","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"GHZ state will collapse to 0000 or 1111.","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"","category":"page"},{"location":"generated/examples/1.prepare-ghz-state/index.html","page":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","title":"Prepare Greenberger–Horne–Zeilinger state with Quantum Circuit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"CurrentModule = Yao","category":"page"},{"location":"man/cuda.html#CUDA-extension-CuYao","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"","category":"section"},{"location":"man/cuda.html#Tutorial","page":"CUDA extension - CuYao","title":"Tutorial","text":"","category":"section"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"CuYao is a CUDA extension of Yao, which allows you to run Yao circuits on GPU. The usage of CuYao is similar to Yao, but with some extra APIs to upload and download registers between CPU and GPU:","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"cu(reg) to upload a registe reg to GPU, and\ncpu(cureg) to download a register cureg from GPU to CPU.","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"julia> using Yao, CUDA\n\n# create a register on GPU\njulia> cureg = rand_state(9; nbatch=1000) |> cu;   # or `curand_state(9; nbatch=1000)`.\n\n# run a circuit on GPU\njulia> cureg |> put(9, 2=>Z);\n\n# measure the register on GPU\njulia> measure!(cureg)\n1000-element CuArray{DitStr{2, 9, Int64}, 1, CUDA.Mem.DeviceBuffer}:\n 110110100 ₍₂₎\n 000100001 ₍₂₎\n 111111001 ₍₂₎\n             ⋮\n 010001101 ₍₂₎\n 000100110 ₍₂₎\n\n# download the register to CPU\njulia> reg = cureg |> cpu;","category":"page"},{"location":"man/cuda.html#Features","page":"CUDA extension - CuYao","title":"Features","text":"","category":"section"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"Supported gates:","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"general U(N) gate\ngeneral U(1) gate\nX, Y, Z gate\nT, S gate\nSWAP gate\ncontrol gates","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"Supported register operations:","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"measure!, measurereset!, measureremove!, select\nappendqudits!, appendqubits!\ninsertqudit!, insertqubits!\nfocus!, relax!\njoin\ndensity_matrix\nfidelity\nexpect","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"Autodiff:","category":"page"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"autodiff is supported when the only parameterized gates are rotation gates in a circuit.","category":"page"},{"location":"man/cuda.html#API","page":"CUDA extension - CuYao","title":"API","text":"","category":"section"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"cpu\ncurand_state\ncuzero_state\ncuproduct_state\ncuuniform_state\ncughz_state","category":"page"},{"location":"man/cuda.html#Yao.cpu","page":"CUDA extension - CuYao","title":"Yao.cpu","text":"cpu(cureg)\n\nDownload the register state from GPU to CPU.\n\n\n\n\n\n","category":"function"},{"location":"man/cuda.html#Yao.curand_state","page":"CUDA extension - CuYao","title":"Yao.curand_state","text":"curand_state([T=ComplexF64], n::Int; nbatch=1)\n\nThe GPU version of rand_state.\n\n\n\n\n\n","category":"function"},{"location":"man/cuda.html#Yao.cuzero_state","page":"CUDA extension - CuYao","title":"Yao.cuzero_state","text":"cuzero_state([T=ComplexF64], n::Int; nbatch=1)\n\nThe GPU version of zero_state.\n\n\n\n\n\n","category":"function"},{"location":"man/cuda.html#Yao.cuproduct_state","page":"CUDA extension - CuYao","title":"Yao.cuproduct_state","text":"cuproduct_state([T=ComplexF64], total::Int, bit_config::Integer; nbatch=NoBatch())\n\nThe GPU version of product_state.\n\n\n\n\n\n","category":"function"},{"location":"man/cuda.html#Yao.cuuniform_state","page":"CUDA extension - CuYao","title":"Yao.cuuniform_state","text":"cuuniform_state([T=ComplexF64], n::Int; nbatch=1)\n\nThe GPU version of uniform_state.\n\n\n\n\n\n","category":"function"},{"location":"man/cuda.html#Yao.cughz_state","page":"CUDA extension - CuYao","title":"Yao.cughz_state","text":"cughz_state([T=ComplexF64], n::Int; nbatch=1)\n\nThe GPU version of ghz_state.\n\n\n\n\n\n","category":"function"},{"location":"man/cuda.html","page":"CUDA extension - CuYao","title":"CUDA extension - CuYao","text":"note: Note\nthe cu function is not documented in this module, but it is used to upload a register to GPU.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"EditURL = \"../../../examples/3.grover-search/main.jl\"","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"(Image: )","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Grover","page":"Grover Search","title":"Grover Search","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"using Yao\nusing Yao.EasyBuild: variational_circuit\nusing LinearAlgebra","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Grover-Step","page":"Grover Search","title":"Grover Step","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"A single grover step is consist of applying oracle circuit and reflection circuit. The reflection_circuit function takes the wave function generator U as the input and returns U|0><0|U'.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function grover_step!(reg::AbstractRegister, oracle, U::AbstractBlock)\n    apply!(reg |> oracle, reflect_circuit(U))\nend\n\nfunction reflect_circuit(gen::AbstractBlock)\n    N = nqubits(gen)\n    reflect0 = control(N, -collect(1:N-1), N=>-Z)\n    chain(gen', reflect0, gen)\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"reflect_circuit (generic function with 1 method)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"Compute the propotion of target states to estimate the number of iterations, which requires computing the output state.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function solution_state(oracle, gen::AbstractBlock)\n    N = nqubits(gen)\n    reg= zero_state(N) |> gen\n    reg.state[real.(statevec(ArrayReg(ones(ComplexF64, 1<<N)) |> oracle)) .> 0] .= 0\n    normalize!(reg)\nend\n\nfunction num_grover_step(oracle, gen::AbstractBlock)\n    N = nqubits(gen)\n    reg = zero_state(N) |> gen\n    ratio = abs2(solution_state(oracle, gen)'*reg)\n    Int(round(pi/4/sqrt(ratio)))-1\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"num_grover_step (generic function with 1 method)","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Run","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"First, we define the problem by an oracle, it finds bit string bit\"000001100100\".","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"num_bit = 12\noracle = matblock(Diagonal((v = ones(ComplexF64, 1<<num_bit); v[Int(bit\"000001100100\")+1]*=-1; v)))","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"matblock(...)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"then solve the above problem","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"gen = repeat(num_bit, H, 1:num_bit)\nreg = zero_state(num_bit) |> gen\n\ntarget_state = solution_state(oracle, gen)\n\nfor i = 1:num_grover_step(oracle, gen)\n    grover_step!(reg, oracle, gen)\n    overlap = abs(reg'*target_state)\n    println(\"step $(i-1), overlap = $overlap\")\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"step 0, overlap = 0.04685974121093736\nstep 1, overlap = 0.0780487209558483\nstep 2, overlap = 0.10916148124670066\nstep 3, overlap = 0.14016763852852288\nstep 4, overlap = 0.17103691335084453\nstep 5, overlap = 0.20173915993747182\nstep 6, overlap = 0.23224439562572258\nstep 7, overlap = 0.26252283014636996\nstep 8, overlap = 0.29254489471570244\nstep 9, overlap = 0.322281270911289\nstep 10, overlap = 0.35170291930325104\nstep 11, overlap = 0.3807811078130809\nstep 12, overlap = 0.40948743977231195\nstep 13, overlap = 0.4377938816536402\nstep 14, overlap = 0.46567279044741594\nstep 15, overlap = 0.49309694065677034\nstep 16, overlap = 0.5200395508850146\nstep 17, overlap = 0.5464743099893477\nstep 18, overlap = 0.5723754027753314\nstep 19, overlap = 0.5977175352070423\nstep 20, overlap = 0.6224759591082774\nstep 21, overlap = 0.6466264963306958\nstep 22, overlap = 0.6701455623652912\nstep 23, overlap = 0.6930101893741392\nstep 24, overlap = 0.7151980486199263\nstep 25, overlap = 0.7366874722713579\nstep 26, overlap = 0.7574574745631494\nstep 27, overlap = 0.7774877722899375\nstep 28, overlap = 0.7967588046140988\nstep 29, overlap = 0.8152517521681291\nstep 30, overlap = 0.8329485554329328\nstep 31, overlap = 0.8498319323740713\nstep 32, overlap = 0.8658853953187506\nstep 33, overlap = 0.8810932670570639\nstep 34, overlap = 0.8954406961517668\nstep 35, overlap = 0.9089136714416339\nstep 36, overlap = 0.9214990357242339\nstep 37, overlap = 0.9331844986047592\nstep 38, overlap = 0.9439586484983656\nstep 39, overlap = 0.953810963774298\nstep 40, overlap = 0.9627318230309194\nstep 41, overlap = 0.9707125144916121\nstep 42, overlap = 0.9777452445123718\nstep 43, overlap = 0.983823145192787\nstep 44, overlap = 0.9889402810829753\nstep 45, overlap = 0.9930916549799182\nstep 46, overlap = 0.9962732128075449\nstep 47, overlap = 0.9984818475757891\nstep 48, overlap = 0.9997154024147601\n","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Rejection-Sampling","page":"Grover Search","title":"Rejection Sampling","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"In practise, it is often not possible to determine the number of iterations before actual running. we can use rejection sampling technique to avoid estimating the number of grover steps.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"In a single try, we apply the grover algorithm for nstep times.","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"function single_try(oracle, gen::AbstractBlock, nstep::Int; nbatch::Int)\n    N = nqubits(gen)\n    reg = zero_state(N+1; nbatch)\n    focus(reg, (1:N...,)) do r\n        r |> gen\n        for i = 1:nstep\n            grover_step!(r, oracle, gen)\n        end\n        return r\n    end\n    reg |> checker\n    res = measure!(RemoveMeasured(), reg, (N+1))\n    return res, reg\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"single_try (generic function with 1 method)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"After running the grover search, we have a checker program that flips the ancilla qubit if the output is the desired value, we assume the checker program can be implemented in polynomial time. to gaurante the output is correct. We contruct a checker \"program\", if the result is correct, flip the ancilla qubit","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"ctrl = -collect(1:num_bit); ctrl[[3,6,7]] *= -1\nchecker = control(num_bit+1,ctrl, num_bit+1=>X)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"nqubits: 13\ncontrol(¬1, ¬2, 3, ¬4, ¬5, 6, 7, ¬8, ¬9, ¬10, ¬11, ¬12)\n└─ (13,) X","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"The register is batched, with batch dimension nshot. focus! views the first 1-N qubts as system. For a batched register, measure! returns a vector of bitstring as output.","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Run-2","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"maxtry = 100\nnshot = 3\n\nfor nstep = 0:maxtry\n    println(\"number of iter = $nstep\")\n    res, regi = single_try(oracle, gen, nstep; nbatch=3)\n\n    # success!\n    if any(==(1), res)\n        overlap_final = viewbatch(regi, findfirst(==(1), res))'*target_state\n        println(\"success, overlap = $(overlap_final)\")\n        break\n    end\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"number of iter = 0\nnumber of iter = 1\nnumber of iter = 2\nnumber of iter = 3\nnumber of iter = 4\nnumber of iter = 5\nnumber of iter = 6\nsuccess, overlap = 1.0 + 0.0im\n","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"The final state has an overlap of 1 with the target state.","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Amplitude-Amplification","page":"Grover Search","title":"Amplitude Amplification","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"Given a circuit to generate a state, now we want to project out the subspace with [1,3,5,8,9,11,12] fixed to 1 and [4,6] fixed to 0. We can construct an oracle","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"evidense = [1, 3, -4, 5, -6, 8, 9, 11, 12]\nfunction inference_oracle(nbit::Int, locs::Vector{Int})\n    control(nbit, locs[1:end-1], abs(locs[end]) => (locs[end]>0 ? Z : -Z))\nend\noracle = inference_oracle(nqubits(reg), evidense)","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"nqubits: 12\ncontrol(1, 3, ¬4, 5, ¬6, 8, 9, 11)\n└─ (12,) Z","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"We use a variational circuit generator defined in Yao.EasyBuild","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"gen = dispatch!(variational_circuit(num_bit), :random)\nreg = zero_state(num_bit) |> gen","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 12/12\n    nlevel: 2","category":"page"},{"location":"generated/examples/3.grover-search/index.html#Run-3","page":"Grover Search","title":"Run","text":"","category":"section"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"solution = solution_state(oracle, gen)\nfor i = 1:num_grover_step(oracle, gen)\n    grover_step!(reg, oracle, gen)\n    println(\"step $(i-1), overlap = $(abs(reg'*solution))\")\nend","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"step 0, overlap = 0.11701567320112582\nstep 1, overlap = 0.19423148884368097\nstep 2, overlap = 0.2702604535784235\nstep 3, overlap = 0.34463799265306827\nstep 4, overlap = 0.4169096223466846\nstep 5, overlap = 0.4866337270910573\nstep 6, overlap = 0.5533842579612414\nstep 7, overlap = 0.6167533360461919\nstep 8, overlap = 0.6763537447915791\nstep 9, overlap = 0.7318212960853381\nstep 10, overlap = 0.7828170556279945\nstep 11, overlap = 0.8290294139896452\nstep 12, overlap = 0.8701759906984102\nstep 13, overlap = 0.906005359725426\nstep 14, overlap = 0.9362985858228123\nstep 15, overlap = 0.9608705623268237\nstep 16, overlap = 0.9795711422515403\nstep 17, overlap = 0.9922860557615591\nstep 18, overlap = 0.9989376084174668\n","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"","category":"page"},{"location":"generated/examples/3.grover-search/index.html","page":"Grover Search","title":"Grover Search","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/automatic_differentiation.html#Automatic-Differentiation","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Yao currently contains builtin automatic differentiation engine (an operator overloading based) especially for quantum circuits. It uses the reversible context of quantum computation to optimize the performance during simulation, thus you may find this is way faster than any other AD engine at the moment.","category":"page"},{"location":"man/automatic_differentiation.html#Builtin-Reverse-mode-AD-engine-for-simulation","page":"Automatic Differentiation","title":"Builtin Reverse mode AD engine for simulation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"As for expectation, the usage is pretty simple, since the evluation of expectations are just","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"to get the gradients, simply add an adjoint","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect'(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"which will return the pair of gradients, one is the gradient of input register and the other is the gradient of circuit parameters.","category":"page"},{"location":"man/automatic_differentiation.html#Integration-with-General-purpose-AD-engine","page":"Automatic Differentiation","title":"Integration with General purpose AD engine","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"The builtin AD engine for Yao only provides the differentiation of quantum circuits, but you can plug it into a general AD engine, such as Zygote, since we have ported these rules to ChainRules.","category":"page"},{"location":"man/automatic_differentiation.html#APIs","page":"Automatic Differentiation","title":"APIs","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Modules = [YaoBlocks.AD]\nOrder = [:function, :macro]","category":"page"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.apply_back-Tuple{Tuple{AbstractArrayReg, AbstractArrayReg}, AbstractBlock}","page":"Automatic Differentiation","title":"YaoBlocks.AD.apply_back","text":"apply_back(st::Tuple{<:AbstractArrayReg, <:AbstractArrayReg}, block::AbstractBlock; kwargs...) -> (out, outδ), paramsδ\n\nThe backward function of apply!. Returns a tuple of ((input register, gradient of input register), parameter gradients)\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.generator-Tuple{RotationGate}","page":"Automatic Differentiation","title":"YaoBlocks.AD.generator","text":"generator(rot::Rotor) -> AbstractBlock\n\nReturn the generator of rotation block.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.mat_back-Union{Tuple{T}, Tuple{AbstractBlock, AbstractMatrix{T}}} where T","page":"Automatic Differentiation","title":"YaoBlocks.AD.mat_back","text":"mat_back([::Type{T}, ]block::AbstractBlock, adjm::AbstractMatrix) -> Vector\n\nThe backward function of mat. Returns the gradients of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.rotgrad-Union{Tuple{T}, Tuple{D}, Tuple{Type{T}, RotationGate{D, T, GT} where {T, GT<:AbstractBlock{D}}}} where {D, T}","page":"Automatic Differentiation","title":"YaoBlocks.AD.rotgrad","text":"The matrix gradient of a rotation block.\n\n\n\n\n\n","category":"method"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"EditURL = \"../../../examples/6.quantum-circuit-born-machine/main.jl\"","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"(Image: )","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#qcbm","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Yao is designed with variational quantum circuits in mind, and this tutorial will introduce how to use Yao for this kind of task by implementing a quantum circuit born machine described in Jin-Guo Liu, Lei Wang (2018)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"let's use the packages first","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"using Yao, LinearAlgebra, Plots","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Training-Target","page":"Quantum Circuit Born Machine","title":"Training Target","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In this tutorial, we will ask the variational circuit to learn the most basic distribution: a guassian distribution. It is defined as follows:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"f(x left mu sigma^2right) = frac1sqrt2pisigma^2 e^-frac(x-mu)^22sigma^2","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We implement it as gaussian_pdf:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function gaussian_pdf(x, μ::Real, σ::Real)\n    pl = @. 1 / sqrt(2pi * σ^2) * exp(-(x - μ)^2 / (2 * σ^2))\n    pl / sum(pl)\nend\npg = gaussian_pdf(1:1<<6, 1<<5-0.5, 1<<4);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can plot the distribution, it looks like","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Plots.plot(pg)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip230\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip230)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip231\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip230)\" d=\"M216.436 1486.45 L2352.76 1486.45 L2352.76 47.2441 L216.436 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip232\">\n    <rect x=\"216\" y=\"47\" width=\"2137\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"244.907,1486.45 244.907,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"564.812,1486.45 564.812,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"884.716,1486.45 884.716,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1204.62,1486.45 1204.62,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1524.52,1486.45 1524.52,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1844.43,1486.45 1844.43,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2164.33,1486.45 2164.33,47.2441 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,1345.72 2352.76,1345.72 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,1047.96 2352.76,1047.96 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,750.205 2352.76,750.205 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,452.448 2352.76,452.448 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,154.692 2352.76,154.692 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"244.907,1486.45 244.907,1467.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"564.812,1486.45 564.812,1467.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"884.716,1486.45 884.716,1467.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1204.62,1486.45 1204.62,1467.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1524.52,1486.45 1524.52,1467.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1844.43,1486.45 1844.43,1467.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2164.33,1486.45 2164.33,1467.55 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M244.907 1517.37 Q241.296 1517.37 239.468 1520.93 Q237.662 1524.47 237.662 1531.6 Q237.662 1538.71 239.468 1542.27 Q241.296 1545.82 244.907 1545.82 Q248.542 1545.82 250.347 1542.27 Q252.176 1538.71 252.176 1531.6 Q252.176 1524.47 250.347 1520.93 Q248.542 1517.37 244.907 1517.37 M244.907 1513.66 Q250.718 1513.66 253.773 1518.27 Q256.852 1522.85 256.852 1531.6 Q256.852 1540.33 253.773 1544.94 Q250.718 1549.52 244.907 1549.52 Q239.097 1549.52 236.019 1544.94 Q232.963 1540.33 232.963 1531.6 Q232.963 1522.85 236.019 1518.27 Q239.097 1513.66 244.907 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M539.499 1544.91 L547.138 1544.91 L547.138 1518.55 L538.828 1520.21 L538.828 1515.95 L547.092 1514.29 L551.768 1514.29 L551.768 1544.91 L559.406 1544.91 L559.406 1548.85 L539.499 1548.85 L539.499 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M578.851 1517.37 Q575.24 1517.37 573.411 1520.93 Q571.605 1524.47 571.605 1531.6 Q571.605 1538.71 573.411 1542.27 Q575.24 1545.82 578.851 1545.82 Q582.485 1545.82 584.291 1542.27 Q586.119 1538.71 586.119 1531.6 Q586.119 1524.47 584.291 1520.93 Q582.485 1517.37 578.851 1517.37 M578.851 1513.66 Q584.661 1513.66 587.716 1518.27 Q590.795 1522.85 590.795 1531.6 Q590.795 1540.33 587.716 1544.94 Q584.661 1549.52 578.851 1549.52 Q573.041 1549.52 569.962 1544.94 Q566.906 1540.33 566.906 1531.6 Q566.906 1522.85 569.962 1518.27 Q573.041 1513.66 578.851 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M863.489 1544.91 L879.808 1544.91 L879.808 1548.85 L857.864 1548.85 L857.864 1544.91 Q860.526 1542.16 865.109 1537.53 Q869.716 1532.88 870.896 1531.53 Q873.142 1529.01 874.021 1527.27 Q874.924 1525.51 874.924 1523.82 Q874.924 1521.07 872.98 1519.33 Q871.058 1517.6 867.957 1517.6 Q865.757 1517.6 863.304 1518.36 Q860.873 1519.13 858.095 1520.68 L858.095 1515.95 Q860.92 1514.82 863.373 1514.24 Q865.827 1513.66 867.864 1513.66 Q873.234 1513.66 876.429 1516.35 Q879.623 1519.03 879.623 1523.52 Q879.623 1525.65 878.813 1527.57 Q878.026 1529.47 875.919 1532.07 Q875.341 1532.74 872.239 1535.95 Q869.137 1539.15 863.489 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M899.623 1517.37 Q896.012 1517.37 894.183 1520.93 Q892.378 1524.47 892.378 1531.6 Q892.378 1538.71 894.183 1542.27 Q896.012 1545.82 899.623 1545.82 Q903.257 1545.82 905.063 1542.27 Q906.891 1538.71 906.891 1531.6 Q906.891 1524.47 905.063 1520.93 Q903.257 1517.37 899.623 1517.37 M899.623 1513.66 Q905.433 1513.66 908.489 1518.27 Q911.567 1522.85 911.567 1531.6 Q911.567 1540.33 908.489 1544.94 Q905.433 1549.52 899.623 1549.52 Q893.813 1549.52 890.734 1544.94 Q887.679 1540.33 887.679 1531.6 Q887.679 1522.85 890.734 1518.27 Q893.813 1513.66 899.623 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1193.46 1530.21 Q1196.82 1530.93 1198.69 1533.2 Q1200.59 1535.47 1200.59 1538.8 Q1200.59 1543.92 1197.07 1546.72 Q1193.56 1549.52 1187.07 1549.52 Q1184.9 1549.52 1182.58 1549.08 Q1180.29 1548.66 1177.84 1547.81 L1177.84 1543.29 Q1179.78 1544.43 1182.1 1545.01 Q1184.41 1545.58 1186.93 1545.58 Q1191.33 1545.58 1193.62 1543.85 Q1195.94 1542.11 1195.94 1538.8 Q1195.94 1535.75 1193.79 1534.03 Q1191.66 1532.3 1187.84 1532.3 L1183.81 1532.3 L1183.81 1528.45 L1188.02 1528.45 Q1191.47 1528.45 1193.3 1527.09 Q1195.13 1525.7 1195.13 1523.11 Q1195.13 1520.45 1193.23 1519.03 Q1191.36 1517.6 1187.84 1517.6 Q1185.92 1517.6 1183.72 1518.01 Q1181.52 1518.43 1178.88 1519.31 L1178.88 1515.14 Q1181.54 1514.4 1183.86 1514.03 Q1186.19 1513.66 1188.25 1513.66 Q1193.58 1513.66 1196.68 1516.09 Q1199.78 1518.5 1199.78 1522.62 Q1199.78 1525.49 1198.14 1527.48 Q1196.49 1529.45 1193.46 1530.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1219.46 1517.37 Q1215.85 1517.37 1214.02 1520.93 Q1212.21 1524.47 1212.21 1531.6 Q1212.21 1538.71 1214.02 1542.27 Q1215.85 1545.82 1219.46 1545.82 Q1223.09 1545.82 1224.9 1542.27 Q1226.73 1538.71 1226.73 1531.6 Q1226.73 1524.47 1224.9 1520.93 Q1223.09 1517.37 1219.46 1517.37 M1219.46 1513.66 Q1225.27 1513.66 1228.32 1518.27 Q1231.4 1522.85 1231.4 1531.6 Q1231.4 1540.33 1228.32 1544.94 Q1225.27 1549.52 1219.46 1549.52 Q1213.65 1549.52 1210.57 1544.94 Q1207.51 1540.33 1207.51 1531.6 Q1207.51 1522.85 1210.57 1518.27 Q1213.65 1513.66 1219.46 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1512.7 1518.36 L1500.89 1536.81 L1512.7 1536.81 L1512.7 1518.36 M1511.47 1514.29 L1517.35 1514.29 L1517.35 1536.81 L1522.28 1536.81 L1522.28 1540.7 L1517.35 1540.7 L1517.35 1548.85 L1512.7 1548.85 L1512.7 1540.7 L1497.09 1540.7 L1497.09 1536.19 L1511.47 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1540.01 1517.37 Q1536.4 1517.37 1534.57 1520.93 Q1532.76 1524.47 1532.76 1531.6 Q1532.76 1538.71 1534.57 1542.27 Q1536.4 1545.82 1540.01 1545.82 Q1543.64 1545.82 1545.45 1542.27 Q1547.28 1538.71 1547.28 1531.6 Q1547.28 1524.47 1545.45 1520.93 Q1543.64 1517.37 1540.01 1517.37 M1540.01 1513.66 Q1545.82 1513.66 1548.88 1518.27 Q1551.95 1522.85 1551.95 1531.6 Q1551.95 1540.33 1548.88 1544.94 Q1545.82 1549.52 1540.01 1549.52 Q1534.2 1549.52 1531.12 1544.94 Q1528.07 1540.33 1528.07 1531.6 Q1528.07 1522.85 1531.12 1518.27 Q1534.2 1513.66 1540.01 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1819.13 1514.29 L1837.48 1514.29 L1837.48 1518.22 L1823.41 1518.22 L1823.41 1526.7 Q1824.43 1526.35 1825.45 1526.19 Q1826.47 1526 1827.48 1526 Q1833.27 1526 1836.65 1529.17 Q1840.03 1532.34 1840.03 1537.76 Q1840.03 1543.34 1836.56 1546.44 Q1833.09 1549.52 1826.77 1549.52 Q1824.59 1549.52 1822.32 1549.15 Q1820.08 1548.78 1817.67 1548.04 L1817.67 1543.34 Q1819.75 1544.47 1821.97 1545.03 Q1824.2 1545.58 1826.67 1545.58 Q1830.68 1545.58 1833.02 1543.48 Q1835.35 1541.37 1835.35 1537.76 Q1835.35 1534.15 1833.02 1532.04 Q1830.68 1529.94 1826.67 1529.94 Q1824.8 1529.94 1822.92 1530.35 Q1821.07 1530.77 1819.13 1531.65 L1819.13 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1859.24 1517.37 Q1855.63 1517.37 1853.8 1520.93 Q1852 1524.47 1852 1531.6 Q1852 1538.71 1853.8 1542.27 Q1855.63 1545.82 1859.24 1545.82 Q1862.88 1545.82 1864.68 1542.27 Q1866.51 1538.71 1866.51 1531.6 Q1866.51 1524.47 1864.68 1520.93 Q1862.88 1517.37 1859.24 1517.37 M1859.24 1513.66 Q1865.05 1513.66 1868.11 1518.27 Q1871.19 1522.85 1871.19 1531.6 Q1871.19 1540.33 1868.11 1544.94 Q1865.05 1549.52 1859.24 1549.52 Q1853.43 1549.52 1850.35 1544.94 Q1847.3 1540.33 1847.3 1531.6 Q1847.3 1522.85 1850.35 1518.27 Q1853.43 1513.66 1859.24 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2149.74 1529.7 Q2146.59 1529.7 2144.74 1531.86 Q2142.91 1534.01 2142.91 1537.76 Q2142.91 1541.49 2144.74 1543.66 Q2146.59 1545.82 2149.74 1545.82 Q2152.89 1545.82 2154.71 1543.66 Q2156.57 1541.49 2156.57 1537.76 Q2156.57 1534.01 2154.71 1531.86 Q2152.89 1529.7 2149.74 1529.7 M2159.02 1515.05 L2159.02 1519.31 Q2157.26 1518.48 2155.46 1518.04 Q2153.67 1517.6 2151.91 1517.6 Q2147.28 1517.6 2144.83 1520.72 Q2142.4 1523.85 2142.05 1530.17 Q2143.42 1528.15 2145.48 1527.09 Q2147.54 1526 2150.02 1526 Q2155.22 1526 2158.23 1529.17 Q2161.27 1532.32 2161.27 1537.76 Q2161.27 1543.08 2158.12 1546.3 Q2154.97 1549.52 2149.74 1549.52 Q2143.74 1549.52 2140.57 1544.94 Q2137.4 1540.33 2137.4 1531.6 Q2137.4 1523.41 2141.29 1518.55 Q2145.18 1513.66 2151.73 1513.66 Q2153.49 1513.66 2155.27 1514.01 Q2157.08 1514.36 2159.02 1515.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2179.32 1517.37 Q2175.71 1517.37 2173.88 1520.93 Q2172.08 1524.47 2172.08 1531.6 Q2172.08 1538.71 2173.88 1542.27 Q2175.71 1545.82 2179.32 1545.82 Q2182.95 1545.82 2184.76 1542.27 Q2186.59 1538.71 2186.59 1531.6 Q2186.59 1524.47 2184.76 1520.93 Q2182.95 1517.37 2179.32 1517.37 M2179.32 1513.66 Q2185.13 1513.66 2188.19 1518.27 Q2191.27 1522.85 2191.27 1531.6 Q2191.27 1540.33 2188.19 1544.94 Q2185.13 1549.52 2179.32 1549.52 Q2173.51 1549.52 2170.43 1544.94 Q2167.38 1540.33 2167.38 1531.6 Q2167.38 1522.85 2170.43 1518.27 Q2173.51 1513.66 2179.32 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1486.45 216.436,47.2441 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1345.72 235.334,1345.72 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1047.96 235.334,1047.96 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,750.205 235.334,750.205 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,452.448 235.334,452.448 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,154.692 235.334,154.692 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M63.9319 1331.52 Q60.3208 1331.52 58.4921 1335.08 Q56.6865 1338.62 56.6865 1345.75 Q56.6865 1352.86 58.4921 1356.42 Q60.3208 1359.97 63.9319 1359.97 Q67.5661 1359.97 69.3717 1356.42 Q71.2004 1352.86 71.2004 1345.75 Q71.2004 1338.62 69.3717 1335.08 Q67.5661 1331.52 63.9319 1331.52 M63.9319 1327.81 Q69.742 1327.81 72.7976 1332.42 Q75.8763 1337 75.8763 1345.75 Q75.8763 1354.48 72.7976 1359.09 Q69.742 1363.67 63.9319 1363.67 Q58.1217 1363.67 55.043 1359.09 Q51.9875 1354.48 51.9875 1345.75 Q51.9875 1337 55.043 1332.42 Q58.1217 1327.81 63.9319 1327.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M84.0938 1357.12 L88.978 1357.12 L88.978 1363 L84.0938 1363 L84.0938 1357.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M109.163 1331.52 Q105.552 1331.52 103.723 1335.08 Q101.918 1338.62 101.918 1345.75 Q101.918 1352.86 103.723 1356.42 Q105.552 1359.97 109.163 1359.97 Q112.797 1359.97 114.603 1356.42 Q116.432 1352.86 116.432 1345.75 Q116.432 1338.62 114.603 1335.08 Q112.797 1331.52 109.163 1331.52 M109.163 1327.81 Q114.973 1327.81 118.029 1332.42 Q121.107 1337 121.107 1345.75 Q121.107 1354.48 118.029 1359.09 Q114.973 1363.67 109.163 1363.67 Q103.353 1363.67 100.274 1359.09 Q97.2187 1354.48 97.2187 1345.75 Q97.2187 1337 100.274 1332.42 Q103.353 1327.81 109.163 1327.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M139.325 1331.52 Q135.714 1331.52 133.885 1335.08 Q132.08 1338.62 132.08 1345.75 Q132.08 1352.86 133.885 1356.42 Q135.714 1359.97 139.325 1359.97 Q142.959 1359.97 144.765 1356.42 Q146.593 1352.86 146.593 1345.75 Q146.593 1338.62 144.765 1335.08 Q142.959 1331.52 139.325 1331.52 M139.325 1327.81 Q145.135 1327.81 148.191 1332.42 Q151.269 1337 151.269 1345.75 Q151.269 1354.48 148.191 1359.09 Q145.135 1363.67 139.325 1363.67 Q133.515 1363.67 130.436 1359.09 Q127.381 1354.48 127.381 1345.75 Q127.381 1337 130.436 1332.42 Q133.515 1327.81 139.325 1327.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M159.533 1328.44 L177.89 1328.44 L177.89 1332.37 L163.816 1332.37 L163.816 1340.85 Q164.834 1340.5 165.853 1340.34 Q166.871 1340.15 167.89 1340.15 Q173.677 1340.15 177.056 1343.32 Q180.436 1346.49 180.436 1351.91 Q180.436 1357.49 176.964 1360.59 Q173.491 1363.67 167.172 1363.67 Q164.996 1363.67 162.728 1363.3 Q160.482 1362.93 158.075 1362.19 L158.075 1357.49 Q160.158 1358.62 162.38 1359.18 Q164.603 1359.73 167.079 1359.73 Q171.084 1359.73 173.422 1357.63 Q175.76 1355.52 175.76 1351.91 Q175.76 1348.3 173.422 1346.19 Q171.084 1344.09 167.079 1344.09 Q165.204 1344.09 163.329 1344.5 Q161.478 1344.92 159.533 1345.8 L159.533 1328.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M62.9365 1033.76 Q59.3254 1033.76 57.4967 1037.33 Q55.6912 1040.87 55.6912 1048 Q55.6912 1055.1 57.4967 1058.67 Q59.3254 1062.21 62.9365 1062.21 Q66.5707 1062.21 68.3763 1058.67 Q70.205 1055.1 70.205 1048 Q70.205 1040.87 68.3763 1037.33 Q66.5707 1033.76 62.9365 1033.76 M62.9365 1030.06 Q68.7467 1030.06 71.8022 1034.66 Q74.8809 1039.25 74.8809 1048 Q74.8809 1056.72 71.8022 1061.33 Q68.7467 1065.91 62.9365 1065.91 Q57.1264 1065.91 54.0477 1061.33 Q50.9921 1056.72 50.9921 1048 Q50.9921 1039.25 54.0477 1034.66 Q57.1264 1030.06 62.9365 1030.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M83.0984 1059.36 L87.9827 1059.36 L87.9827 1065.24 L83.0984 1065.24 L83.0984 1059.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M108.168 1033.76 Q104.557 1033.76 102.728 1037.33 Q100.922 1040.87 100.922 1048 Q100.922 1055.1 102.728 1058.67 Q104.557 1062.21 108.168 1062.21 Q111.802 1062.21 113.608 1058.67 Q115.436 1055.1 115.436 1048 Q115.436 1040.87 113.608 1037.33 Q111.802 1033.76 108.168 1033.76 M108.168 1030.06 Q113.978 1030.06 117.033 1034.66 Q120.112 1039.25 120.112 1048 Q120.112 1056.72 117.033 1061.33 Q113.978 1065.91 108.168 1065.91 Q102.358 1065.91 99.2789 1061.33 Q96.2234 1056.72 96.2234 1048 Q96.2234 1039.25 99.2789 1034.66 Q102.358 1030.06 108.168 1030.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M129.14 1061.31 L136.779 1061.31 L136.779 1034.94 L128.469 1036.61 L128.469 1032.35 L136.732 1030.68 L141.408 1030.68 L141.408 1061.31 L149.047 1061.31 L149.047 1065.24 L129.14 1065.24 L129.14 1061.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M168.491 1033.76 Q164.88 1033.76 163.052 1037.33 Q161.246 1040.87 161.246 1048 Q161.246 1055.1 163.052 1058.67 Q164.88 1062.21 168.491 1062.21 Q172.126 1062.21 173.931 1058.67 Q175.76 1055.1 175.76 1048 Q175.76 1040.87 173.931 1037.33 Q172.126 1033.76 168.491 1033.76 M168.491 1030.06 Q174.302 1030.06 177.357 1034.66 Q180.436 1039.25 180.436 1048 Q180.436 1056.72 177.357 1061.33 Q174.302 1065.91 168.491 1065.91 Q162.681 1065.91 159.603 1061.33 Q156.547 1056.72 156.547 1048 Q156.547 1039.25 159.603 1034.66 Q162.681 1030.06 168.491 1030.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M63.9319 736.004 Q60.3208 736.004 58.4921 739.569 Q56.6865 743.11 56.6865 750.24 Q56.6865 757.346 58.4921 760.911 Q60.3208 764.453 63.9319 764.453 Q67.5661 764.453 69.3717 760.911 Q71.2004 757.346 71.2004 750.24 Q71.2004 743.11 69.3717 739.569 Q67.5661 736.004 63.9319 736.004 M63.9319 732.3 Q69.742 732.3 72.7976 736.907 Q75.8763 741.49 75.8763 750.24 Q75.8763 758.967 72.7976 763.573 Q69.742 768.156 63.9319 768.156 Q58.1217 768.156 55.043 763.573 Q51.9875 758.967 51.9875 750.24 Q51.9875 741.49 55.043 736.907 Q58.1217 732.3 63.9319 732.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M84.0938 761.606 L88.978 761.606 L88.978 767.485 L84.0938 767.485 L84.0938 761.606 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M109.163 736.004 Q105.552 736.004 103.723 739.569 Q101.918 743.11 101.918 750.24 Q101.918 757.346 103.723 760.911 Q105.552 764.453 109.163 764.453 Q112.797 764.453 114.603 760.911 Q116.432 757.346 116.432 750.24 Q116.432 743.11 114.603 739.569 Q112.797 736.004 109.163 736.004 M109.163 732.3 Q114.973 732.3 118.029 736.907 Q121.107 741.49 121.107 750.24 Q121.107 758.967 118.029 763.573 Q114.973 768.156 109.163 768.156 Q103.353 768.156 100.274 763.573 Q97.2187 758.967 97.2187 750.24 Q97.2187 741.49 100.274 736.907 Q103.353 732.3 109.163 732.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M130.135 763.55 L137.774 763.55 L137.774 737.184 L129.464 738.851 L129.464 734.592 L137.728 732.925 L142.404 732.925 L142.404 763.55 L150.043 763.55 L150.043 767.485 L130.135 767.485 L130.135 763.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M159.533 732.925 L177.89 732.925 L177.89 736.86 L163.816 736.86 L163.816 745.332 Q164.834 744.985 165.853 744.823 Q166.871 744.638 167.89 744.638 Q173.677 744.638 177.056 747.809 Q180.436 750.981 180.436 756.397 Q180.436 761.976 176.964 765.078 Q173.491 768.156 167.172 768.156 Q164.996 768.156 162.728 767.786 Q160.482 767.416 158.075 766.675 L158.075 761.976 Q160.158 763.11 162.38 763.666 Q164.603 764.221 167.079 764.221 Q171.084 764.221 173.422 762.115 Q175.76 760.008 175.76 756.397 Q175.76 752.786 173.422 750.68 Q171.084 748.573 167.079 748.573 Q165.204 748.573 163.329 748.99 Q161.478 749.407 159.533 750.286 L159.533 732.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M62.9365 438.247 Q59.3254 438.247 57.4967 441.812 Q55.6912 445.354 55.6912 452.483 Q55.6912 459.59 57.4967 463.154 Q59.3254 466.696 62.9365 466.696 Q66.5707 466.696 68.3763 463.154 Q70.205 459.59 70.205 452.483 Q70.205 445.354 68.3763 441.812 Q66.5707 438.247 62.9365 438.247 M62.9365 434.543 Q68.7467 434.543 71.8022 439.15 Q74.8809 443.733 74.8809 452.483 Q74.8809 461.21 71.8022 465.816 Q68.7467 470.4 62.9365 470.4 Q57.1264 470.4 54.0477 465.816 Q50.9921 461.21 50.9921 452.483 Q50.9921 443.733 54.0477 439.15 Q57.1264 434.543 62.9365 434.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M83.0984 463.849 L87.9827 463.849 L87.9827 469.728 L83.0984 469.728 L83.0984 463.849 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M108.168 438.247 Q104.557 438.247 102.728 441.812 Q100.922 445.354 100.922 452.483 Q100.922 459.59 102.728 463.154 Q104.557 466.696 108.168 466.696 Q111.802 466.696 113.608 463.154 Q115.436 459.59 115.436 452.483 Q115.436 445.354 113.608 441.812 Q111.802 438.247 108.168 438.247 M108.168 434.543 Q113.978 434.543 117.033 439.15 Q120.112 443.733 120.112 452.483 Q120.112 461.21 117.033 465.816 Q113.978 470.4 108.168 470.4 Q102.358 470.4 99.2789 465.816 Q96.2234 461.21 96.2234 452.483 Q96.2234 443.733 99.2789 439.15 Q102.358 434.543 108.168 434.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M132.357 465.793 L148.677 465.793 L148.677 469.728 L126.732 469.728 L126.732 465.793 Q129.394 463.039 133.978 458.409 Q138.584 453.756 139.765 452.414 Q142.01 449.891 142.89 448.155 Q143.793 446.395 143.793 444.705 Q143.793 441.951 141.848 440.215 Q139.927 438.479 136.825 438.479 Q134.626 438.479 132.172 439.243 Q129.742 440.006 126.964 441.557 L126.964 436.835 Q129.788 435.701 132.242 435.122 Q134.695 434.543 136.732 434.543 Q142.103 434.543 145.297 437.229 Q148.492 439.914 148.492 444.405 Q148.492 446.534 147.681 448.455 Q146.894 450.354 144.788 452.946 Q144.209 453.617 141.107 456.835 Q138.006 460.029 132.357 465.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M168.491 438.247 Q164.88 438.247 163.052 441.812 Q161.246 445.354 161.246 452.483 Q161.246 459.59 163.052 463.154 Q164.88 466.696 168.491 466.696 Q172.126 466.696 173.931 463.154 Q175.76 459.59 175.76 452.483 Q175.76 445.354 173.931 441.812 Q172.126 438.247 168.491 438.247 M168.491 434.543 Q174.302 434.543 177.357 439.15 Q180.436 443.733 180.436 452.483 Q180.436 461.21 177.357 465.816 Q174.302 470.4 168.491 470.4 Q162.681 470.4 159.603 465.816 Q156.547 461.21 156.547 452.483 Q156.547 443.733 159.603 439.15 Q162.681 434.543 168.491 434.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M63.9319 140.49 Q60.3208 140.49 58.4921 144.055 Q56.6865 147.597 56.6865 154.727 Q56.6865 161.833 58.4921 165.398 Q60.3208 168.939 63.9319 168.939 Q67.5661 168.939 69.3717 165.398 Q71.2004 161.833 71.2004 154.727 Q71.2004 147.597 69.3717 144.055 Q67.5661 140.49 63.9319 140.49 M63.9319 136.787 Q69.742 136.787 72.7976 141.393 Q75.8763 145.977 75.8763 154.727 Q75.8763 163.453 72.7976 168.06 Q69.742 172.643 63.9319 172.643 Q58.1217 172.643 55.043 168.06 Q51.9875 163.453 51.9875 154.727 Q51.9875 145.977 55.043 141.393 Q58.1217 136.787 63.9319 136.787 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M84.0938 166.092 L88.978 166.092 L88.978 171.972 L84.0938 171.972 L84.0938 166.092 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M109.163 140.49 Q105.552 140.49 103.723 144.055 Q101.918 147.597 101.918 154.727 Q101.918 161.833 103.723 165.398 Q105.552 168.939 109.163 168.939 Q112.797 168.939 114.603 165.398 Q116.432 161.833 116.432 154.727 Q116.432 147.597 114.603 144.055 Q112.797 140.49 109.163 140.49 M109.163 136.787 Q114.973 136.787 118.029 141.393 Q121.107 145.977 121.107 154.727 Q121.107 163.453 118.029 168.06 Q114.973 172.643 109.163 172.643 Q103.353 172.643 100.274 168.06 Q97.2187 163.453 97.2187 154.727 Q97.2187 145.977 100.274 141.393 Q103.353 136.787 109.163 136.787 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M133.353 168.037 L149.672 168.037 L149.672 171.972 L127.728 171.972 L127.728 168.037 Q130.39 165.282 134.973 160.652 Q139.58 156 140.76 154.657 Q143.006 152.134 143.885 150.398 Q144.788 148.639 144.788 146.949 Q144.788 144.194 142.843 142.458 Q140.922 140.722 137.82 140.722 Q135.621 140.722 133.168 141.486 Q130.737 142.25 127.959 143.801 L127.959 139.078 Q130.783 137.944 133.237 137.366 Q135.691 136.787 137.728 136.787 Q143.098 136.787 146.293 139.472 Q149.487 142.157 149.487 146.648 Q149.487 148.777 148.677 150.699 Q147.89 152.597 145.783 155.189 Q145.205 155.861 142.103 159.078 Q139.001 162.273 133.353 168.037 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M159.533 137.412 L177.89 137.412 L177.89 141.347 L163.816 141.347 L163.816 149.819 Q164.834 149.472 165.853 149.31 Q166.871 149.125 167.89 149.125 Q173.677 149.125 177.056 152.296 Q180.436 155.467 180.436 160.884 Q180.436 166.463 176.964 169.564 Q173.491 172.643 167.172 172.643 Q164.996 172.643 162.728 172.273 Q160.482 171.902 158.075 171.162 L158.075 166.463 Q160.158 167.597 162.38 168.152 Q164.603 168.708 167.079 168.708 Q171.084 168.708 173.422 166.601 Q175.76 164.495 175.76 160.884 Q175.76 157.273 173.422 155.166 Q171.084 153.06 167.079 153.06 Q165.204 153.06 163.329 153.477 Q161.478 153.893 159.533 154.773 L159.533 137.412 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip232)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.898,1390.54 308.888,1359.09 340.879,1324.98 372.869,1288.17 404.859,1248.64 436.85,1206.44 468.84,1161.6 500.831,1114.24 532.821,1064.49 564.812,1012.54 596.802,958.598 628.792,902.947 660.783,845.895 692.773,787.796 724.764,729.045 756.754,670.069 788.744,611.329 820.735,553.312 852.725,496.522 884.716,441.479 916.706,388.705 948.697,338.72 980.687,292.034 1012.68,249.135 1044.67,210.482 1076.66,176.5 1108.65,147.567 1140.64,124.009 1172.63,106.098 1204.62,94.0406 1236.61,87.9763 1268.6,87.9763 1300.59,94.0406 1332.58,106.098 1364.57,124.009 1396.56,147.567 1428.55,176.5 1460.54,210.482 1492.53,249.135 1524.52,292.034 1556.51,338.72 1588.5,388.705 1620.5,441.479 1652.49,496.522 1684.48,553.312 1716.47,611.329 1748.46,670.069 1780.45,729.045 1812.44,787.796 1844.43,845.895 1876.42,902.947 1908.41,958.598 1940.4,1012.54 1972.39,1064.49 2004.38,1114.24 2036.37,1161.6 2068.36,1206.44 2100.35,1248.64 2132.34,1288.17 2164.33,1324.98 2196.32,1359.09 2228.31,1390.54 2260.3,1419.38 2292.29,1445.72 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M2015.48 198.898 L2281.55 198.898 L2281.55 95.2176 L2015.48 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2015.48,198.898 2281.55,198.898 2281.55,95.2176 2015.48,95.2176 2015.48,198.898 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2039.22,147.058 2181.64,147.058 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M2219.22 166.745 Q2217.42 171.375 2215.7 172.787 Q2213.99 174.199 2211.12 174.199 L2207.72 174.199 L2207.72 170.634 L2210.22 170.634 Q2211.98 170.634 2212.95 169.8 Q2213.92 168.967 2215.1 165.865 L2215.86 163.921 L2205.38 138.412 L2209.89 138.412 L2217.99 158.689 L2226.1 138.412 L2230.61 138.412 L2219.22 166.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2237.9 160.402 L2245.54 160.402 L2245.54 134.037 L2237.23 135.703 L2237.23 131.444 L2245.49 129.778 L2250.17 129.778 L2250.17 160.402 L2257.81 160.402 L2257.81 164.338 L2237.9 164.338 L2237.9 160.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Create-the-Circuit","page":"Quantum Circuit Born Machine","title":"Create the Circuit","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"A quantum circuit born machine looks like the following:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"(Image: differentiable ciruit)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"It is composited by two different layers: rotation layer and entangler layer.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Rotation-Layer","page":"Quantum Circuit Born Machine","title":"Rotation Layer","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Arbitrary rotation is built with Rotation Gate on Z, X, Z axis with parameters.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Rz(theta) cdot Rx(theta) cdot Rz(theta)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Since our input will be a 0dots 0rangle state. The first layer of arbitrary rotation can just use Rx(theta) cdot Rz(theta) and the last layer of arbitrary rotation could just use Rz(theta)cdot Rx(theta)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In 幺, every Hilbert operator is a block type, this ncludes all quantum gates and quantum oracles. In general, operators appears in a quantum circuit can be divided into Composite Blocks and Primitive Blocks.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We follow the low abstraction principle and thus each block represents a certain approach of calculation. The simplest Composite Block is a Chain Block, which chains other blocks (oracles) with the same number of qubits together. It is just a simple mathematical composition of operators with same size. e.g.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"textchain(X Y Z) iff X cdot Y cdot Z","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can construct an arbitrary rotation block by chain Rz, Rx, Rz together.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"chain(Rz(0.0), Rx(0.0), Rz(0.0))","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"nqubits: 1\nchain\n├─ rot(Z, 0.0)\n├─ rot(X, 0.0)\n└─ rot(Z, 0.0)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Rx, Rz will construct new rotation gate, which are just shorthands for rot(X, 0.0), etc.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Then let's chain them up","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"layer(nbit::Int, x::Symbol) = layer(nbit, Val(x))\nlayer(nbit::Int, ::Val{:first}) = chain(nbit, put(i=>chain(Rx(0), Rz(0))) for i = 1:nbit);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We do not need to feed the first n parameter into put here. All factory methods can be lazy evaluate the first arguements, which is the number of qubits. It will return a lambda function that requires a single interger input. The instance of desired block will only be constructed until all the information is filled. When you filled all the information in somewhere of the declaration, 幺 will be able to infer the others. We will now define the rest of rotation layers","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"layer(nbit::Int, ::Val{:last}) = chain(nbit, put(i=>chain(Rz(0), Rx(0))) for i = 1:nbit)\nlayer(nbit::Int, ::Val{:mid}) = chain(nbit, put(i=>chain(Rz(0), Rx(0), Rz(0))) for i = 1:nbit);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Entangler","page":"Quantum Circuit Born Machine","title":"Entangler","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Another component of quantum circuit born machine are several CNOT operators applied on different qubits.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"entangler(pairs) = chain(control(ctrl, target=>X) for (ctrl, target) in pairs);","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We can then define such a born machine","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function build_circuit(n, nlayers, pairs)\n    circuit = chain(n)\n    push!(circuit, layer(n, :first))\n    for i in 2:nlayers\n        push!(circuit, cache(entangler(pairs)))\n        push!(circuit, layer(n, :mid))\n    end\n    push!(circuit, cache(entangler(pairs)))\n    push!(circuit, layer(n, :last))\n    return circuit\nend","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"build_circuit (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We use the method cache here to tag the entangler block that it should be cached after its first run, because it is actually a constant oracle. Let's see what will be constructed","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"build_circuit(4, 1, [1=>2, 2=>3, 3=>4])","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"nqubits: 4\nchain\n├─ chain\n│  ├─ put on (1)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  ├─ put on (2)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  ├─ put on (3)\n│  │  └─ chain\n│  │     ├─ rot(X, 0.0)\n│  │     └─ rot(Z, 0.0)\n│  └─ put on (4)\n│     └─ chain\n│        ├─ rot(X, 0.0)\n│        └─ rot(Z, 0.0)\n├─ [cached] chain\n│     ├─ control(1)\n│     │  └─ (2,) X\n│     ├─ control(2)\n│     │  └─ (3,) X\n│     └─ control(3)\n│        └─ (4,) X\n└─ chain\n   ├─ put on (1)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   ├─ put on (2)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   ├─ put on (3)\n   │  └─ chain\n   │     ├─ rot(Z, 0.0)\n   │     └─ rot(X, 0.0)\n   └─ put on (4)\n      └─ chain\n         ├─ rot(Z, 0.0)\n         └─ rot(X, 0.0)\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#MMD-Loss-and-Gradients","page":"Quantum Circuit Born Machine","title":"MMD Loss & Gradients","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"The MMD loss is describe below:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"beginaligned\nmathcalL = left sum_x p theta(x) phi(x) - sum_x pi(x) phi(x) right^2\n            = langle K(x y) rangle_x sim p_theta ysim p_theta - 2 langle K(x y) rangle_xsim p_theta ysim pi + langle K(x y) rangle_xsimpi ysimpi\nendaligned","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"We will use a squared exponential kernel here.","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"struct RBFKernel\n    σ::Float64\n    m::Matrix{Float64}\nend\n\nfunction RBFKernel(σ::Float64, space)\n    dx2 = (space .- space').^2\n    return RBFKernel(σ, exp.(-1/2σ * dx2))\nend\n\nkexpect(κ::RBFKernel, x, y) = x' * κ.m * y","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"kexpect (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"There are two different way to define the loss:","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"In simulation we can use the probability distribution of the state directly","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"get_prob(qcbm) = probs(zero_state(nqubits(qcbm)) |> qcbm)\n\nfunction loss(κ, c, target)\n    p = get_prob(c) - target\n    return kexpect(κ, p, p)\nend","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"loss (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Or if you want to simulate the whole process with measurement (which is entirely physical), you should define the loss with measurement results, for convenience we directly use the simulated results as our loss","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html#Gradients","page":"Quantum Circuit Born Machine","title":"Gradients","text":"","category":"section"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"the gradient of MMD loss is","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"beginaligned\nfracpartial mathcalLpartial theta^i_l = langle K(x y) rangle_xsim p_theta^+ ysim p_theta - langle K(x y) rangle_xsim p_theta^- ysim p_theta\n- langle K(x y) rangle _xsim p_theta^+ ysimpi + langle K(x y) rangle_xsim p_theta^- ysimpi\nendaligned","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"which can be implemented as","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"function gradient(qcbm, κ, ptrain)\n    n = nqubits(qcbm)\n    prob = get_prob(qcbm)\n    grad = zeros(Float64, nparameters(qcbm))\n\n    count = 1\n    for k in 1:2:length(qcbm), each_line in qcbm[k], gate in content(each_line)\n        dispatch!(+, gate, π/2)\n        prob_pos = probs(zero_state(n) |> qcbm)\n\n        dispatch!(-, gate, π)\n        prob_neg = probs(zero_state(n) |> qcbm)\n\n        dispatch!(+, gate, π/2) # set back\n\n        grad_pos = kexpect(κ, prob, prob_pos) - kexpect(κ, prob, prob_neg)\n        grad_neg = kexpect(κ, ptrain, prob_pos) - kexpect(κ, ptrain, prob_neg)\n        grad[count] = grad_pos - grad_neg\n        count += 1\n    end\n    return grad\nend","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"gradient (generic function with 1 method)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"Now let's setup the training","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"import Optimisers\nqcbm = build_circuit(6, 10, [1=>2, 3=>4, 5=>6, 2=>3, 4=>5, 6=>1])\ndispatch!(qcbm, :random) # initialize the parameters\n\nκ = RBFKernel(0.25, 0:2^6-1)\npg = gaussian_pdf(1:1<<6, 1<<5-0.5, 1<<4);\nopt = Optimisers.setup(Optimisers.ADAM(0.01), parameters(qcbm));\n\nfunction train(qcbm, κ, opt, target)\n    history = Float64[]\n    for _ in 1:100\n        push!(history, loss(κ, qcbm, target))\n        ps = parameters(qcbm)\n        Optimisers.update!(opt, ps, gradient(qcbm, κ, target))\n        dispatch!(qcbm, ps)\n    end\n    return history\nend\n\nhistory = train(qcbm, κ, opt, pg)\ntrained_pg = probs(zero_state(nqubits(qcbm)) |> qcbm)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"64-element Vector{Float64}:\n 0.004325753672883842\n 0.004809288981388637\n 0.005343955943160174\n 0.0059828445868545\n 0.006650487515518758\n 0.0073251471759878005\n 0.00809305850499482\n 0.008968166588369781\n 0.009732093153941124\n 0.010446645701074059\n 0.011522445767397187\n 0.012407815149194899\n 0.013434657542493789\n 0.014379272056723999\n 0.015324609960667712\n 0.016391572954458304\n 0.01735589115479334\n 0.018226199801256095\n 0.01929971037644516\n 0.020212182079373274\n 0.021089874415171805\n 0.021840354205719333\n 0.02260766939471365\n 0.023473131828612066\n 0.024216602652870296\n 0.024572590122921244\n 0.025162038098588704\n 0.02553717035326974\n 0.025773231427538127\n 0.02604300748164771\n 0.02613471204403263\n 0.026112603622769456\n 0.026055378672243567\n 0.0259165242086804\n 0.025404531278722883\n 0.02510779147195523\n 0.02453817392540539\n 0.024071110746203144\n 0.023351760532931615\n 0.022750868945474238\n 0.021931569688167257\n 0.021095492026975547\n 0.020235003469557398\n 0.01928178169126925\n 0.01839261032700247\n 0.017336393679358762\n 0.01633960256616451\n 0.015465586040344523\n 0.014440801880786395\n 0.013377994020307269\n 0.01239281374410882\n 0.011440952590457156\n 0.01051654277221679\n 0.00969931795169636\n 0.008793921607602994\n 0.00811633155092302\n 0.007303456056812086\n 0.0065625405831562355\n 0.005900856986801528\n 0.005357349247928561\n 0.00473896986731482\n 0.004277824206117947\n 0.0037741256331175997\n 0.0032372377153637518","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"The history of training looks like below","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"title!(\"training history\")\nxlabel!(\"steps\"); ylabel!(\"loss\")\nPlots.plot(history)","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip260\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip260)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip261\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip260)\" d=\"M216.436 1486.45 L2352.76 1486.45 L2352.76 47.2441 L216.436 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip262\">\n    <rect x=\"216\" y=\"47\" width=\"2137\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"256.54,1486.45 256.54,47.2441 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"765.479,1486.45 765.479,47.2441 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1274.42,1486.45 1274.42,47.2441 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1783.36,1486.45 1783.36,47.2441 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2292.29,1486.45 2292.29,47.2441 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,1445.73 2352.76,1445.73 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,1104.48 2352.76,1104.48 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,763.225 2352.76,763.225 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,421.971 2352.76,421.971 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"216.436,80.7172 2352.76,80.7172 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"256.54,1486.45 256.54,1467.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"765.479,1486.45 765.479,1467.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1274.42,1486.45 1274.42,1467.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1783.36,1486.45 1783.36,1467.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2292.29,1486.45 2292.29,1467.55 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M256.54 1517.37 Q252.929 1517.37 251.1 1520.93 Q249.295 1524.47 249.295 1531.6 Q249.295 1538.71 251.1 1542.27 Q252.929 1545.82 256.54 1545.82 Q260.174 1545.82 261.98 1542.27 Q263.809 1538.71 263.809 1531.6 Q263.809 1524.47 261.98 1520.93 Q260.174 1517.37 256.54 1517.37 M256.54 1513.66 Q262.35 1513.66 265.406 1518.27 Q268.485 1522.85 268.485 1531.6 Q268.485 1540.33 265.406 1544.94 Q262.35 1549.52 256.54 1549.52 Q250.73 1549.52 247.651 1544.94 Q244.596 1540.33 244.596 1531.6 Q244.596 1522.85 247.651 1518.27 Q250.73 1513.66 256.54 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M744.75 1544.91 L761.069 1544.91 L761.069 1548.85 L739.125 1548.85 L739.125 1544.91 Q741.787 1542.16 746.37 1537.53 Q750.976 1532.88 752.157 1531.53 Q754.402 1529.01 755.282 1527.27 Q756.185 1525.51 756.185 1523.82 Q756.185 1521.07 754.24 1519.33 Q752.319 1517.6 749.217 1517.6 Q747.018 1517.6 744.564 1518.36 Q742.134 1519.13 739.356 1520.68 L739.356 1515.95 Q742.18 1514.82 744.634 1514.24 Q747.088 1513.66 749.125 1513.66 Q754.495 1513.66 757.689 1516.35 Q760.884 1519.03 760.884 1523.52 Q760.884 1525.65 760.074 1527.57 Q759.287 1529.47 757.18 1532.07 Q756.601 1532.74 753.5 1535.95 Q750.398 1539.15 744.75 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M770.93 1514.29 L789.286 1514.29 L789.286 1518.22 L775.212 1518.22 L775.212 1526.7 Q776.231 1526.35 777.249 1526.19 Q778.268 1526 779.286 1526 Q785.073 1526 788.453 1529.17 Q791.833 1532.34 791.833 1537.76 Q791.833 1543.34 788.36 1546.44 Q784.888 1549.52 778.569 1549.52 Q776.393 1549.52 774.124 1549.15 Q771.879 1548.78 769.472 1548.04 L769.472 1543.34 Q771.555 1544.47 773.777 1545.03 Q775.999 1545.58 778.476 1545.58 Q782.481 1545.58 784.819 1543.48 Q787.157 1541.37 787.157 1537.76 Q787.157 1534.15 784.819 1532.04 Q782.481 1529.94 778.476 1529.94 Q776.601 1529.94 774.726 1530.35 Q772.874 1530.77 770.93 1531.65 L770.93 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1249.12 1514.29 L1267.47 1514.29 L1267.47 1518.22 L1253.4 1518.22 L1253.4 1526.7 Q1254.42 1526.35 1255.44 1526.19 Q1256.45 1526 1257.47 1526 Q1263.26 1526 1266.64 1529.17 Q1270.02 1532.34 1270.02 1537.76 Q1270.02 1543.34 1266.55 1546.44 Q1263.07 1549.52 1256.76 1549.52 Q1254.58 1549.52 1252.31 1549.15 Q1250.07 1548.78 1247.66 1548.04 L1247.66 1543.34 Q1249.74 1544.47 1251.96 1545.03 Q1254.19 1545.58 1256.66 1545.58 Q1260.67 1545.58 1263.01 1543.48 Q1265.34 1541.37 1265.34 1537.76 Q1265.34 1534.15 1263.01 1532.04 Q1260.67 1529.94 1256.66 1529.94 Q1254.79 1529.94 1252.91 1530.35 Q1251.06 1530.77 1249.12 1531.65 L1249.12 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1289.23 1517.37 Q1285.62 1517.37 1283.79 1520.93 Q1281.99 1524.47 1281.99 1531.6 Q1281.99 1538.71 1283.79 1542.27 Q1285.62 1545.82 1289.23 1545.82 Q1292.87 1545.82 1294.67 1542.27 Q1296.5 1538.71 1296.5 1531.6 Q1296.5 1524.47 1294.67 1520.93 Q1292.87 1517.37 1289.23 1517.37 M1289.23 1513.66 Q1295.04 1513.66 1298.1 1518.27 Q1301.18 1522.85 1301.18 1531.6 Q1301.18 1540.33 1298.1 1544.94 Q1295.04 1549.52 1289.23 1549.52 Q1283.42 1549.52 1280.34 1544.94 Q1277.29 1540.33 1277.29 1531.6 Q1277.29 1522.85 1280.34 1518.27 Q1283.42 1513.66 1289.23 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1757.21 1514.29 L1779.43 1514.29 L1779.43 1516.28 L1766.89 1548.85 L1762 1548.85 L1773.81 1518.22 L1757.21 1518.22 L1757.21 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1788.6 1514.29 L1806.95 1514.29 L1806.95 1518.22 L1792.88 1518.22 L1792.88 1526.7 Q1793.9 1526.35 1794.92 1526.19 Q1795.94 1526 1796.96 1526 Q1802.74 1526 1806.12 1529.17 Q1809.5 1532.34 1809.5 1537.76 Q1809.5 1543.34 1806.03 1546.44 Q1802.56 1549.52 1796.24 1549.52 Q1794.06 1549.52 1791.79 1549.15 Q1789.55 1548.78 1787.14 1548.04 L1787.14 1543.34 Q1789.22 1544.47 1791.45 1545.03 Q1793.67 1545.58 1796.14 1545.58 Q1800.15 1545.58 1802.49 1543.48 Q1804.83 1541.37 1804.83 1537.76 Q1804.83 1534.15 1802.49 1532.04 Q1800.15 1529.94 1796.14 1529.94 Q1794.27 1529.94 1792.39 1530.35 Q1790.54 1530.77 1788.6 1531.65 L1788.6 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2251.9 1544.91 L2259.54 1544.91 L2259.54 1518.55 L2251.23 1520.21 L2251.23 1515.95 L2259.49 1514.29 L2264.17 1514.29 L2264.17 1544.91 L2271.81 1544.91 L2271.81 1548.85 L2251.9 1548.85 L2251.9 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2291.25 1517.37 Q2287.64 1517.37 2285.81 1520.93 Q2284.01 1524.47 2284.01 1531.6 Q2284.01 1538.71 2285.81 1542.27 Q2287.64 1545.82 2291.25 1545.82 Q2294.89 1545.82 2296.69 1542.27 Q2298.52 1538.71 2298.52 1531.6 Q2298.52 1524.47 2296.69 1520.93 Q2294.89 1517.37 2291.25 1517.37 M2291.25 1513.66 Q2297.06 1513.66 2300.12 1518.27 Q2303.2 1522.85 2303.2 1531.6 Q2303.2 1540.33 2300.12 1544.94 Q2297.06 1549.52 2291.25 1549.52 Q2285.44 1549.52 2282.36 1544.94 Q2279.31 1540.33 2279.31 1531.6 Q2279.31 1522.85 2282.36 1518.27 Q2285.44 1513.66 2291.25 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2321.41 1517.37 Q2317.8 1517.37 2315.97 1520.93 Q2314.17 1524.47 2314.17 1531.6 Q2314.17 1538.71 2315.97 1542.27 Q2317.8 1545.82 2321.41 1545.82 Q2325.05 1545.82 2326.85 1542.27 Q2328.68 1538.71 2328.68 1531.6 Q2328.68 1524.47 2326.85 1520.93 Q2325.05 1517.37 2321.41 1517.37 M2321.41 1513.66 Q2327.22 1513.66 2330.28 1518.27 Q2333.36 1522.85 2333.36 1531.6 Q2333.36 1540.33 2330.28 1544.94 Q2327.22 1549.52 2321.41 1549.52 Q2315.6 1549.52 2312.53 1544.94 Q2309.47 1540.33 2309.47 1531.6 Q2309.47 1522.85 2312.53 1518.27 Q2315.6 1513.66 2321.41 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1486.45 216.436,47.2441 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1445.73 235.334,1445.73 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,1104.48 235.334,1104.48 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,763.225 235.334,763.225 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,421.971 235.334,421.971 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"216.436,80.7172 235.334,80.7172 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M62.9365 1431.53 Q59.3254 1431.53 57.4967 1435.1 Q55.6912 1438.64 55.6912 1445.77 Q55.6912 1452.87 57.4967 1456.44 Q59.3254 1459.98 62.9365 1459.98 Q66.5707 1459.98 68.3763 1456.44 Q70.205 1452.87 70.205 1445.77 Q70.205 1438.64 68.3763 1435.1 Q66.5707 1431.53 62.9365 1431.53 M62.9365 1427.83 Q68.7467 1427.83 71.8022 1432.43 Q74.8809 1437.02 74.8809 1445.77 Q74.8809 1454.49 71.8022 1459.1 Q68.7467 1463.68 62.9365 1463.68 Q57.1264 1463.68 54.0477 1459.1 Q50.9921 1454.49 50.9921 1445.77 Q50.9921 1437.02 54.0477 1432.43 Q57.1264 1427.83 62.9365 1427.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M83.0984 1457.13 L87.9827 1457.13 L87.9827 1463.01 L83.0984 1463.01 L83.0984 1457.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M108.168 1431.53 Q104.557 1431.53 102.728 1435.1 Q100.922 1438.64 100.922 1445.77 Q100.922 1452.87 102.728 1456.44 Q104.557 1459.98 108.168 1459.98 Q111.802 1459.98 113.608 1456.44 Q115.436 1452.87 115.436 1445.77 Q115.436 1438.64 113.608 1435.1 Q111.802 1431.53 108.168 1431.53 M108.168 1427.83 Q113.978 1427.83 117.033 1432.43 Q120.112 1437.02 120.112 1445.77 Q120.112 1454.49 117.033 1459.1 Q113.978 1463.68 108.168 1463.68 Q102.358 1463.68 99.2789 1459.1 Q96.2234 1454.49 96.2234 1445.77 Q96.2234 1437.02 99.2789 1432.43 Q102.358 1427.83 108.168 1427.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M138.33 1431.53 Q134.719 1431.53 132.89 1435.1 Q131.084 1438.64 131.084 1445.77 Q131.084 1452.87 132.89 1456.44 Q134.719 1459.98 138.33 1459.98 Q141.964 1459.98 143.769 1456.44 Q145.598 1452.87 145.598 1445.77 Q145.598 1438.64 143.769 1435.1 Q141.964 1431.53 138.33 1431.53 M138.33 1427.83 Q144.14 1427.83 147.195 1432.43 Q150.274 1437.02 150.274 1445.77 Q150.274 1454.49 147.195 1459.1 Q144.14 1463.68 138.33 1463.68 Q132.519 1463.68 129.441 1459.1 Q126.385 1454.49 126.385 1445.77 Q126.385 1437.02 129.441 1432.43 Q132.519 1427.83 138.33 1427.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M168.491 1431.53 Q164.88 1431.53 163.052 1435.1 Q161.246 1438.64 161.246 1445.77 Q161.246 1452.87 163.052 1456.44 Q164.88 1459.98 168.491 1459.98 Q172.126 1459.98 173.931 1456.44 Q175.76 1452.87 175.76 1445.77 Q175.76 1438.64 173.931 1435.1 Q172.126 1431.53 168.491 1431.53 M168.491 1427.83 Q174.302 1427.83 177.357 1432.43 Q180.436 1437.02 180.436 1445.77 Q180.436 1454.49 177.357 1459.1 Q174.302 1463.68 168.491 1463.68 Q162.681 1463.68 159.603 1459.1 Q156.547 1454.49 156.547 1445.77 Q156.547 1437.02 159.603 1432.43 Q162.681 1427.83 168.491 1427.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M63.9319 1090.28 Q60.3208 1090.28 58.4921 1093.84 Q56.6865 1097.38 56.6865 1104.51 Q56.6865 1111.62 58.4921 1115.18 Q60.3208 1118.73 63.9319 1118.73 Q67.5661 1118.73 69.3717 1115.18 Q71.2004 1111.62 71.2004 1104.51 Q71.2004 1097.38 69.3717 1093.84 Q67.5661 1090.28 63.9319 1090.28 M63.9319 1086.57 Q69.742 1086.57 72.7976 1091.18 Q75.8763 1095.76 75.8763 1104.51 Q75.8763 1113.24 72.7976 1117.85 Q69.742 1122.43 63.9319 1122.43 Q58.1217 1122.43 55.043 1117.85 Q51.9875 1113.24 51.9875 1104.51 Q51.9875 1095.76 55.043 1091.18 Q58.1217 1086.57 63.9319 1086.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M84.0938 1115.88 L88.978 1115.88 L88.978 1121.76 L84.0938 1121.76 L84.0938 1115.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M109.163 1090.28 Q105.552 1090.28 103.723 1093.84 Q101.918 1097.38 101.918 1104.51 Q101.918 1111.62 103.723 1115.18 Q105.552 1118.73 109.163 1118.73 Q112.797 1118.73 114.603 1115.18 Q116.432 1111.62 116.432 1104.51 Q116.432 1097.38 114.603 1093.84 Q112.797 1090.28 109.163 1090.28 M109.163 1086.57 Q114.973 1086.57 118.029 1091.18 Q121.107 1095.76 121.107 1104.51 Q121.107 1113.24 118.029 1117.85 Q114.973 1122.43 109.163 1122.43 Q103.353 1122.43 100.274 1117.85 Q97.2187 1113.24 97.2187 1104.51 Q97.2187 1095.76 100.274 1091.18 Q103.353 1086.57 109.163 1086.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M139.325 1090.28 Q135.714 1090.28 133.885 1093.84 Q132.08 1097.38 132.08 1104.51 Q132.08 1111.62 133.885 1115.18 Q135.714 1118.73 139.325 1118.73 Q142.959 1118.73 144.765 1115.18 Q146.593 1111.62 146.593 1104.51 Q146.593 1097.38 144.765 1093.84 Q142.959 1090.28 139.325 1090.28 M139.325 1086.57 Q145.135 1086.57 148.191 1091.18 Q151.269 1095.76 151.269 1104.51 Q151.269 1113.24 148.191 1117.85 Q145.135 1122.43 139.325 1122.43 Q133.515 1122.43 130.436 1117.85 Q127.381 1113.24 127.381 1104.51 Q127.381 1095.76 130.436 1091.18 Q133.515 1086.57 139.325 1086.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M159.533 1087.2 L177.89 1087.2 L177.89 1091.13 L163.816 1091.13 L163.816 1099.61 Q164.834 1099.26 165.853 1099.1 Q166.871 1098.91 167.89 1098.91 Q173.677 1098.91 177.056 1102.08 Q180.436 1105.25 180.436 1110.67 Q180.436 1116.25 176.964 1119.35 Q173.491 1122.43 167.172 1122.43 Q164.996 1122.43 162.728 1122.06 Q160.482 1121.69 158.075 1120.95 L158.075 1116.25 Q160.158 1117.38 162.38 1117.94 Q164.603 1118.49 167.079 1118.49 Q171.084 1118.49 173.422 1116.39 Q175.76 1114.28 175.76 1110.67 Q175.76 1107.06 173.422 1104.95 Q171.084 1102.85 167.079 1102.85 Q165.204 1102.85 163.329 1103.26 Q161.478 1103.68 159.533 1104.56 L159.533 1087.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M62.9365 749.023 Q59.3254 749.023 57.4967 752.588 Q55.6912 756.13 55.6912 763.26 Q55.6912 770.366 57.4967 773.931 Q59.3254 777.472 62.9365 777.472 Q66.5707 777.472 68.3763 773.931 Q70.205 770.366 70.205 763.26 Q70.205 756.13 68.3763 752.588 Q66.5707 749.023 62.9365 749.023 M62.9365 745.32 Q68.7467 745.32 71.8022 749.926 Q74.8809 754.51 74.8809 763.26 Q74.8809 771.986 71.8022 776.593 Q68.7467 781.176 62.9365 781.176 Q57.1264 781.176 54.0477 776.593 Q50.9921 771.986 50.9921 763.26 Q50.9921 754.51 54.0477 749.926 Q57.1264 745.32 62.9365 745.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M83.0984 774.625 L87.9827 774.625 L87.9827 780.505 L83.0984 780.505 L83.0984 774.625 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M108.168 749.023 Q104.557 749.023 102.728 752.588 Q100.922 756.13 100.922 763.26 Q100.922 770.366 102.728 773.931 Q104.557 777.472 108.168 777.472 Q111.802 777.472 113.608 773.931 Q115.436 770.366 115.436 763.26 Q115.436 756.13 113.608 752.588 Q111.802 749.023 108.168 749.023 M108.168 745.32 Q113.978 745.32 117.033 749.926 Q120.112 754.51 120.112 763.26 Q120.112 771.986 117.033 776.593 Q113.978 781.176 108.168 781.176 Q102.358 781.176 99.2789 776.593 Q96.2234 771.986 96.2234 763.26 Q96.2234 754.51 99.2789 749.926 Q102.358 745.32 108.168 745.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M129.14 776.57 L136.779 776.57 L136.779 750.204 L128.469 751.871 L128.469 747.611 L136.732 745.945 L141.408 745.945 L141.408 776.57 L149.047 776.57 L149.047 780.505 L129.14 780.505 L129.14 776.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M168.491 749.023 Q164.88 749.023 163.052 752.588 Q161.246 756.13 161.246 763.26 Q161.246 770.366 163.052 773.931 Q164.88 777.472 168.491 777.472 Q172.126 777.472 173.931 773.931 Q175.76 770.366 175.76 763.26 Q175.76 756.13 173.931 752.588 Q172.126 749.023 168.491 749.023 M168.491 745.32 Q174.302 745.32 177.357 749.926 Q180.436 754.51 180.436 763.26 Q180.436 771.986 177.357 776.593 Q174.302 781.176 168.491 781.176 Q162.681 781.176 159.603 776.593 Q156.547 771.986 156.547 763.26 Q156.547 754.51 159.603 749.926 Q162.681 745.32 168.491 745.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M63.9319 407.77 Q60.3208 407.77 58.4921 411.334 Q56.6865 414.876 56.6865 422.006 Q56.6865 429.112 58.4921 432.677 Q60.3208 436.219 63.9319 436.219 Q67.5661 436.219 69.3717 432.677 Q71.2004 429.112 71.2004 422.006 Q71.2004 414.876 69.3717 411.334 Q67.5661 407.77 63.9319 407.77 M63.9319 404.066 Q69.742 404.066 72.7976 408.672 Q75.8763 413.256 75.8763 422.006 Q75.8763 430.733 72.7976 435.339 Q69.742 439.922 63.9319 439.922 Q58.1217 439.922 55.043 435.339 Q51.9875 430.733 51.9875 422.006 Q51.9875 413.256 55.043 408.672 Q58.1217 404.066 63.9319 404.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M84.0938 433.371 L88.978 433.371 L88.978 439.251 L84.0938 439.251 L84.0938 433.371 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M109.163 407.77 Q105.552 407.77 103.723 411.334 Q101.918 414.876 101.918 422.006 Q101.918 429.112 103.723 432.677 Q105.552 436.219 109.163 436.219 Q112.797 436.219 114.603 432.677 Q116.432 429.112 116.432 422.006 Q116.432 414.876 114.603 411.334 Q112.797 407.77 109.163 407.77 M109.163 404.066 Q114.973 404.066 118.029 408.672 Q121.107 413.256 121.107 422.006 Q121.107 430.733 118.029 435.339 Q114.973 439.922 109.163 439.922 Q103.353 439.922 100.274 435.339 Q97.2187 430.733 97.2187 422.006 Q97.2187 413.256 100.274 408.672 Q103.353 404.066 109.163 404.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M130.135 435.316 L137.774 435.316 L137.774 408.95 L129.464 410.617 L129.464 406.358 L137.728 404.691 L142.404 404.691 L142.404 435.316 L150.043 435.316 L150.043 439.251 L130.135 439.251 L130.135 435.316 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M159.533 404.691 L177.89 404.691 L177.89 408.626 L163.816 408.626 L163.816 417.098 Q164.834 416.751 165.853 416.589 Q166.871 416.404 167.89 416.404 Q173.677 416.404 177.056 419.575 Q180.436 422.746 180.436 428.163 Q180.436 433.742 176.964 436.844 Q173.491 439.922 167.172 439.922 Q164.996 439.922 162.728 439.552 Q160.482 439.182 158.075 438.441 L158.075 433.742 Q160.158 434.876 162.38 435.432 Q164.603 435.987 167.079 435.987 Q171.084 435.987 173.422 433.881 Q175.76 431.774 175.76 428.163 Q175.76 424.552 173.422 422.446 Q171.084 420.339 167.079 420.339 Q165.204 420.339 163.329 420.756 Q161.478 421.172 159.533 422.052 L159.533 404.691 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M62.9365 66.5159 Q59.3254 66.5159 57.4967 70.0807 Q55.6912 73.6223 55.6912 80.7519 Q55.6912 87.8584 57.4967 91.4232 Q59.3254 94.9648 62.9365 94.9648 Q66.5707 94.9648 68.3763 91.4232 Q70.205 87.8584 70.205 80.7519 Q70.205 73.6223 68.3763 70.0807 Q66.5707 66.5159 62.9365 66.5159 M62.9365 62.8122 Q68.7467 62.8122 71.8022 67.4187 Q74.8809 72.002 74.8809 80.7519 Q74.8809 89.4787 71.8022 94.0852 Q68.7467 98.6685 62.9365 98.6685 Q57.1264 98.6685 54.0477 94.0852 Q50.9921 89.4787 50.9921 80.7519 Q50.9921 72.002 54.0477 67.4187 Q57.1264 62.8122 62.9365 62.8122 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M83.0984 92.1176 L87.9827 92.1176 L87.9827 97.9972 L83.0984 97.9972 L83.0984 92.1176 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M108.168 66.5159 Q104.557 66.5159 102.728 70.0807 Q100.922 73.6223 100.922 80.7519 Q100.922 87.8584 102.728 91.4232 Q104.557 94.9648 108.168 94.9648 Q111.802 94.9648 113.608 91.4232 Q115.436 87.8584 115.436 80.7519 Q115.436 73.6223 113.608 70.0807 Q111.802 66.5159 108.168 66.5159 M108.168 62.8122 Q113.978 62.8122 117.033 67.4187 Q120.112 72.002 120.112 80.7519 Q120.112 89.4787 117.033 94.0852 Q113.978 98.6685 108.168 98.6685 Q102.358 98.6685 99.2789 94.0852 Q96.2234 89.4787 96.2234 80.7519 Q96.2234 72.002 99.2789 67.4187 Q102.358 62.8122 108.168 62.8122 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M132.357 94.062 L148.677 94.062 L148.677 97.9972 L126.732 97.9972 L126.732 94.062 Q129.394 91.3074 133.978 86.6778 Q138.584 82.0251 139.765 80.6825 Q142.01 78.1593 142.89 76.4232 Q143.793 74.664 143.793 72.9742 Q143.793 70.2196 141.848 68.4835 Q139.927 66.7474 136.825 66.7474 Q134.626 66.7474 132.172 67.5113 Q129.742 68.2751 126.964 69.8261 L126.964 65.1039 Q129.788 63.9696 132.242 63.3909 Q134.695 62.8122 136.732 62.8122 Q142.103 62.8122 145.297 65.4974 Q148.492 68.1826 148.492 72.6733 Q148.492 74.8029 147.681 76.7242 Q146.894 78.6223 144.788 81.2149 Q144.209 81.8862 141.107 85.1038 Q138.006 88.2982 132.357 94.062 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M168.491 66.5159 Q164.88 66.5159 163.052 70.0807 Q161.246 73.6223 161.246 80.7519 Q161.246 87.8584 163.052 91.4232 Q164.88 94.9648 168.491 94.9648 Q172.126 94.9648 173.931 91.4232 Q175.76 87.8584 175.76 80.7519 Q175.76 73.6223 173.931 70.0807 Q172.126 66.5159 168.491 66.5159 M168.491 62.8122 Q174.302 62.8122 177.357 67.4187 Q180.436 72.002 180.436 80.7519 Q180.436 89.4787 177.357 94.0852 Q174.302 98.6685 168.491 98.6685 Q162.681 98.6685 159.603 94.0852 Q156.547 89.4787 156.547 80.7519 Q156.547 72.002 159.603 67.4187 Q162.681 62.8122 168.491 62.8122 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip262)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"276.898,87.9763 297.255,393.782 317.613,621.862 337.97,782.799 358.328,892.08 378.685,968.152 399.043,1024.93 419.401,1071.53 439.758,1114.62 460.116,1157.23 480.473,1198.05 500.831,1233.53 521.188,1260.74 541.546,1279.42 561.903,1292.05 582.261,1302.03 602.618,1311.92 622.976,1322.91 643.333,1335.05 663.691,1347.85 684.049,1360.69 704.406,1372.97 724.764,1384.11 745.121,1393.61 765.479,1401.24 785.836,1407.13 806.194,1411.74 826.551,1415.56 846.909,1418.92 867.266,1421.92 887.624,1424.48 907.981,1426.5 928.339,1427.99 948.697,1429.09 969.054,1430.06 989.412,1431.15 1009.77,1432.51 1030.13,1434.1 1050.48,1435.7 1070.84,1437.08 1091.2,1438.06 1111.56,1438.61 1131.91,1438.84 1152.27,1438.96 1172.63,1439.16 1192.99,1439.54 1213.34,1440.12 1233.7,1440.81 1254.06,1441.5 1274.42,1442.11 1294.77,1442.58 1315.13,1442.92 1335.49,1443.15 1355.85,1443.32 1376.2,1443.48 1396.56,1443.64 1416.92,1443.8 1437.28,1443.94 1457.63,1444.07 1477.99,1444.18 1498.35,1444.31 1518.71,1444.45 1539.07,1444.61 1559.42,1444.78 1579.78,1444.94 1600.14,1445.07 1620.5,1445.16 1640.85,1445.22 1661.21,1445.25 1681.57,1445.27 1701.93,1445.29 1722.28,1445.31 1742.64,1445.34 1763,1445.38 1783.36,1445.41 1803.71,1445.44 1824.07,1445.47 1844.43,1445.5 1864.79,1445.53 1885.14,1445.55 1905.5,1445.57 1925.86,1445.59 1946.22,1445.6 1966.57,1445.61 1986.93,1445.62 2007.29,1445.63 2027.65,1445.64 2048,1445.66 2068.36,1445.67 2088.72,1445.67 2109.08,1445.68 2129.43,1445.68 2149.79,1445.69 2170.15,1445.69 2190.51,1445.7 2210.86,1445.7 2231.22,1445.7 2251.58,1445.71 2271.94,1445.71 2292.29,1445.72 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M2015.48 198.898 L2281.55 198.898 L2281.55 95.2176 L2015.48 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2015.48,198.898 2281.55,198.898 2281.55,95.2176 2015.48,95.2176 2015.48,198.898 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2039.22,147.058 2181.64,147.058 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M2219.22 166.745 Q2217.42 171.375 2215.7 172.787 Q2213.99 174.199 2211.12 174.199 L2207.72 174.199 L2207.72 170.634 L2210.22 170.634 Q2211.98 170.634 2212.95 169.8 Q2213.92 168.967 2215.1 165.865 L2215.86 163.921 L2205.38 138.412 L2209.89 138.412 L2217.99 158.689 L2226.1 138.412 L2230.61 138.412 L2219.22 166.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2237.9 160.402 L2245.54 160.402 L2245.54 134.037 L2237.23 135.703 L2237.23 131.444 L2245.49 129.778 L2250.17 129.778 L2250.17 160.402 L2257.81 160.402 L2257.81 164.338 L2237.9 164.338 L2237.9 160.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"And let's check what we got","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"fig2 = Plots.plot(1:1<<6, trained_pg; label=\"trained\")\nPlots.plot!(fig2, 1:1<<6, pg; label=\"target\")\ntitle!(\"distribution\")\nxlabel!(\"x\"); ylabel!(\"p\")","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip290\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip290)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip291\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip290)\" d=\"M279.704 1423.18 L2352.76 1423.18 L2352.76 123.472 L279.704 123.472  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip292\">\n    <rect x=\"279\" y=\"123\" width=\"2074\" height=\"1301\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"307.332,1423.18 307.332,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"617.762,1423.18 617.762,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"928.192,1423.18 928.192,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1238.62,1423.18 1238.62,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1549.05,1423.18 1549.05,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1859.48,1423.18 1859.48,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2169.91,1423.18 2169.91,123.472 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"279.704,1292 2352.76,1292 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"279.704,1024.26 2352.76,1024.26 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"279.704,756.51 2352.76,756.51 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"279.704,488.765 2352.76,488.765 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"279.704,221.019 2352.76,221.019 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"307.332,1423.18 307.332,1404.28 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"617.762,1423.18 617.762,1404.28 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"928.192,1423.18 928.192,1404.28 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1238.62,1423.18 1238.62,1404.28 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1549.05,1423.18 1549.05,1404.28 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1859.48,1423.18 1859.48,1404.28 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2169.91,1423.18 2169.91,1404.28 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M307.332 1454.1 Q303.721 1454.1 301.892 1457.66 Q300.087 1461.2 300.087 1468.33 Q300.087 1475.44 301.892 1479.01 Q303.721 1482.55 307.332 1482.55 Q310.966 1482.55 312.772 1479.01 Q314.601 1475.44 314.601 1468.33 Q314.601 1461.2 312.772 1457.66 Q310.966 1454.1 307.332 1454.1 M307.332 1450.39 Q313.142 1450.39 316.198 1455 Q319.277 1459.58 319.277 1468.33 Q319.277 1477.06 316.198 1481.67 Q313.142 1486.25 307.332 1486.25 Q301.522 1486.25 298.443 1481.67 Q295.388 1477.06 295.388 1468.33 Q295.388 1459.58 298.443 1455 Q301.522 1450.39 307.332 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M592.45 1481.64 L600.089 1481.64 L600.089 1455.28 L591.779 1456.95 L591.779 1452.69 L600.042 1451.02 L604.718 1451.02 L604.718 1481.64 L612.357 1481.64 L612.357 1485.58 L592.45 1485.58 L592.45 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M631.802 1454.1 Q628.19 1454.1 626.362 1457.66 Q624.556 1461.2 624.556 1468.33 Q624.556 1475.44 626.362 1479.01 Q628.19 1482.55 631.802 1482.55 Q635.436 1482.55 637.241 1479.01 Q639.07 1475.44 639.07 1468.33 Q639.07 1461.2 637.241 1457.66 Q635.436 1454.1 631.802 1454.1 M631.802 1450.39 Q637.612 1450.39 640.667 1455 Q643.746 1459.58 643.746 1468.33 Q643.746 1477.06 640.667 1481.67 Q637.612 1486.25 631.802 1486.25 Q625.991 1486.25 622.913 1481.67 Q619.857 1477.06 619.857 1468.33 Q619.857 1459.58 622.913 1455 Q625.991 1450.39 631.802 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M906.966 1481.64 L923.285 1481.64 L923.285 1485.58 L901.341 1485.58 L901.341 1481.64 Q904.003 1478.89 908.586 1474.26 Q913.192 1469.61 914.373 1468.27 Q916.618 1465.74 917.498 1464.01 Q918.401 1462.25 918.401 1460.56 Q918.401 1457.8 916.456 1456.07 Q914.535 1454.33 911.433 1454.33 Q909.234 1454.33 906.78 1455.09 Q904.35 1455.86 901.572 1457.41 L901.572 1452.69 Q904.396 1451.55 906.85 1450.97 Q909.304 1450.39 911.341 1450.39 Q916.711 1450.39 919.905 1453.08 Q923.1 1455.77 923.1 1460.26 Q923.1 1462.39 922.29 1464.31 Q921.503 1466.2 919.396 1468.8 Q918.817 1469.47 915.716 1472.69 Q912.614 1475.88 906.966 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M943.1 1454.1 Q939.489 1454.1 937.66 1457.66 Q935.854 1461.2 935.854 1468.33 Q935.854 1475.44 937.66 1479.01 Q939.489 1482.55 943.1 1482.55 Q946.734 1482.55 948.539 1479.01 Q950.368 1475.44 950.368 1468.33 Q950.368 1461.2 948.539 1457.66 Q946.734 1454.1 943.1 1454.1 M943.1 1450.39 Q948.91 1450.39 951.965 1455 Q955.044 1459.58 955.044 1468.33 Q955.044 1477.06 951.965 1481.67 Q948.91 1486.25 943.1 1486.25 Q937.289 1486.25 934.211 1481.67 Q931.155 1477.06 931.155 1468.33 Q931.155 1459.58 934.211 1455 Q937.289 1450.39 943.1 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1227.47 1466.95 Q1230.82 1467.66 1232.7 1469.93 Q1234.59 1472.2 1234.59 1475.53 Q1234.59 1480.65 1231.08 1483.45 Q1227.56 1486.25 1221.08 1486.25 Q1218.9 1486.25 1216.59 1485.81 Q1214.29 1485.39 1211.84 1484.54 L1211.84 1480.02 Q1213.78 1481.16 1216.1 1481.74 Q1218.41 1482.32 1220.94 1482.32 Q1225.34 1482.32 1227.63 1480.58 Q1229.94 1478.84 1229.94 1475.53 Q1229.94 1472.48 1227.79 1470.77 Q1225.66 1469.03 1221.84 1469.03 L1217.81 1469.03 L1217.81 1465.19 L1222.03 1465.19 Q1225.47 1465.19 1227.3 1463.82 Q1229.13 1462.43 1229.13 1459.84 Q1229.13 1457.18 1227.23 1455.77 Q1225.36 1454.33 1221.84 1454.33 Q1219.92 1454.33 1217.72 1454.75 Q1215.52 1455.16 1212.88 1456.04 L1212.88 1451.88 Q1215.54 1451.14 1217.86 1450.77 Q1220.2 1450.39 1222.26 1450.39 Q1227.58 1450.39 1230.68 1452.83 Q1233.78 1455.23 1233.78 1459.35 Q1233.78 1462.22 1232.14 1464.21 Q1230.5 1466.18 1227.47 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1253.46 1454.1 Q1249.85 1454.1 1248.02 1457.66 Q1246.21 1461.2 1246.21 1468.33 Q1246.21 1475.44 1248.02 1479.01 Q1249.85 1482.55 1253.46 1482.55 Q1257.09 1482.55 1258.9 1479.01 Q1260.73 1475.44 1260.73 1468.33 Q1260.73 1461.2 1258.9 1457.66 Q1257.09 1454.1 1253.46 1454.1 M1253.46 1450.39 Q1259.27 1450.39 1262.33 1455 Q1265.4 1459.58 1265.4 1468.33 Q1265.4 1477.06 1262.33 1481.67 Q1259.27 1486.25 1253.46 1486.25 Q1247.65 1486.25 1244.57 1481.67 Q1241.52 1477.06 1241.52 1468.33 Q1241.52 1459.58 1244.57 1455 Q1247.65 1450.39 1253.46 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1537.22 1455.09 L1525.42 1473.54 L1537.22 1473.54 L1537.22 1455.09 M1536 1451.02 L1541.88 1451.02 L1541.88 1473.54 L1546.81 1473.54 L1546.81 1477.43 L1541.88 1477.43 L1541.88 1485.58 L1537.22 1485.58 L1537.22 1477.43 L1521.62 1477.43 L1521.62 1472.92 L1536 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1564.54 1454.1 Q1560.93 1454.1 1559.1 1457.66 Q1557.29 1461.2 1557.29 1468.33 Q1557.29 1475.44 1559.1 1479.01 Q1560.93 1482.55 1564.54 1482.55 Q1568.17 1482.55 1569.98 1479.01 Q1571.81 1475.44 1571.81 1468.33 Q1571.81 1461.2 1569.98 1457.66 Q1568.17 1454.1 1564.54 1454.1 M1564.54 1450.39 Q1570.35 1450.39 1573.4 1455 Q1576.48 1459.58 1576.48 1468.33 Q1576.48 1477.06 1573.4 1481.67 Q1570.35 1486.25 1564.54 1486.25 Q1558.73 1486.25 1555.65 1481.67 Q1552.59 1477.06 1552.59 1468.33 Q1552.59 1459.58 1555.65 1455 Q1558.73 1450.39 1564.54 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1834.18 1451.02 L1852.54 1451.02 L1852.54 1454.96 L1838.46 1454.96 L1838.46 1463.43 Q1839.48 1463.08 1840.5 1462.92 Q1841.52 1462.73 1842.54 1462.73 Q1848.33 1462.73 1851.7 1465.9 Q1855.08 1469.08 1855.08 1474.49 Q1855.08 1480.07 1851.61 1483.17 Q1848.14 1486.25 1841.82 1486.25 Q1839.64 1486.25 1837.38 1485.88 Q1835.13 1485.51 1832.72 1484.77 L1832.72 1480.07 Q1834.81 1481.2 1837.03 1481.76 Q1839.25 1482.32 1841.73 1482.32 Q1845.73 1482.32 1848.07 1480.21 Q1850.41 1478.1 1850.41 1474.49 Q1850.41 1470.88 1848.07 1468.77 Q1845.73 1466.67 1841.73 1466.67 Q1839.85 1466.67 1837.98 1467.08 Q1836.13 1467.5 1834.18 1468.38 L1834.18 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1874.3 1454.1 Q1870.69 1454.1 1868.86 1457.66 Q1867.05 1461.2 1867.05 1468.33 Q1867.05 1475.44 1868.86 1479.01 Q1870.69 1482.55 1874.3 1482.55 Q1877.93 1482.55 1879.74 1479.01 Q1881.57 1475.44 1881.57 1468.33 Q1881.57 1461.2 1879.74 1457.66 Q1877.93 1454.1 1874.3 1454.1 M1874.3 1450.39 Q1880.11 1450.39 1883.16 1455 Q1886.24 1459.58 1886.24 1468.33 Q1886.24 1477.06 1883.16 1481.67 Q1880.11 1486.25 1874.3 1486.25 Q1868.49 1486.25 1865.41 1481.67 Q1862.35 1477.06 1862.35 1468.33 Q1862.35 1459.58 1865.41 1455 Q1868.49 1450.39 1874.3 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2155.32 1466.44 Q2152.17 1466.44 2150.32 1468.59 Q2148.49 1470.74 2148.49 1474.49 Q2148.49 1478.22 2150.32 1480.39 Q2152.17 1482.55 2155.32 1482.55 Q2158.47 1482.55 2160.29 1480.39 Q2162.15 1478.22 2162.15 1474.49 Q2162.15 1470.74 2160.29 1468.59 Q2158.47 1466.44 2155.32 1466.44 M2164.6 1451.78 L2164.6 1456.04 Q2162.84 1455.21 2161.04 1454.77 Q2159.25 1454.33 2157.49 1454.33 Q2152.86 1454.33 2150.41 1457.45 Q2147.98 1460.58 2147.63 1466.9 Q2149 1464.89 2151.06 1463.82 Q2153.12 1462.73 2155.6 1462.73 Q2160.8 1462.73 2163.81 1465.9 Q2166.85 1469.05 2166.85 1474.49 Q2166.85 1479.82 2163.7 1483.03 Q2160.55 1486.25 2155.32 1486.25 Q2149.32 1486.25 2146.15 1481.67 Q2142.98 1477.06 2142.98 1468.33 Q2142.98 1460.14 2146.87 1455.28 Q2150.76 1450.39 2157.31 1450.39 Q2159.07 1450.39 2160.85 1450.74 Q2162.66 1451.09 2164.6 1451.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2184.9 1454.1 Q2181.29 1454.1 2179.46 1457.66 Q2177.66 1461.2 2177.66 1468.33 Q2177.66 1475.44 2179.46 1479.01 Q2181.29 1482.55 2184.9 1482.55 Q2188.54 1482.55 2190.34 1479.01 Q2192.17 1475.44 2192.17 1468.33 Q2192.17 1461.2 2190.34 1457.66 Q2188.54 1454.1 2184.9 1454.1 M2184.9 1450.39 Q2190.71 1450.39 2193.77 1455 Q2196.85 1459.58 2196.85 1468.33 Q2196.85 1477.06 2193.77 1481.67 Q2190.71 1486.25 2184.9 1486.25 Q2179.09 1486.25 2176.01 1481.67 Q2172.96 1477.06 2172.96 1468.33 Q2172.96 1459.58 2176.01 1455 Q2179.09 1450.39 2184.9 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1332.84 1532.4 L1319.95 1549.74 L1333.51 1568.04 L1326.61 1568.04 L1316.23 1554.04 L1305.85 1568.04 L1298.95 1568.04 L1312.79 1549.39 L1300.12 1532.4 L1307.03 1532.4 L1316.48 1545.1 L1325.94 1532.4 L1332.84 1532.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,1423.18 279.704,123.472 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,1292 298.602,1292 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,1024.26 298.602,1024.26 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,756.51 298.602,756.51 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,488.765 298.602,488.765 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.704,221.019 298.602,221.019 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M127.2 1277.8 Q123.589 1277.8 121.76 1281.36 Q119.955 1284.91 119.955 1292.04 Q119.955 1299.14 121.76 1302.71 Q123.589 1306.25 127.2 1306.25 Q130.834 1306.25 132.64 1302.71 Q134.468 1299.14 134.468 1292.04 Q134.468 1284.91 132.64 1281.36 Q130.834 1277.8 127.2 1277.8 M127.2 1274.1 Q133.01 1274.1 136.066 1278.7 Q139.144 1283.29 139.144 1292.04 Q139.144 1300.76 136.066 1305.37 Q133.01 1309.95 127.2 1309.95 Q121.39 1309.95 118.311 1305.37 Q115.256 1300.76 115.256 1292.04 Q115.256 1283.29 118.311 1278.7 Q121.39 1274.1 127.2 1274.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M147.362 1303.4 L152.246 1303.4 L152.246 1309.28 L147.362 1309.28 L147.362 1303.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M172.431 1277.8 Q168.82 1277.8 166.991 1281.36 Q165.186 1284.91 165.186 1292.04 Q165.186 1299.14 166.991 1302.71 Q168.82 1306.25 172.431 1306.25 Q176.065 1306.25 177.871 1302.71 Q179.7 1299.14 179.7 1292.04 Q179.7 1284.91 177.871 1281.36 Q176.065 1277.8 172.431 1277.8 M172.431 1274.1 Q178.241 1274.1 181.297 1278.7 Q184.376 1283.29 184.376 1292.04 Q184.376 1300.76 181.297 1305.37 Q178.241 1309.95 172.431 1309.95 Q166.621 1309.95 163.542 1305.37 Q160.487 1300.76 160.487 1292.04 Q160.487 1283.29 163.542 1278.7 Q166.621 1274.1 172.431 1274.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M202.593 1277.8 Q198.982 1277.8 197.153 1281.36 Q195.348 1284.91 195.348 1292.04 Q195.348 1299.14 197.153 1302.71 Q198.982 1306.25 202.593 1306.25 Q206.227 1306.25 208.033 1302.71 Q209.861 1299.14 209.861 1292.04 Q209.861 1284.91 208.033 1281.36 Q206.227 1277.8 202.593 1277.8 M202.593 1274.1 Q208.403 1274.1 211.459 1278.7 Q214.537 1283.29 214.537 1292.04 Q214.537 1300.76 211.459 1305.37 Q208.403 1309.95 202.593 1309.95 Q196.783 1309.95 193.704 1305.37 Q190.649 1300.76 190.649 1292.04 Q190.649 1283.29 193.704 1278.7 Q196.783 1274.1 202.593 1274.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M222.801 1274.72 L241.158 1274.72 L241.158 1278.66 L227.084 1278.66 L227.084 1287.13 Q228.102 1286.78 229.121 1286.62 Q230.139 1286.43 231.158 1286.43 Q236.945 1286.43 240.324 1289.61 Q243.704 1292.78 243.704 1298.19 Q243.704 1303.77 240.232 1306.87 Q236.76 1309.95 230.44 1309.95 Q228.264 1309.95 225.996 1309.58 Q223.75 1309.21 221.343 1308.47 L221.343 1303.77 Q223.426 1304.91 225.648 1305.46 Q227.871 1306.02 230.347 1306.02 Q234.352 1306.02 236.69 1303.91 Q239.028 1301.8 239.028 1298.19 Q239.028 1294.58 236.69 1292.48 Q234.352 1290.37 230.347 1290.37 Q228.473 1290.37 226.598 1290.79 Q224.746 1291.2 222.801 1292.08 L222.801 1274.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M126.205 1010.05 Q122.593 1010.05 120.765 1013.62 Q118.959 1017.16 118.959 1024.29 Q118.959 1031.4 120.765 1034.96 Q122.593 1038.5 126.205 1038.5 Q129.839 1038.5 131.644 1034.96 Q133.473 1031.4 133.473 1024.29 Q133.473 1017.16 131.644 1013.62 Q129.839 1010.05 126.205 1010.05 M126.205 1006.35 Q132.015 1006.35 135.07 1010.96 Q138.149 1015.54 138.149 1024.29 Q138.149 1033.02 135.07 1037.62 Q132.015 1042.21 126.205 1042.21 Q120.394 1042.21 117.316 1037.62 Q114.26 1033.02 114.26 1024.29 Q114.26 1015.54 117.316 1010.96 Q120.394 1006.35 126.205 1006.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M146.366 1035.66 L151.251 1035.66 L151.251 1041.54 L146.366 1041.54 L146.366 1035.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M171.436 1010.05 Q167.825 1010.05 165.996 1013.62 Q164.19 1017.16 164.19 1024.29 Q164.19 1031.4 165.996 1034.96 Q167.825 1038.5 171.436 1038.5 Q175.07 1038.5 176.876 1034.96 Q178.704 1031.4 178.704 1024.29 Q178.704 1017.16 176.876 1013.62 Q175.07 1010.05 171.436 1010.05 M171.436 1006.35 Q177.246 1006.35 180.301 1010.96 Q183.38 1015.54 183.38 1024.29 Q183.38 1033.02 180.301 1037.62 Q177.246 1042.21 171.436 1042.21 Q165.626 1042.21 162.547 1037.62 Q159.491 1033.02 159.491 1024.29 Q159.491 1015.54 162.547 1010.96 Q165.626 1006.35 171.436 1006.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M192.408 1037.6 L200.047 1037.6 L200.047 1011.24 L191.737 1012.9 L191.737 1008.64 L200 1006.98 L204.676 1006.98 L204.676 1037.6 L212.315 1037.6 L212.315 1041.54 L192.408 1041.54 L192.408 1037.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M231.76 1010.05 Q228.148 1010.05 226.32 1013.62 Q224.514 1017.16 224.514 1024.29 Q224.514 1031.4 226.32 1034.96 Q228.148 1038.5 231.76 1038.5 Q235.394 1038.5 237.199 1034.96 Q239.028 1031.4 239.028 1024.29 Q239.028 1017.16 237.199 1013.62 Q235.394 1010.05 231.76 1010.05 M231.76 1006.35 Q237.57 1006.35 240.625 1010.96 Q243.704 1015.54 243.704 1024.29 Q243.704 1033.02 240.625 1037.62 Q237.57 1042.21 231.76 1042.21 Q225.949 1042.21 222.871 1037.62 Q219.815 1033.02 219.815 1024.29 Q219.815 1015.54 222.871 1010.96 Q225.949 1006.35 231.76 1006.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M127.2 742.309 Q123.589 742.309 121.76 745.874 Q119.955 749.415 119.955 756.545 Q119.955 763.651 121.76 767.216 Q123.589 770.758 127.2 770.758 Q130.834 770.758 132.64 767.216 Q134.468 763.651 134.468 756.545 Q134.468 749.415 132.64 745.874 Q130.834 742.309 127.2 742.309 M127.2 738.605 Q133.01 738.605 136.066 743.212 Q139.144 747.795 139.144 756.545 Q139.144 765.272 136.066 769.878 Q133.01 774.462 127.2 774.462 Q121.39 774.462 118.311 769.878 Q115.256 765.272 115.256 756.545 Q115.256 747.795 118.311 743.212 Q121.39 738.605 127.2 738.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M147.362 767.911 L152.246 767.911 L152.246 773.79 L147.362 773.79 L147.362 767.911 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M172.431 742.309 Q168.82 742.309 166.991 745.874 Q165.186 749.415 165.186 756.545 Q165.186 763.651 166.991 767.216 Q168.82 770.758 172.431 770.758 Q176.065 770.758 177.871 767.216 Q179.7 763.651 179.7 756.545 Q179.7 749.415 177.871 745.874 Q176.065 742.309 172.431 742.309 M172.431 738.605 Q178.241 738.605 181.297 743.212 Q184.376 747.795 184.376 756.545 Q184.376 765.272 181.297 769.878 Q178.241 774.462 172.431 774.462 Q166.621 774.462 163.542 769.878 Q160.487 765.272 160.487 756.545 Q160.487 747.795 163.542 743.212 Q166.621 738.605 172.431 738.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M193.403 769.855 L201.042 769.855 L201.042 743.489 L192.732 745.156 L192.732 740.897 L200.996 739.23 L205.672 739.23 L205.672 769.855 L213.311 769.855 L213.311 773.79 L193.403 773.79 L193.403 769.855 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M222.801 739.23 L241.158 739.23 L241.158 743.165 L227.084 743.165 L227.084 751.638 Q228.102 751.29 229.121 751.128 Q230.139 750.943 231.158 750.943 Q236.945 750.943 240.324 754.114 Q243.704 757.286 243.704 762.702 Q243.704 768.281 240.232 771.383 Q236.76 774.462 230.44 774.462 Q228.264 774.462 225.996 774.091 Q223.75 773.721 221.343 772.98 L221.343 768.281 Q223.426 769.415 225.648 769.971 Q227.871 770.526 230.347 770.526 Q234.352 770.526 236.69 768.42 Q239.028 766.313 239.028 762.702 Q239.028 759.091 236.69 756.985 Q234.352 754.878 230.347 754.878 Q228.473 754.878 226.598 755.295 Q224.746 755.712 222.801 756.591 L222.801 739.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M126.205 474.563 Q122.593 474.563 120.765 478.128 Q118.959 481.67 118.959 488.799 Q118.959 495.906 120.765 499.471 Q122.593 503.012 126.205 503.012 Q129.839 503.012 131.644 499.471 Q133.473 495.906 133.473 488.799 Q133.473 481.67 131.644 478.128 Q129.839 474.563 126.205 474.563 M126.205 470.86 Q132.015 470.86 135.07 475.466 Q138.149 480.049 138.149 488.799 Q138.149 497.526 135.07 502.133 Q132.015 506.716 126.205 506.716 Q120.394 506.716 117.316 502.133 Q114.26 497.526 114.26 488.799 Q114.26 480.049 117.316 475.466 Q120.394 470.86 126.205 470.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M146.366 500.165 L151.251 500.165 L151.251 506.045 L146.366 506.045 L146.366 500.165 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M171.436 474.563 Q167.825 474.563 165.996 478.128 Q164.19 481.67 164.19 488.799 Q164.19 495.906 165.996 499.471 Q167.825 503.012 171.436 503.012 Q175.07 503.012 176.876 499.471 Q178.704 495.906 178.704 488.799 Q178.704 481.67 176.876 478.128 Q175.07 474.563 171.436 474.563 M171.436 470.86 Q177.246 470.86 180.301 475.466 Q183.38 480.049 183.38 488.799 Q183.38 497.526 180.301 502.133 Q177.246 506.716 171.436 506.716 Q165.626 506.716 162.547 502.133 Q159.491 497.526 159.491 488.799 Q159.491 480.049 162.547 475.466 Q165.626 470.86 171.436 470.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M195.625 502.11 L211.945 502.11 L211.945 506.045 L190 506.045 L190 502.11 Q192.663 499.355 197.246 494.725 Q201.852 490.073 203.033 488.73 Q205.278 486.207 206.158 484.471 Q207.061 482.711 207.061 481.022 Q207.061 478.267 205.116 476.531 Q203.195 474.795 200.093 474.795 Q197.894 474.795 195.44 475.559 Q193.01 476.323 190.232 477.874 L190.232 473.151 Q193.056 472.017 195.51 471.438 Q197.963 470.86 200 470.86 Q205.371 470.86 208.565 473.545 Q211.76 476.23 211.76 480.721 Q211.76 482.85 210.949 484.772 Q210.162 486.67 208.056 489.262 Q207.477 489.934 204.375 493.151 Q201.274 496.346 195.625 502.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M231.76 474.563 Q228.148 474.563 226.32 478.128 Q224.514 481.67 224.514 488.799 Q224.514 495.906 226.32 499.471 Q228.148 503.012 231.76 503.012 Q235.394 503.012 237.199 499.471 Q239.028 495.906 239.028 488.799 Q239.028 481.67 237.199 478.128 Q235.394 474.563 231.76 474.563 M231.76 470.86 Q237.57 470.86 240.625 475.466 Q243.704 480.049 243.704 488.799 Q243.704 497.526 240.625 502.133 Q237.57 506.716 231.76 506.716 Q225.949 506.716 222.871 502.133 Q219.815 497.526 219.815 488.799 Q219.815 480.049 222.871 475.466 Q225.949 470.86 231.76 470.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M127.2 206.818 Q123.589 206.818 121.76 210.383 Q119.955 213.924 119.955 221.054 Q119.955 228.16 121.76 231.725 Q123.589 235.267 127.2 235.267 Q130.834 235.267 132.64 231.725 Q134.468 228.16 134.468 221.054 Q134.468 213.924 132.64 210.383 Q130.834 206.818 127.2 206.818 M127.2 203.114 Q133.01 203.114 136.066 207.721 Q139.144 212.304 139.144 221.054 Q139.144 229.781 136.066 234.387 Q133.01 238.97 127.2 238.97 Q121.39 238.97 118.311 234.387 Q115.256 229.781 115.256 221.054 Q115.256 212.304 118.311 207.721 Q121.39 203.114 127.2 203.114 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M147.362 232.42 L152.246 232.42 L152.246 238.299 L147.362 238.299 L147.362 232.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M172.431 206.818 Q168.82 206.818 166.991 210.383 Q165.186 213.924 165.186 221.054 Q165.186 228.16 166.991 231.725 Q168.82 235.267 172.431 235.267 Q176.065 235.267 177.871 231.725 Q179.7 228.16 179.7 221.054 Q179.7 213.924 177.871 210.383 Q176.065 206.818 172.431 206.818 M172.431 203.114 Q178.241 203.114 181.297 207.721 Q184.376 212.304 184.376 221.054 Q184.376 229.781 181.297 234.387 Q178.241 238.97 172.431 238.97 Q166.621 238.97 163.542 234.387 Q160.487 229.781 160.487 221.054 Q160.487 212.304 163.542 207.721 Q166.621 203.114 172.431 203.114 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M196.621 234.364 L212.94 234.364 L212.94 238.299 L190.996 238.299 L190.996 234.364 Q193.658 231.609 198.241 226.98 Q202.848 222.327 204.028 220.984 Q206.274 218.461 207.153 216.725 Q208.056 214.966 208.056 213.276 Q208.056 210.521 206.112 208.785 Q204.19 207.049 201.088 207.049 Q198.889 207.049 196.436 207.813 Q194.005 208.577 191.227 210.128 L191.227 205.406 Q194.051 204.272 196.505 203.693 Q198.959 203.114 200.996 203.114 Q206.366 203.114 209.561 205.799 Q212.755 208.484 212.755 212.975 Q212.755 215.105 211.945 217.026 Q211.158 218.924 209.051 221.517 Q208.473 222.188 205.371 225.406 Q202.269 228.6 196.621 234.364 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M222.801 203.739 L241.158 203.739 L241.158 207.674 L227.084 207.674 L227.084 216.146 Q228.102 215.799 229.121 215.637 Q230.139 215.452 231.158 215.452 Q236.945 215.452 240.324 218.623 Q243.704 221.795 243.704 227.211 Q243.704 232.79 240.232 235.892 Q236.76 238.97 230.44 238.97 Q228.264 238.97 225.996 238.6 Q223.75 238.23 221.343 237.489 L221.343 232.79 Q223.426 233.924 225.648 234.48 Q227.871 235.035 230.347 235.035 Q234.352 235.035 236.69 232.929 Q239.028 230.822 239.028 227.211 Q239.028 223.6 236.69 221.494 Q234.352 219.387 230.347 219.387 Q228.473 219.387 226.598 219.804 Q224.746 220.221 222.801 221.1 L222.801 203.739 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M58.657 783.384 L77.5631 783.384 L77.5631 789.272 L28.3562 789.272 L28.3562 783.384 L33.7671 783.384 Q30.5842 781.538 29.0564 778.737 Q27.4968 775.904 27.4968 771.989 Q27.4968 765.496 32.6531 761.454 Q37.8093 757.38 46.212 757.38 Q54.6147 757.38 59.771 761.454 Q64.9272 765.496 64.9272 771.989 Q64.9272 775.904 63.3994 778.737 Q61.8398 781.538 58.657 783.384 M46.212 763.459 Q39.7508 763.459 36.0905 766.133 Q32.3984 768.775 32.3984 773.421 Q32.3984 778.068 36.0905 780.742 Q39.7508 783.384 46.212 783.384 Q52.6732 783.384 56.3653 780.742 Q60.0256 778.068 60.0256 773.421 Q60.0256 768.775 56.3653 766.133 Q52.6732 763.459 46.212 763.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1118.75 34.0924 L1118.75 9.54393 L1126.2 9.54393 L1126.2 72.576 L1118.75 72.576 L1118.75 65.7705 Q1116.4 69.8214 1112.79 71.8063 Q1109.23 73.7508 1104.21 73.7508 Q1095.98 73.7508 1090.8 67.1883 Q1085.65 60.6258 1085.65 49.9314 Q1085.65 39.2371 1090.8 32.6746 Q1095.98 26.1121 1104.21 26.1121 Q1109.23 26.1121 1112.79 28.0971 Q1116.4 30.0415 1118.75 34.0924 M1093.35 49.9314 Q1093.35 58.1548 1096.71 62.8538 Q1100.11 67.5124 1106.03 67.5124 Q1111.94 67.5124 1115.35 62.8538 Q1118.75 58.1548 1118.75 49.9314 Q1118.75 41.7081 1115.35 37.0496 Q1111.94 32.3505 1106.03 32.3505 Q1100.11 32.3505 1096.71 37.0496 Q1093.35 41.7081 1093.35 49.9314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1141.55 27.2059 L1149.01 27.2059 L1149.01 72.576 L1141.55 72.576 L1141.55 27.2059 M1141.55 9.54393 L1149.01 9.54393 L1149.01 18.9825 L1141.55 18.9825 L1141.55 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1193.53 28.5427 L1193.53 35.5912 Q1190.37 33.9709 1186.97 33.1607 Q1183.56 32.3505 1179.92 32.3505 Q1174.37 32.3505 1171.57 34.0519 Q1168.82 35.7533 1168.82 39.156 Q1168.82 41.7486 1170.8 43.2475 Q1172.79 44.7058 1178.78 46.0426 L1181.33 46.6097 Q1189.27 48.3111 1192.6 51.4303 Q1195.96 54.509 1195.96 60.0587 Q1195.96 66.3781 1190.94 70.0644 Q1185.95 73.7508 1177.2 73.7508 Q1173.56 73.7508 1169.59 73.0216 Q1165.66 72.3329 1161.28 70.9151 L1161.28 63.2184 Q1165.41 65.3654 1169.43 66.4591 Q1173.44 67.5124 1177.36 67.5124 Q1182.63 67.5124 1185.47 65.73 Q1188.3 63.9071 1188.3 60.6258 Q1188.3 57.5877 1186.24 55.9673 Q1184.21 54.3469 1177.28 52.8481 L1174.69 52.2405 Q1167.76 50.7821 1164.69 47.7845 Q1161.61 44.7463 1161.61 39.4801 Q1161.61 33.0797 1166.14 29.5959 Q1170.68 26.1121 1179.03 26.1121 Q1183.16 26.1121 1186.8 26.7198 Q1190.45 27.3274 1193.53 28.5427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1215.2 14.324 L1215.2 27.2059 L1230.55 27.2059 L1230.55 32.9987 L1215.2 32.9987 L1215.2 57.6282 Q1215.2 63.1779 1216.7 64.7578 Q1218.24 66.3376 1222.9 66.3376 L1230.55 66.3376 L1230.55 72.576 L1222.9 72.576 Q1214.27 72.576 1210.99 69.3758 Q1207.71 66.1351 1207.71 57.6282 L1207.71 32.9987 L1202.24 32.9987 L1202.24 27.2059 L1207.71 27.2059 L1207.71 14.324 L1215.2 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1266.65 34.1734 Q1265.39 33.4443 1263.89 33.1202 Q1262.43 32.7556 1260.65 32.7556 Q1254.33 32.7556 1250.93 36.8875 Q1247.57 40.9789 1247.57 48.6757 L1247.57 72.576 L1240.07 72.576 L1240.07 27.2059 L1247.57 27.2059 L1247.57 34.2544 Q1249.92 30.1225 1253.68 28.1376 Q1257.45 26.1121 1262.84 26.1121 Q1263.61 26.1121 1264.54 26.2337 Q1265.47 26.3147 1266.61 26.5172 L1266.65 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1274.47 27.2059 L1281.92 27.2059 L1281.92 72.576 L1274.47 72.576 L1274.47 27.2059 M1274.47 9.54393 L1281.92 9.54393 L1281.92 18.9825 L1274.47 18.9825 L1274.47 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1330.08 49.9314 Q1330.08 41.7081 1326.68 37.0496 Q1323.32 32.3505 1317.4 32.3505 Q1311.49 32.3505 1308.09 37.0496 Q1304.73 41.7081 1304.73 49.9314 Q1304.73 58.1548 1308.09 62.8538 Q1311.49 67.5124 1317.4 67.5124 Q1323.32 67.5124 1326.68 62.8538 Q1330.08 58.1548 1330.08 49.9314 M1304.73 34.0924 Q1307.07 30.0415 1310.64 28.0971 Q1314.24 26.1121 1319.23 26.1121 Q1327.49 26.1121 1332.64 32.6746 Q1337.82 39.2371 1337.82 49.9314 Q1337.82 60.6258 1332.64 67.1883 Q1327.49 73.7508 1319.23 73.7508 Q1314.24 73.7508 1310.64 71.8063 Q1307.07 69.8214 1304.73 65.7705 L1304.73 72.576 L1297.23 72.576 L1297.23 9.54393 L1304.73 9.54393 L1304.73 34.0924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1349.41 54.671 L1349.41 27.2059 L1356.86 27.2059 L1356.86 54.3874 Q1356.86 60.8284 1359.37 64.0691 Q1361.88 67.2693 1366.91 67.2693 Q1372.94 67.2693 1376.43 63.421 Q1379.95 59.5726 1379.95 52.9291 L1379.95 27.2059 L1387.4 27.2059 L1387.4 72.576 L1379.95 72.576 L1379.95 65.6084 Q1377.24 69.7404 1373.63 71.7658 Q1370.07 73.7508 1365.33 73.7508 Q1357.51 73.7508 1353.46 68.8897 Q1349.41 64.0286 1349.41 54.671 M1368.16 26.1121 L1368.16 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1410.13 14.324 L1410.13 27.2059 L1425.48 27.2059 L1425.48 32.9987 L1410.13 32.9987 L1410.13 57.6282 Q1410.13 63.1779 1411.63 64.7578 Q1413.17 66.3376 1417.83 66.3376 L1425.48 66.3376 L1425.48 72.576 L1417.83 72.576 Q1409.2 72.576 1405.92 69.3758 Q1402.64 66.1351 1402.64 57.6282 L1402.64 32.9987 L1397.17 32.9987 L1397.17 27.2059 L1402.64 27.2059 L1402.64 14.324 L1410.13 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1435.29 27.2059 L1442.74 27.2059 L1442.74 72.576 L1435.29 72.576 L1435.29 27.2059 M1435.29 9.54393 L1442.74 9.54393 L1442.74 18.9825 L1435.29 18.9825 L1435.29 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1475.92 32.4315 Q1469.92 32.4315 1466.44 37.1306 Q1462.95 41.7891 1462.95 49.9314 Q1462.95 58.0738 1466.4 62.7728 Q1469.88 67.4314 1475.92 67.4314 Q1481.87 67.4314 1485.36 62.7323 Q1488.84 58.0333 1488.84 49.9314 Q1488.84 41.8701 1485.36 37.1711 Q1481.87 32.4315 1475.92 32.4315 M1475.92 26.1121 Q1485.64 26.1121 1491.19 32.4315 Q1496.74 38.7509 1496.74 49.9314 Q1496.74 61.0714 1491.19 67.4314 Q1485.64 73.7508 1475.92 73.7508 Q1466.15 73.7508 1460.6 67.4314 Q1455.09 61.0714 1455.09 49.9314 Q1455.09 38.7509 1460.6 32.4315 Q1466.15 26.1121 1475.92 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1546.81 45.1919 L1546.81 72.576 L1539.35 72.576 L1539.35 45.4349 Q1539.35 38.994 1536.84 35.7938 Q1534.33 32.5936 1529.31 32.5936 Q1523.27 32.5936 1519.79 36.4419 Q1516.3 40.2903 1516.3 46.9338 L1516.3 72.576 L1508.81 72.576 L1508.81 27.2059 L1516.3 27.2059 L1516.3 34.2544 Q1518.98 30.163 1522.58 28.1376 Q1526.23 26.1121 1530.97 26.1121 Q1538.79 26.1121 1542.8 30.9732 Q1546.81 35.7938 1546.81 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip292)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"338.375,1328.11 369.418,1302.21 400.461,1273.58 431.504,1239.37 462.547,1203.62 493.59,1167.49 524.633,1126.37 555.676,1079.51 586.719,1038.6 617.762,1000.34 648.805,942.73 679.848,895.319 710.891,840.333 741.934,789.75 772.977,739.128 804.02,681.993 835.063,630.354 866.106,583.75 897.149,526.265 928.192,477.403 959.235,430.403 990.278,390.215 1021.32,349.126 1052.36,302.782 1083.41,262.969 1114.45,243.907 1145.49,212.342 1176.54,192.254 1207.58,179.613 1238.62,165.167 1269.67,160.256 1300.71,161.44 1331.75,164.505 1362.79,171.94 1393.84,199.357 1424.88,215.247 1455.92,245.75 1486.97,270.76 1518.01,309.281 1549.05,341.458 1580.1,385.331 1611.14,430.102 1642.18,476.18 1673.22,527.225 1704.27,574.839 1735.31,631.398 1766.35,684.776 1797.4,731.579 1828.44,786.455 1859.48,843.367 1890.53,896.123 1921.57,947.094 1952.61,996.595 1983.65,1040.36 2014.7,1088.84 2045.74,1125.12 2076.78,1168.65 2107.83,1208.33 2138.87,1243.76 2169.91,1272.87 2200.96,1305.98 2232,1330.67 2263.04,1357.65 2294.08,1386.4 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"338.375,1332.3 369.418,1304.02 400.461,1273.35 431.504,1240.25 462.547,1204.71 493.59,1166.76 524.633,1126.44 555.676,1083.86 586.719,1039.12 617.762,992.401 648.805,943.899 679.848,893.857 710.891,842.555 741.934,790.312 772.977,737.482 804.02,684.451 835.063,631.632 866.106,579.462 897.149,528.396 928.192,478.901 959.235,431.446 990.278,386.499 1021.32,344.519 1052.36,305.943 1083.41,271.187 1114.45,240.629 1145.49,214.612 1176.54,193.429 1207.58,177.323 1238.62,166.481 1269.67,161.028 1300.71,161.028 1331.75,166.481 1362.79,177.323 1393.84,193.429 1424.88,214.612 1455.92,240.629 1486.97,271.187 1518.01,305.943 1549.05,344.519 1580.1,386.499 1611.14,431.446 1642.18,478.901 1673.22,528.396 1704.27,579.462 1735.31,631.632 1766.35,684.451 1797.4,737.482 1828.44,790.312 1859.48,842.555 1890.53,893.857 1921.57,943.899 1952.61,992.401 1983.65,1039.12 2014.7,1083.86 2045.74,1126.44 2076.78,1166.76 2107.83,1204.71 2138.87,1240.25 2169.91,1273.35 2200.96,1304.02 2232,1332.3 2263.04,1358.24 2294.08,1381.92 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1912.32 322.316 L2283.65 322.316 L2283.65 166.796 L1912.32 166.796  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1912.32,322.316 2283.65,322.316 2283.65,166.796 1912.32,166.796 1912.32,322.316 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1935.36,218.636 2073.56,218.636 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M2104 202.629 L2104 209.99 L2112.77 209.99 L2112.77 213.3 L2104 213.3 L2104 227.374 Q2104 230.545 2104.86 231.448 Q2105.74 232.351 2108.4 232.351 L2112.77 232.351 L2112.77 235.916 L2108.4 235.916 Q2103.47 235.916 2101.59 234.087 Q2099.72 232.235 2099.72 227.374 L2099.72 213.3 L2096.59 213.3 L2096.59 209.99 L2099.72 209.99 L2099.72 202.629 L2104 202.629 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2133.4 213.971 Q2132.68 213.555 2131.82 213.37 Q2130.99 213.161 2129.97 213.161 Q2126.36 213.161 2124.42 215.522 Q2122.5 217.86 2122.5 222.258 L2122.5 235.916 L2118.21 235.916 L2118.21 209.99 L2122.5 209.99 L2122.5 214.018 Q2123.84 211.657 2125.99 210.522 Q2128.14 209.365 2131.22 209.365 Q2131.66 209.365 2132.2 209.434 Q2132.73 209.481 2133.38 209.596 L2133.4 213.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2149.65 222.883 Q2144.49 222.883 2142.5 224.064 Q2140.51 225.244 2140.51 228.092 Q2140.51 230.36 2141.99 231.703 Q2143.49 233.022 2146.06 233.022 Q2149.6 233.022 2151.73 230.522 Q2153.88 227.999 2153.88 223.832 L2153.88 222.883 L2149.65 222.883 M2158.14 221.124 L2158.14 235.916 L2153.88 235.916 L2153.88 231.981 Q2152.43 234.342 2150.25 235.476 Q2148.07 236.587 2144.93 236.587 Q2140.94 236.587 2138.58 234.365 Q2136.25 232.119 2136.25 228.369 Q2136.25 223.994 2139.16 221.772 Q2142.1 219.55 2147.91 219.55 L2153.88 219.55 L2153.88 219.133 Q2153.88 216.194 2151.94 214.596 Q2150.02 212.976 2146.52 212.976 Q2144.3 212.976 2142.19 213.508 Q2140.09 214.041 2138.14 215.106 L2138.14 211.17 Q2140.48 210.268 2142.68 209.828 Q2144.88 209.365 2146.96 209.365 Q2152.59 209.365 2155.37 212.282 Q2158.14 215.198 2158.14 221.124 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2166.92 209.99 L2171.18 209.99 L2171.18 235.916 L2166.92 235.916 L2166.92 209.99 M2166.92 199.897 L2171.18 199.897 L2171.18 205.291 L2166.92 205.291 L2166.92 199.897 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2201.64 220.268 L2201.64 235.916 L2197.38 235.916 L2197.38 220.407 Q2197.38 216.726 2195.94 214.897 Q2194.51 213.069 2191.64 213.069 Q2188.19 213.069 2186.2 215.268 Q2184.21 217.467 2184.21 221.263 L2184.21 235.916 L2179.93 235.916 L2179.93 209.99 L2184.21 209.99 L2184.21 214.018 Q2185.74 211.68 2187.8 210.522 Q2189.88 209.365 2192.59 209.365 Q2197.06 209.365 2199.35 212.143 Q2201.64 214.897 2201.64 220.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2232.31 221.888 L2232.31 223.971 L2212.73 223.971 Q2213 228.369 2215.37 230.684 Q2217.75 232.976 2221.99 232.976 Q2224.44 232.976 2226.73 232.374 Q2229.05 231.772 2231.31 230.569 L2231.31 234.596 Q2229.02 235.568 2226.62 236.078 Q2224.21 236.587 2221.73 236.587 Q2215.53 236.587 2211.89 232.976 Q2208.28 229.365 2208.28 223.207 Q2208.28 216.842 2211.71 213.115 Q2215.16 209.365 2220.99 209.365 Q2226.22 209.365 2229.25 212.745 Q2232.31 216.101 2232.31 221.888 M2228.05 220.638 Q2228 217.143 2226.08 215.059 Q2224.19 212.976 2221.04 212.976 Q2217.47 212.976 2215.32 214.99 Q2213.19 217.004 2212.87 220.661 L2228.05 220.638 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2256.36 213.925 L2256.36 199.897 L2260.62 199.897 L2260.62 235.916 L2256.36 235.916 L2256.36 232.027 Q2255.02 234.342 2252.96 235.476 Q2250.92 236.587 2248.05 236.587 Q2243.35 236.587 2240.39 232.837 Q2237.45 229.087 2237.45 222.976 Q2237.45 216.865 2240.39 213.115 Q2243.35 209.365 2248.05 209.365 Q2250.92 209.365 2252.96 210.499 Q2255.02 211.61 2256.36 213.925 M2241.85 222.976 Q2241.85 227.675 2243.77 230.36 Q2245.71 233.022 2249.09 233.022 Q2252.47 233.022 2254.42 230.36 Q2256.36 227.675 2256.36 222.976 Q2256.36 218.277 2254.42 215.615 Q2252.47 212.93 2249.09 212.93 Q2245.71 212.93 2243.77 215.615 Q2241.85 218.277 2241.85 222.976 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip290)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1935.36,270.476 2073.56,270.476 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M2104 254.469 L2104 261.83 L2112.77 261.83 L2112.77 265.14 L2104 265.14 L2104 279.214 Q2104 282.385 2104.86 283.288 Q2105.74 284.191 2108.4 284.191 L2112.77 284.191 L2112.77 287.756 L2108.4 287.756 Q2103.47 287.756 2101.59 285.927 Q2099.72 284.075 2099.72 279.214 L2099.72 265.14 L2096.59 265.14 L2096.59 261.83 L2099.72 261.83 L2099.72 254.469 L2104 254.469 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2130.16 274.723 Q2125 274.723 2123.01 275.904 Q2121.01 277.084 2121.01 279.932 Q2121.01 282.2 2122.5 283.543 Q2124 284.862 2126.57 284.862 Q2130.11 284.862 2132.24 282.362 Q2134.39 279.839 2134.39 275.672 L2134.39 274.723 L2130.16 274.723 M2138.65 272.964 L2138.65 287.756 L2134.39 287.756 L2134.39 283.821 Q2132.94 286.182 2130.76 287.316 Q2128.58 288.427 2125.44 288.427 Q2121.45 288.427 2119.09 286.205 Q2116.76 283.959 2116.76 280.209 Q2116.76 275.834 2119.67 273.612 Q2122.61 271.39 2128.42 271.39 L2134.39 271.39 L2134.39 270.973 Q2134.39 268.034 2132.45 266.436 Q2130.53 264.816 2127.03 264.816 Q2124.81 264.816 2122.7 265.348 Q2120.6 265.881 2118.65 266.946 L2118.65 263.01 Q2120.99 262.108 2123.19 261.668 Q2125.39 261.205 2127.47 261.205 Q2133.1 261.205 2135.88 264.122 Q2138.65 267.038 2138.65 272.964 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2162.45 265.811 Q2161.73 265.395 2160.88 265.21 Q2160.04 265.001 2159.02 265.001 Q2155.41 265.001 2153.47 267.362 Q2151.55 269.7 2151.55 274.098 L2151.55 287.756 L2147.26 287.756 L2147.26 261.83 L2151.55 261.83 L2151.55 265.858 Q2152.89 263.497 2155.04 262.362 Q2157.19 261.205 2160.27 261.205 Q2160.71 261.205 2161.25 261.274 Q2161.78 261.321 2162.43 261.436 L2162.45 265.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2183.14 274.492 Q2183.14 269.862 2181.22 267.316 Q2179.32 264.77 2175.88 264.77 Q2172.45 264.77 2170.53 267.316 Q2168.63 269.862 2168.63 274.492 Q2168.63 279.098 2170.53 281.645 Q2172.45 284.191 2175.88 284.191 Q2179.32 284.191 2181.22 281.645 Q2183.14 279.098 2183.14 274.492 M2187.4 284.538 Q2187.4 291.158 2184.46 294.376 Q2181.52 297.617 2175.46 297.617 Q2173.21 297.617 2171.22 297.27 Q2169.23 296.945 2167.36 296.251 L2167.36 292.108 Q2169.23 293.126 2171.06 293.612 Q2172.89 294.098 2174.79 294.098 Q2178.98 294.098 2181.06 291.899 Q2183.14 289.723 2183.14 285.302 L2183.14 283.196 Q2181.82 285.487 2179.76 286.621 Q2177.7 287.756 2174.83 287.756 Q2170.07 287.756 2167.15 284.121 Q2164.23 280.487 2164.23 274.492 Q2164.23 268.473 2167.15 264.839 Q2170.07 261.205 2174.83 261.205 Q2177.7 261.205 2179.76 262.339 Q2181.82 263.473 2183.14 265.765 L2183.14 261.83 L2187.4 261.83 L2187.4 284.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2218.35 273.728 L2218.35 275.811 L2198.77 275.811 Q2199.05 280.209 2201.41 282.524 Q2203.79 284.816 2208.03 284.816 Q2210.48 284.816 2212.77 284.214 Q2215.09 283.612 2217.36 282.409 L2217.36 286.436 Q2215.06 287.408 2212.66 287.918 Q2210.25 288.427 2207.77 288.427 Q2201.57 288.427 2197.94 284.816 Q2194.32 281.205 2194.32 275.047 Q2194.32 268.682 2197.75 264.955 Q2201.2 261.205 2207.03 261.205 Q2212.26 261.205 2215.3 264.585 Q2218.35 267.941 2218.35 273.728 M2214.09 272.478 Q2214.05 268.983 2212.13 266.899 Q2210.23 264.816 2207.08 264.816 Q2203.51 264.816 2201.36 266.83 Q2199.23 268.844 2198.91 272.501 L2214.09 272.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2229.56 254.469 L2229.56 261.83 L2238.33 261.83 L2238.33 265.14 L2229.56 265.14 L2229.56 279.214 Q2229.56 282.385 2230.41 283.288 Q2231.29 284.191 2233.95 284.191 L2238.33 284.191 L2238.33 287.756 L2233.95 287.756 Q2229.02 287.756 2227.15 285.927 Q2225.27 284.075 2225.27 279.214 L2225.27 265.14 L2222.15 265.14 L2222.15 261.83 L2225.27 261.83 L2225.27 254.469 L2229.56 254.469 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"So within 50 steps, we got a pretty close estimation of our target distribution!","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"","category":"page"},{"location":"generated/examples/6.quantum-circuit-born-machine/index.html","page":"Quantum Circuit Born Machine","title":"Quantum Circuit Born Machine","text":"This page was generated using Literate.jl.","category":"page"},{"location":"quick-start.html#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"In this quick start, we list several common use cases for Yao before you go deeper into the manual.","category":"page"},{"location":"quick-start.html#Create-a-quantum-register/state","page":"Quick Start","title":"Create a quantum register/state","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"A register is an object that describes a device with an internal state. See Registers for more details. Yao use registers to represent quantum states. The most common register is the ArrayReg, you can create it by feeding a state vector to it, e.g","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"using Yao\nArrayReg(randn(ComplexF64, 2^3))  # a random unnormalized 3-qubit state\nzero_state(5)  # |00000⟩\nrand_state(5)  # a random state\nproduct_state(bit\"10100\")  # |10100⟩\nghz_state(5)  # (|00000⟩ + |11111⟩)/√2","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"the internal quantum state can be accessed via statevec method","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"statevec(ghz_state(2))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"for more functionalities about registers please refer to the manual of Registers.","category":"page"},{"location":"quick-start.html#Create-quantum-circuit","page":"Quick Start","title":"Create quantum circuit","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"Yao introduces an abstract representation for linear maps, called \"block\"s, which can be used to represent quantum circuits, Hamiltonians, and other quantum operations. The following code creates a 2-qubit circuit","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"chain(2, put(1=>H), put(2=>X))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"where H gate is at 1st qubit, X gate is at 2nd qubit. A more advanced example is the quantum Fourier transform circuit","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))))  # a cphase gate\nB(n, k) = chain(n, j==k ? put(k=>H) : A(j, k) for j in k:n)\nqft(n) = chain(B(n, k) for k in 1:n)\ncircuit = qft(3)  # a 3-qubit QFT circuit\nmat(circuit)  # the matrix representation of the circuit\napply!(zero_state(3), circuit)  # apply the circuit to a zero state","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"More details about available blocks can be found in the manual of Blocks.","category":"page"},{"location":"quick-start.html#Create-Hamiltonian","page":"Quick Start","title":"Create Hamiltonian","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"We can create a simple Ising Hamiltonian on 1D chain as following","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"h = sum([kron(5, i=>Z, mod1(i+1, 5)=>Z) for i in 1:5])  # a 5-qubit Ising Hamiltonian\nmat(h)  # the matrix representation of the Hamiltonian","category":"page"},{"location":"quick-start.html#Differentiating-a-quantum-circuit","page":"Quick Start","title":"Differentiating a quantum circuit","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"Yao has its own automatic differentiation rule implemented, this allows one obtain gradients of a loss function by simply putting a ' mark following expect or fidelity, e.g","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"To obtain the gradient of the quantum Fourier transform circuit with respect to its parameters, one can use the following code","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"grad_state, grad_circuit_params = expect'(kron(X, X, I2) + kron(I2, X, X), zero_state(3)=>qft(3))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"where kron(X, X, I2) + kron(I2, X, X) is the target Hamiltonian, zero_state(3) is the initial state, qft(3) is the quantum Fourier transform circuit. The return value is a vector, each corresponding to the gradient of the loss function with respect to a parameter in the circuit. The list of parameters can be obtained by parameters function.","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"parameters(qft(3))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"To obtain the gradient of the fidelity between a state parameterized by a quantum circuit and a target state, one can use the following code","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"((grad_state1, grad_circuit1), grad_state2) = fidelity'(zero_state(3)=>qft(3), ghz_state(3))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"where zero_state(3) is the initial state, qft(3) is the quantum Fourier transform circuit, ghz_state(3) is the target state.","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"The automatic differentiation functionality can also be accessed by interfacing with the machine learning libraries Zygote.","category":"page"},{"location":"quick-start.html#Plot-quantum-circuits","page":"Quick Start","title":"Plot quantum circuits","text":"","category":"section"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"The component package YaoPlots provides plotting for quantum circuits and ZX diagrams. You can use it to visualize your quantum circuits in VSCode, Jupyter notebook or Pluto notebook.","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"using Yao.EasyBuild, Yao.YaoPlots\nusing Compose\n\n# show a qft circuit\nvizcircuit(qft_circuit(5))","category":"page"},{"location":"quick-start.html","page":"Quick Start","title":"Quick Start","text":"More details about the plotting can be found in the manual: Quantum Circuit Visualization.","category":"page"},{"location":"notes.html#How-to-overload-exist-method-for-a-block","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"","category":"section"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"every block has two method: mat & apply!, overload mat to define how to gather this block's matrix form, overload apply! to define how to apply this block to a register.","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"Prototypes:","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"apply!(reg, block)\nmat(block)","category":"page"},{"location":"performancetips.html#Performance-Tips","page":"Performance Tips","title":"Performance Tips","text":"","category":"section"},{"location":"performancetips.html#Use-the-correct-block-types","page":"Performance Tips","title":"Use the correct block types","text":"","category":"section"},{"location":"performancetips.html#put-v.s.-subroutine","page":"Performance Tips","title":"put v.s. subroutine","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"While both blocks maps a subblock to a subset of qudits, their implementations are purposes are quite different. The put block applies the gate in a in-place manner, which requires the static matrix representation of its subblock. It works the best when the subblock is small.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"The subroutine block is for running a sub-program in a subset of qubits. It first sets target qubits as active qubits using the focus! function, then apply the gates on active qubits. Finally, it unsets the active qubits with the relax! function.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"julia> using Yao\n\njulia> reg = rand_state(20);\n\njulia> @time apply(reg, put(20, 1:6=>EasyBuild.qft_circuit(6)));  # second run\n  0.070245 seconds (1.32 k allocations: 16.525 MiB)\n\njulia> @time apply(reg, subroutine(20, EasyBuild.qft_circuit(6), 1:6));  # second run\n  0.036840 seconds (1.07 k allocations: 16.072 MiB)","category":"page"},{"location":"performancetips.html#repeat-v.s.-put","page":"Performance Tips","title":"repeat v.s. put","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"repeat block is not only an alias of a chain of put, sometimes it can provide speed ups due to the different implementations.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"julia> reg = rand_state(20);\n\njulia> @time apply!(reg, repeat(20, X));\n  0.002252 seconds (5 allocations: 656 bytes)\n\njulia> @time apply!(reg, chain([put(20, i=>X) for i=1:20]));\n  0.049362 seconds (82.48 k allocations: 4.694 MiB, 47.11% compilation time)","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"Other gates accelerated by repeat include: X, Y, Z, S, T, Sdag, and Tdag.","category":"page"},{"location":"performancetips.html#Diagonal-matrix-in-time_evole","page":"Performance Tips","title":"Diagonal matrix in time_evole","text":"","category":"section"},{"location":"performancetips.html#Register-storage","page":"Performance Tips","title":"Register storage","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"One can use transposed storage and normal storage for computing batched registers. The transposed storage is used by default because it is often faster in practice. One can use transpose_storage to convert the storage.","category":"page"},{"location":"performancetips.html#Multithreading","page":"Performance Tips","title":"Multithreading","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"Multithreading can be switched on by starting Julia in with a global environment variable JULIA_NUM_THREAD","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"$ JULIA_NUM_THREAD=4 julia xxx.jl","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"Check the Julia Multi-Treading manual for details.","category":"page"},{"location":"performancetips.html#GPU-backend","page":"Performance Tips","title":"GPU backend","text":"","category":"section"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"The GPU backend is supported in CuYao.","category":"page"},{"location":"performancetips.html","page":"Performance Tips","title":"Performance Tips","text":"julia> using Yao, CuYao\n\njulia> reg = CuYao.cu(rand_state(20));\n\njulia> circ = Yao.EasyBuild.qft_circuit(20);\n\njulia> apply!(reg, circ)\nArrayReg{2, ComplexF64, CuArray...}\n    active qubits: 20/20\n    nlevel: 2","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"CurrentModule = YaoArrayRegister\nDocTestSetup = quote\n    using Yao\n    using BitBasis\n    using YaoAPI\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/registers.html#registers","page":"Quantum Registers","title":"Quantum Registers","text":"","category":"section"},{"location":"man/registers.html#Constructing-quantum-states","page":"Quantum Registers","title":"Constructing quantum states","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"A quantum register is a quantum state or a batch of quantum states. Qubits in a Yao register can be active or inactive. Only active qubits are visible to quantum operators, which enables applying quantum operators on a subset of qubits. For example, Suppose we want to run a quantum Fourier transformation circuit of size 4 on qubits (1, 3, 5, 7) with the focus! function, we first set these qubits to active qubits the rest to inactive, then we apply the circuit on the active qubits, and finally we switch back to the original configuration with the relax! function.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Yao provides two types of quantum registers ArrayReg and BatchedArrayReg. Both use matrices as the storage.  For example, for a quantum register with a active qubits, r remaining qubits and batch size b, the storage is as follows.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"(Image: )","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The first dimension of size 2^a is for active qubits, only this subset of qubits are allowed to interact with quantum operators. Since we reshaped the state vector into a matrix, applying a quantum operator can be conceptually represented as a matrix-matrix multiplication.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Various quantum states can be created with the following functions.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"using Yao\nreg = ArrayReg([0, 1, -1+0.0im, 0])  # a unnormalized Bell state |01⟩ - |10⟩\nstatevec(reg)  # a quantum state is represented as a vector\nprint_table(reg)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_zero = zero_state(3)  # create a zero state |000⟩\nprint_table(reg_zero)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_rand = rand_state(ComplexF32, 3)  # a random state","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_uniform = uniform_state(ComplexF32, 3)  # a uniform state\nprint_table(reg_uniform)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_prod = product_state(bit\"110\")  # a product state\nbit\"110\"[3]  # the bit string is in little-endian format\nprint_table(reg_prod)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_ghz = ghz_state(3)  # a GHZ state\nprint_table(reg_ghz)\nvon_neumann_entropy(reg_ghz, (1, 3)) / log(2) # entanglement entropy between qubits (1, 3) and (2,)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_rand3 = rand_state(3, nlevel=3)  # a random qutrit state\nreg_prod3 = product_state(dit\"120;3\")  # a qudit product state, what follows \";\" symbol denotes the number of levels\nprint_table(reg_prod3)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg_batch = rand_state(3; nbatch=2)  # a batch of 2 random qubit states\nprint_table(reg_batch)\nreg_view = viewbatch(reg_batch, 1)  # view the first state in the batch\nprint_table(reg_view)","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg = rand_state(3; nlevel=4, nbatch=2)\nnqudits(reg)  # the total number of qudits\nnactive(reg)  # the number of active qubits\nnremain(reg)  # the number of remaining qubits\nnbatch(reg)  # the batch size\nnlevel(reg)  # the number of levels of each qudit\nbasis(reg)  # the basis of the register\nfocus!(reg, 1:2)  # set on the first two qubits as active\nnactive(reg)  # the number of active qubits\nbasis(reg)  # the basis of the register\nrelax!(reg)  # set all qubits as active\nnactive(reg)  # the number of active qubits\nreorder!(reg, (3,1,2))  # reorder the qubits\n\nreg1 = product_state(bit\"111\");\nreg2 = ghz_state(3);\nfidelity(reg1, reg2)  # the fidelity between two states\ntracedist(reg1, reg2)  # the trace distance between two states","category":"page"},{"location":"man/registers.html#Arithmetic-operations","page":"Quantum Registers","title":"Arithmetic operations","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The list of arithmetic operations for ArrayReg include ","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"+\n-\n*\n/ (scalar)\nadjoint","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg1 = rand_state(3)\nreg2 = rand_state(3)\nreg3 = reg1 + reg2  # addition\nnormalize!(reg3)  # normalize the state\nisnormalized(reg3)  # check if the state is normalized\nreg1 - reg2  # subtraction\nreg1 * 2  # scalar multiplication\nreg1 / 2  # scalar division\nreg1'  # adjoint\nreg1' * reg1  # inner product","category":"page"},{"location":"man/registers.html#Register-operations","page":"Quantum Registers","title":"Register operations","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg0 = rand_state(3)\nappend_qudits!(reg0, 2)  # append 2 qubits\ninsert_qudits!(reg0, 2, 2)  # insert 2 qubits at the 2nd position","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"Comparing with using matrix multiplication for quantum simulation, using specialized instructions are much faster and memory efficient. These instructions are specified with the instruct! function.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg = zero_state(2)\ninstruct!(reg, Val(:H), (1,))  # apply a Hadamard gate on the first qubit\nprint_table(reg)","category":"page"},{"location":"man/registers.html#Measurement","page":"Quantum Registers","title":"Measurement","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We use the measure! function returns the measurement outcome and collapses the state after the measurement. We also have some \"cheating\" version measure that does not collapse states to facilitate classical simulation.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"measure!(reg0, 1)  # measure the qubit, the state collapses\nmeasure!(reg0)  # measure all qubits\nmeasure(reg0, 3)  # measure the qubit at location 3, the state does not collapse (hacky)\nreorder!(reg0, 7:-1:1)  # reorder the qubits\nmeasure!(reg0)\ninvorder!(reg0)  # reverse the order of qubits\nmeasure!(reg0)\nmeasure!(RemoveMeasured(), reg0, 2:4)  # remove the measured qubits\nreg0\n\nreg1 = ghz_state(3)\nselect!(reg1, bit\"111\")  # post-select the |111⟩ state\nisnormalized(reg1)  # check if the state is normalized","category":"page"},{"location":"man/registers.html#Density-matrices","page":"Quantum Registers","title":"Density matrices","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"reg = rand_state(3)\nrho = density_matrix(reg)  # the density matrix of the state\nrand_density_matrix(3)  # a random density matrix\ncompletely_mixed_state(3)  # a completely mixed state\npartial_tr(rho, 1)  # partial trace on the first qubit\npurify(rho)  # purify the state\nvon_neumann_entropy(rho)  # von Neumann entropy\nmutual_information(rho, 1, 2)  # mutual information between qubits 1 and 2","category":"page"},{"location":"man/registers.html#API","page":"Quantum Registers","title":"API","text":"","category":"section"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The constructors and functions for quantum registers are listed below.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"AbstractRegister\nAbstractArrayReg\nArrayReg\nBatchedArrayReg","category":"page"},{"location":"man/registers.html#YaoAPI.AbstractRegister","page":"Quantum Registers","title":"YaoAPI.AbstractRegister","text":"AbstractRegister{D}\n\nAbstract type for quantum registers. Type parameter D is the number of levels in each qudit. For qubits, D = 2.\n\nRequired methods\n\ninstruct!\nnqudits\nnactive\ninsert_qubits!\nappend_qubits!\nfocus!\nrelax!\nreorder!\ninvorder!\n\nOptional methods\n\nnlevel\nnremain\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoArrayRegister.AbstractArrayReg","page":"Quantum Registers","title":"YaoArrayRegister.AbstractArrayReg","text":"AbstractArrayReg\n\nAbstract type for quantum registers that are represented by an array.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoArrayRegister.ArrayReg","page":"Quantum Registers","title":"YaoArrayRegister.ArrayReg","text":"ArrayReg{D,T,MT<:AbstractMatrix{T}} <: AbstractArrayRegister{D}\nArrayReg{D}(raw)\nArrayReg(raw::AbstractVecOrMat; nlevel=2)\nArrayReg(r::ArrayReg)\n\nSimulated full amplitude register type, it uses an array to represent corresponding one or a batch of quantum states. T is the numerical type for each amplitude, it is ComplexF64 by default.\n\nwarning: Warning\nArrayReg constructor will not normalize the quantum state. If you need a normalized quantum state remember to use normalize!(register) on the register.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoArrayRegister.BatchedArrayReg","page":"Quantum Registers","title":"YaoArrayRegister.BatchedArrayReg","text":"BatchedArrayReg{D,T,MT<:AbstractMatrix{T}} <: AbstractArrayReg{D}\nBatchedArrayReg(raw, nbatch; nlevel=2)\nBatchedArrayReg{D}(raw, nbatch)\n\nSimulated batched full amplitude register type, it uses an array to represent corresponding one or a batch of quantum states. T is the numerical type for each amplitude, it is ComplexF64 by default.\n\nwarning: Warning\nBatchedArrayReg constructor will not normalize the quantum state. If you need a normalized quantum state remember to use normalize!(register) on the register.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"arrayreg\nproduct_state\nzero_state\nzero_state_like\nrand_state\nuniform_state\nghz_state\nclone","category":"page"},{"location":"man/registers.html#YaoArrayRegister.arrayreg","page":"Quantum Registers","title":"YaoArrayRegister.arrayreg","text":"arrayreg(state; nbatch::Union{Integer,NoBatch}=NoBatch(), nlevel::Integer=2)\n\nCreate an array register, if nbatch is a integer, it will return a BatchedArrayReg.\n\n\n\n\n\narrayreg([T=ComplexF64], bit_str; nbatch=NoBatch())\n\nConstruct an array register from bit string literal. For bit string literal please read @bit_str.\n\nExamples\n\njulia> arrayreg(bit\"1010\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> arrayreg(ComplexF32, bit\"1010\")\nArrayReg{2, ComplexF32, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.product_state","page":"Quantum Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], dit_str; nbatch=NoBatch(), no_transpose_storage=false)\nproduct_state([T=ComplexF64], nbits::Int, val::Int; nbatch=NoBatch(), nlevel=2, no_transpose_storage=false)\nproduct_state([T=ComplexF64], vector; nbatch=NoBatch(), nlevel=2, no_transpose_storage=false)\n\nCreate an ArrayReg of product state. The configuration can be specified with a dit string, which can be defined with @bit_str or @dit_str. Or equivalently, it can be specified explicitly with nbits, val and nlevel. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> reg = product_state(dit\"120;3\"; nbatch=2)\nBatchedArrayReg{3, ComplexF64, Transpose...}\n    active qudits: 3/3\n    nlevel: 3\n    nbatch: 2\n\njulia> measure(reg)\n1×2 Matrix{BitBasis.DitStr64{3, 3}}:\n 120 ₍₃₎  120 ₍₃₎\n\njulia> product_state(bit\"100\"; nbatch=2);\n\njulia> r1 = product_state(ComplexF32, bit\"001\"; nbatch=2);\n\njulia> r2 = product_state(ComplexF32, [1, 0, 0]; nbatch=2);\n\njulia> r3 = product_state(ComplexF32, 3, 0b001; nbatch=2);\n\njulia> r1 ≈ r2   # because we read bit strings from right to left, vectors from left to right.\ntrue\n\njulia> r1 ≈ r3\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.zero_state","page":"Quantum Registers","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int; nbatch::Int=NoBatch())\n\nCreate an AbstractArrayReg that initialized to state 0rangle^otimes n. See also product_state, rand_state, uniform_state and ghz_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{2, ComplexF32, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nBatchedArrayReg{2, ComplexF32, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 3\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.zero_state_like","page":"Quantum Registers","title":"YaoArrayRegister.zero_state_like","text":"zero_state_like(register, n) -> AbstractRegister\n\nCreate a register initialized to zero from an existing one.\n\nExamples\n\njulia> reg = rand_state(3; nbatch=2);\n\njulia> zero_state_like(reg, 2)\nBatchedArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/2\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.rand_state","page":"Quantum Registers","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], n::Int; nbatch=NoBatch(), no_transpose_storage=false)\n\nCreate a random AbstractArrayReg with total number of qudits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nBatchedArrayReg{2, ComplexF64, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.uniform_state","page":"Quantum Registers","title":"YaoArrayRegister.uniform_state","text":"uniform_state([T=ComplexF64], n; nbatch=NoBatch(), no_transpose_storage=false)\n\nCreate a uniform state:\n\nfrac1sqrt2^n sum_k=0^2^n-1 krangle\n\nThis state can also be created by applying H (Hadmard gate) on 0000 state.\n\nExample\n\njulia> uniform_state(4; nbatch=2)\nBatchedArrayReg{2, ComplexF64, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\njulia> uniform_state(ComplexF32, 4; nbatch=2)\nBatchedArrayReg{2, ComplexF32, Transpose...}\n    active qubits: 4/4\n    nlevel: 2\n    nbatch: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.ghz_state","page":"Quantum Registers","title":"YaoArrayRegister.ghz_state","text":"ghz_state([T=ComplexF64], n::Int; nbatch::Int=NoBatch())\n\nCreate a GHZ state (or a cat state) that defined as\n\nfrac0rangle^otimes n + 1rangle^otimes nsqrt2\n\nExamples\n\njulia> ghz_state(4)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 4/4\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.clone","page":"Quantum Registers","title":"YaoAPI.clone","text":"clone(register, n)\n\nCreate an ArrayReg by cloning the original register for n times on batch dimension. This function is only for emulation.\n\nExample\n\njulia> clone(arrayreg(bit\"101\"; nbatch=3), 4)\nBatchedArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n    nbatch: 12\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The following functions are for querying the properties of a quantum register.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"nqudits\nnqubits\nnactive\nnremain\nnbatch\nnlevel\nfocus!\nfocus\nrelax!\nexchange_sysenv","category":"page"},{"location":"man/registers.html#YaoAPI.nqudits","page":"Quantum Registers","title":"YaoAPI.nqudits","text":"nqudits(register) -> Int\n\nReturns the total number of qudits in register.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nqubits","page":"Quantum Registers","title":"YaoAPI.nqubits","text":"nqubits(register) -> Int\n\nReturns the (total) number of qubits. See nactive, nremain for more details.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nactive","page":"Quantum Registers","title":"YaoAPI.nactive","text":"nactive(register) -> Int\n\nReturns the number of active qudits in register. Here, active qudits means the system qubits that operators can be applied on.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nremain","page":"Quantum Registers","title":"YaoAPI.nremain","text":"nremain(register) -> Int\n\nReturns the number of inactive qudits in register. It equals to subtracting nqudits and nactive.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.nbatch","page":"Quantum Registers","title":"YaoArrayRegister.nbatch","text":"nbatch(register) -> Union{Int,NoBatch()}\n\nReturns the number of batches.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.nlevel","page":"Quantum Registers","title":"YaoAPI.nlevel","text":"nlevel(x)\n\nNumber of levels in each qudit.\n\nExamples\n\njulia> nlevel(X)\n2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.focus!","page":"Quantum Registers","title":"YaoAPI.focus!","text":"focus!(register, locs) -> register\nfocus!(locs...) -> f(register) -> register\n\nSet the active qubits to focused locations, usually used to execute a subroutine. If register is not provided, returns a lambda that takes a register as input.\n\nExamples\n\njulia> reg = product_state(bit\"01101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> focus!(reg, (1,3,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/5\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 111 ₍₂₎\n 111 ₍₂₎\n 111 ₍₂₎\n\njulia> measure(apply(reg, put(3, 2=>X)); nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 101 ₍₂₎\n 101 ₍₂₎\n 101 ₍₂₎\n\nHere, we prepare a product state and only look at the qubits 1, 3 and 4. The measurement results are all ones. With the focued register, we can apply a block of size 3 on it, even though the number of qubits is 5.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.focus","page":"Quantum Registers","title":"YaoAPI.focus","text":"focus(f, register, locs)\n\nCall a callable f under the context of focus. See also focus!.\n\nExamples\n\nTo print the focused register\n\njulia> r = arrayreg(bit\"101100\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 6/6\n    nlevel: 2\n\njulia> focus(x->(println(x);x), r, (1, 2));\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/6\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.relax!","page":"Quantum Registers","title":"YaoAPI.relax!","text":"relax!(register[, locs]; to_nactive=nqudits(register)) -> register\nrelax!(locs::Int...; to_nactive=nqudits(register)) -> f(register) -> register\n\nInverse transformation of focus!, where to_nactive is the number  of active bits for target register. If the register is not provided, returns a lambda function that takes a register as input.\n\nExamples\n\njulia> reg = product_state(bit\"01101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> focus!(reg, (1,3,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/5\n    nlevel: 2\n\njulia> relax!(reg, (1,3,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.exchange_sysenv","page":"Quantum Registers","title":"YaoArrayRegister.exchange_sysenv","text":"exchange_sysenv(reg::AbstractArrayReg) -> AbstractRegister\n\nExchange system (focused qubits) and environment (remaining qubits).\n\njulia> reg = rand_state(5)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> focus!(reg, (2,4))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/5\n    nlevel: 2\n\njulia> exchange_sysenv(reg)\nArrayReg{2, ComplexF64, Adjoint...}\n    active qubits: 3/5\n    nlevel: 2\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The following functions are for querying the state of a quantum register.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"state\nbasis\nstatevec\nrelaxedvec\nhypercubic\nrank3\nviewbatch\ntranspose_storage","category":"page"},{"location":"man/registers.html#YaoArrayRegister.state","page":"Quantum Registers","title":"YaoArrayRegister.state","text":"state(register::AbstractArrayReg) -> Matrix\n\nReturns the raw array storage of register. See also statevec.\n\n\n\n\n\nstate(ρ::DensityMatrix) -> Matrix\n\nReturn the raw state of density matrix ρ.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#BitBasis.basis","page":"Quantum Registers","title":"BitBasis.basis","text":"basis(ditstr) -> UnitRange{DitStr{D,N,T}}\nbasis(DitStr{D,N,T}) -> UnitRange{DitStr{D,N,T}}\n\nReturns the UnitRange for basis in Hilbert Space of qudits.\n\n\n\n\n\nbasis(register) -> UnitRange\n\nReturns an UnitRange of the all the bits in the Hilbert space of given register.\n\njulia> collect(basis(rand_state(3)))\n8-element Vector{DitStr{2, 3, Int64}}:\n 000 ₍₂₎\n 001 ₍₂₎\n 010 ₍₂₎\n 011 ₍₂₎\n 100 ₍₂₎\n 101 ₍₂₎\n 110 ₍₂₎\n 111 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.statevec","page":"Quantum Registers","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1 (i.e. nactive(r) = nqudits(r)). See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.relaxedvec","page":"Quantum Registers","title":"YaoArrayRegister.relaxedvec","text":"relaxedvec(r::AbstractArrayReg) -> AbstractArray\n\nReturn a vector representation of state, with all qudits activated. See also state, statevec.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#BitBasis.hypercubic","page":"Quantum Registers","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\nhypercubic(r::ArrayReg) -> AbstractArray\n\nReturn the hypercubic representation (high dimensional tensor) of this register, only active qudits are considered. See also rank3 and state.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.rank3","page":"Quantum Registers","title":"YaoArrayRegister.rank3","text":"rank3(r::ArrayReg)\n\nReturn the rank 3 tensor representation of state, the 3 dimensions are (activated space, remaining space, batch dimension). See also hypercubic and state.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.viewbatch","page":"Quantum Registers","title":"YaoAPI.viewbatch","text":"viewbatch(register, i::Int) -> AbstractRegister\n\nReturns the i-th single register of a batched register. The returned instance is a view of the original register, i.e. inplace operation changes the original register directly.\n\nExamples\n\njulia> reg = zero_state(5; nbatch=2);\n\njulia> apply!(viewbatch(reg, 2), put(5, 2=>X));\n\njulia> measure(reg; nshots=3)\n3×2 Matrix{DitStr{2, 5, Int64}}:\n 00000 ₍₂₎  00010 ₍₂₎\n 00000 ₍₂₎  00010 ₍₂₎\n 00000 ₍₂₎  00010 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.transpose_storage","page":"Quantum Registers","title":"YaoArrayRegister.transpose_storage","text":"transpose_storage(register) -> register\n\nTranspose the register storage. Sometimes transposed storage provides better performance for batched simulation.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The following functions are for arithmetic operations on quantum registers.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"AdjointArrayReg","category":"page"},{"location":"man/registers.html#YaoArrayRegister.AdjointArrayReg","page":"Quantum Registers","title":"YaoArrayRegister.AdjointArrayReg","text":"AdjointArrayReg{D,T,MT} = AdjointRegister{D,<:AbstractArrayReg{D,T,MT}}\n\nAdjoint array register type, it is used to represent the bra in the Dirac notation.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We also have some faster inplace versions of arithematic operations","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"regadd!\nregsub!\nregscale!","category":"page"},{"location":"man/registers.html#YaoArrayRegister.regadd!","page":"Quantum Registers","title":"YaoArrayRegister.regadd!","text":"regadd!(target, source)\n\nInplace version of + that accumulates source to target.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.regsub!","page":"Quantum Registers","title":"YaoArrayRegister.regsub!","text":"regsub!(target, source)\n\nInplace version of - that subtract source from target.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.regscale!","page":"Quantum Registers","title":"YaoArrayRegister.regscale!","text":"regscale!(target, x)\n\nInplace version of multiplying a scalar x to target.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"We also define the following functions for state normalization, and distance measurement.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"normalize!\nisnormalized\nfidelity\ntracedist","category":"page"},{"location":"man/registers.html#LinearAlgebra.normalize!","page":"Quantum Registers","title":"LinearAlgebra.normalize!","text":"normalize!(r::AbstractArrayReg)\n\nNormalize the register r by its 2-norm. It changes the register directly.\n\nExamples\n\nThe following code creates a normalized GHZ state.\n\njulia> reg = product_state(bit\"000\") + product_state(bit\"111\");\n\njulia> norm(reg)\n1.4142135623730951\n\njulia> isnormalized(reg)\nfalse\n\njulia> normalize!(reg);\n\njulia> isnormalized(reg)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.isnormalized","page":"Quantum Registers","title":"YaoArrayRegister.isnormalized","text":"isnormalized(r::ArrayReg) -> Bool\n\nReturns true if the register r is normalized.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.fidelity","page":"Quantum Registers","title":"YaoAPI.fidelity","text":"fidelity(register1, register2) -> Real/Vector{<:Real}\nfidelity'(pair_or_reg1, pair_or_reg2) -> (g1, g2)\n\nReturn the fidelity between two states. Calcuate the fidelity between r1 and r2, if r1 or r2 is not pure state (nactive(r) != nqudits(r)), the fidelity is calcuated by purification. See also: http://iopscience.iop.org/article/10.1088/1367-2630/aa6a4b/meta\n\nObtain the gradient with respect to registers and circuit parameters. For pair input ψ=>circuit, the returned gradient is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nDefinition\n\nThe fidelity of two quantum state for qudits is defined as:\n\nF(ρ σ) = tr(sqrtsqrtρσsqrtρ)\n\nnote: Note\nThis definition is different from the one in Wiki by a square.\n\nExamples\n\njulia> reg1 = uniform_state(3);\n\njulia> reg2 = zero_state(3);\n\njulia> fidelity(reg1, reg2)\n0.35355339059327373\n\nReferences\n\nJozsa R. Fidelity for mixed quantum states[J]. Journal of modern optics, 1994, 41(12): 2315-2323.\nNielsen M A, Chuang I. Quantum computation and quantum information[J]. 2002.\n\nnote: Note\nThe original definition of fidelity F was from \"transition probability\", defined by Jozsa in 1994, it is the square of what we use here.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.tracedist","page":"Quantum Registers","title":"YaoAPI.tracedist","text":"tracedist(register1, register2)\n\nReturn the trace distance of register1 and register2.\n\nDefinition\n\nTrace distance is defined as following:\n\nfrac12  A - B _rm tr\n\nIt takes values between 0 and 1.\n\nExamples\n\njulia> reg1 = uniform_state(3);\n\njulia> reg2 = zero_state(3);\n\njulia> tracedist(reg1, reg2)\n0.9354143466934852\n\nReferences\n\nhttps://en.wikipedia.org/wiki/Trace_distance\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The following functions are for adding and reordering qubits in a quantum register.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"insert_qudits!\ninsert_qubits!\nappend_qudits!\nappend_qubits!\nreorder!\ninvorder!","category":"page"},{"location":"man/registers.html#YaoAPI.insert_qudits!","page":"Quantum Registers","title":"YaoAPI.insert_qudits!","text":"insert_qudits!(register, loc::Int, nqudits::Int) -> register\ninsert_qudits!(loc::Int, nqudits::Int) -> λ(register)\n\nInsert qudits to given register in state |0>. i.e. |psi> -> join(|psi>, |0...>, |psi>), increased bits have higher indices.\n\nExamples\n\njulia> reg = product_state(bit\"01101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> insert_qudits!(reg, 2, 2)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 7/7\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 7, Int64}}:\n 0110001 ₍₂₎\n 0110001 ₍₂₎\n 0110001 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.insert_qubits!","page":"Quantum Registers","title":"YaoAPI.insert_qubits!","text":"insert_qubits!(register, loc::Int, nqubits::Int=1) -> register\ninsert_qubits!(loc::Int, nqubits::Int=1) -> λ(register)\n\nInsert n qubits to given register in state |0>. It is an alias of insert_qudits! function.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.append_qudits!","page":"Quantum Registers","title":"YaoAPI.append_qudits!","text":"append_qudits!(register, n::Int) -> register\nappend_qudits!(n::Int) -> λ(register)\n\nAdd n qudits to given register in state |0>. i.e. |psi> -> |000> ⊗ |psi>, increased bits have higher indices.\n\nIf only an integer is provided, then returns a lambda function.\n\nExamples\n\njulia> reg = product_state(bit\"01101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2\n\njulia> append_qudits!(reg, 2)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 7/7\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 7, Int64}}:\n 0001101 ₍₂₎\n 0001101 ₍₂₎\n 0001101 ₍₂₎\n\nNote here, we read the bit string from right to left.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.append_qubits!","page":"Quantum Registers","title":"YaoAPI.append_qubits!","text":"append_qubits!(register, n::Int) -> register\nappend_qubits!(n::Int) -> λ(register)\n\nAdd n qudits to given register in state |0>. It is an alias of append_qudits! function.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.reorder!","page":"Quantum Registers","title":"YaoAPI.reorder!","text":"reorder!(reigster, orders)\n\nReorder the locations of register by input orders. For a 3-qubit register, an order (i, j, k) specifies the following reordering of qubits\n\nmove the first qubit go to i,\nmove the second qubit go to j,\nmove the third qubit go to k.\n\nnote: Note\nThe convention of reorder! is different from the permutedims function, one can use the sortperm function to relate the permutation order and the order in this function.\n\nExamples\n\njulia> reg = product_state(bit\"010101\");\n\njulia> reorder!(reg, (1,4,2,5,3,6));\n\njulia> measure(reg)\n1-element Vector{DitStr{2, 6, Int64}}:\n 000111 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.invorder!","page":"Quantum Registers","title":"YaoAPI.invorder!","text":"invorder!(register)\n\nInverse the locations of the register.\n\nExamples\n\njulia> reg = product_state(bit\"010101\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 6/6\n    nlevel: 2\n\njulia> measure(invorder!(reg); nshots=3)\n3-element Vector{DitStr{2, 6, Int64}}:\n 101010 ₍₂₎\n 101010 ₍₂₎\n 101010 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The instruct! function is for applying quantum operators on a quantum register.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"YaoArrayRegister.instruct!","category":"page"},{"location":"man/registers.html#YaoAPI.instruct!","page":"Quantum Registers","title":"YaoAPI.instruct!","text":"instruct!([nlevel=Val(2), ]state, operator, locs[, control_locs, control_configs, theta])\n\nUnified interface for applying an operator to a quantum state. It modifies the state directly.\n\nArguments\n\nnlevel is the number of levels in each qudit,\nstate is a vector or matrix representing the quantum state, where the first dimension is the active qubit dimension, the second is the batch dimension.\noperator is a quantum operator, which can be Val(GATE_SYMBOL) or a matrix.\nlocs::Tuple is a tuple for specifying the locations this gate applied.\ncontrol_locs::Tuple and control_configs are tuples for specifying the control locations and control values.\ntheta::Real is the parameter for the gate, e.g. Val(:Rx) gate takes a real number of its parameter.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The following functions are for measurement and post-selection.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"measure!\nmeasure\nselect!\nselect\ncollapseto!\nprobs\nmost_probable","category":"page"},{"location":"man/registers.html#YaoAPI.measure!","page":"Quantum Registers","title":"YaoAPI.measure!","text":"measure!([postprocess,] [operator, ]register[, locs]; rng=Random.GLOBAL_RNG)\n\nMeasure current active qudits or qudits at locs. If the operator is not provided, it will measure on the computational basis and collapse to a product state. Otherwise, the quantum state collapse to the subspace corresponds to the resulting eigenvalue of the observable.\n\nArguments\n\npostprocess is the postprocessing method, it can be\nNoPostProcess() (default).\nResetTo(config), reset to result state to config. It can not be used if operator is provided, because measuring an operator in general does not return a product state.\nRemoveMeasured(), remove the measured qudits from the register. It is also incompatible with the operator argument.\noperator::AbstractBlock is the operator to measure.\nregister::AbstractRegister is the quantum state.\nlocs is the qubits to performance the measurement. If locs is not provided, all current active qudits are measured (regarding to active qudits,\n\nsee focus! and relax!).\n\nKeyword arguments\n\nrng is the random number generator.\n\nExamples\n\nThe following example measures a random state on the computational basis and reset it to a certain bitstring value.\n\njulia> reg = rand_state(3);\n\njulia> measure!(ResetTo(bit\"011\"), reg)\n110 ₍₂₎\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 011 ₍₂₎\n 011 ₍₂₎\n 011 ₍₂₎\n\njulia> measure!(RemoveMeasured(), reg, (1,2))\n11 ₍₂₎\n\njulia> reg  # removed qubits are not usable anymore\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 1/1\n    nlevel: 2\n\nMeasuring an operator will project the state to the subspace associated with the returned eigenvalue.\n\njulia> reg = uniform_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> print_table(reg)\n000 ₍₂₎   0.35355 + 0.0im\n001 ₍₂₎   0.35355 + 0.0im\n010 ₍₂₎   0.35355 + 0.0im\n011 ₍₂₎   0.35355 + 0.0im\n100 ₍₂₎   0.35355 + 0.0im\n101 ₍₂₎   0.35355 + 0.0im\n110 ₍₂₎   0.35355 + 0.0im\n111 ₍₂₎   0.35355 + 0.0im\n\njulia> measure!(repeat(3, Z, 1:3), reg)\n-1.0 + 0.0im\n\njulia> print_table(reg)\n000 ₍₂₎   0.0 + 0.0im\n001 ₍₂₎   0.5 + 0.0im\n010 ₍₂₎   0.5 + 0.0im\n011 ₍₂₎   0.0 + 0.0im\n100 ₍₂₎   0.5 + 0.0im\n101 ₍₂₎   0.0 + 0.0im\n110 ₍₂₎   0.0 + 0.0im\n111 ₍₂₎   0.5 + 0.0im\n\nHere, we measured the parity operator, as a result,  the resulting state collapsed to the subspace with either even or odd parity.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.measure","page":"Quantum Registers","title":"YaoAPI.measure","text":"measure([, operator], register[, locs]; nshots=1, rng=Random.GLOBAL_RNG) -> Vector{Int}\n\nMeasure a quantum state and return measurement results of qudits. This measurement function a cheating version of measure! that does not collapse the input state. It also does not need to recompute the quantum state for performing multiple shots measurement.\n\nArguments\n\noperator::AbstractBlock is the operator to measure.\nregister::AbstractRegister is the quantum state.\nlocs is the qubits to performance the measurement. If locs is not provided, all current active qudits are measured (regarding to active qudits,\n\nsee focus! and relax!).\n\nKeyword arguments\n\nnshots::Int is the number of shots.\nrng is the random number generator.\n\nExamples\n\njulia> reg = product_state(bit\"110\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(reg; nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 110 ₍₂₎\n 110 ₍₂₎\n 110 ₍₂₎\n\njulia> measure(reg, (2,3); nshots=3)\n3-element Vector{DitStr{2, 2, Int64}}:\n 11 ₍₂₎\n 11 ₍₂₎\n 11 ₍₂₎\n\nThe following example switches to the X basis for measurement.\n\njulia> reg = apply!(product_state(bit\"100\"), repeat(3, H, 1:3))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(repeat(3, X, 1:3), reg; nshots=3)\n3-element Vector{ComplexF64}:\n -1.0 + 0.0im\n -1.0 + 0.0im\n -1.0 + 0.0im\n\njulia> reg = apply!(product_state(bit\"101\"), repeat(3, H, 1:3))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> measure(repeat(3, X, 1:3), reg; nshots=3)\n3-element Vector{ComplexF64}:\n 1.0 - 0.0im\n 1.0 - 0.0im\n 1.0 - 0.0im\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.select!","page":"Quantum Registers","title":"YaoAPI.select!","text":"select!(dest::AbstractRegister, src::AbstractRegister, bits::Integer...) -> AbstractRegister\nselect!(register::AbstractRegister, bits::Integer...) -> register\nselect!(b::Integer) -> f(register)\n\nselect a subspace of given quantum state based on input eigen state bits. See also select for the non-inplace version. If the register is not provided, it returns a lambda expression that takes a register as the input.\n\nExamples\n\njulia> reg = ghz_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> select!(reg, bit\"111\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 0/0\n    nlevel: 2\n\njulia> norm(reg)\n0.7071067811865476\n\nThe selection only works on the activated qubits, for example\n\njulia> reg = focus!(ghz_state(3), (1, 2))\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 2/3\n    nlevel: 2\n\njulia> select!(reg, bit\"11\")\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 0/1\n    nlevel: 2\n\njulia> statevec(reg)\n1×2 Matrix{ComplexF64}:\n 0.0+0.0im  0.707107+0.0im\n\ntip: Tip\nDevelopers should overload select!(r::RegisterType, bits::NTuple{N, <:Integer}) and do not assume bits has specific number of bits (e.g Int64), or it will restrict the its maximum available number of qudits.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.select","page":"Quantum Registers","title":"YaoAPI.select","text":"select(register, bits) -> AbstractRegister\n\nThe non-inplace version of select!.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.collapseto!","page":"Quantum Registers","title":"YaoAPI.collapseto!","text":"collapseto!(register, config)\n\nSet the register to bit string literal bit_str (or an equivalent integer). About bit string literal, see more in @bit_str. This interface is only for emulation.\n\nExamples\n\nThe following code collapse a random state to a certain state.\n\njulia> measure(collapseto!(rand_state(3), bit\"001\"); nshots=3)\n3-element Vector{DitStr{2, 3, Int64}}:\n 001 ₍₂₎\n 001 ₍₂₎\n 001 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.probs","page":"Quantum Registers","title":"YaoAPI.probs","text":"probs(register) -> Vector\n\nReturns the probability distribution of computation basis, aka xψ^2.\n\nExamples\n\njulia> reg = product_state(bit\"101\");\n\njulia> reg |> probs\n8-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n 0.0\n 0.0\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.most_probable","page":"Quantum Registers","title":"YaoArrayRegister.most_probable","text":"most_probable(reg::ArrayReg{D, T} where T, n::Int64) -> Any\n\n\nFind n most probable qubit configurations in a quantum register and return these configurations as a vector of DitStr instances.\n\nExample\n\njulia> most_probable(ghz_state(3), 2)\n2-element Vector{DitStr{2, 3, Int64}}:\n 000 ₍₂₎\n 111 ₍₂₎\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"The following functions are for density matrices.","category":"page"},{"location":"man/registers.html","page":"Quantum Registers","title":"Quantum Registers","text":"DensityMatrix\ndensity_matrix\nrand_density_matrix\ncompletely_mixed_state\npartial_tr\npurify\nvon_neumann_entropy\nmutual_information","category":"page"},{"location":"man/registers.html#YaoAPI.DensityMatrix","page":"Quantum Registers","title":"YaoAPI.DensityMatrix","text":"DensityMatrix{D,T,MT<:AbstractMatrix{T}} <: AbstractRegister{D}\nDensityMatrix{D}(state::AbstractMatrix)\nDensityMatrix(state::AbstractMatrix; nlevel=2)\n\nDensity matrix type, where state is a matrix. Type parameter D is the number of levels, it can also be specified by a keyword argument nlevel.\n\n\n\n\n\n","category":"type"},{"location":"man/registers.html#YaoAPI.density_matrix","page":"Quantum Registers","title":"YaoAPI.density_matrix","text":"density_matrix(register_or_rho[, locations])\n\nReturns the reduced density matrix for qubits at locations (default: all qubits).\n\nExamples\n\nThe following code gets the single site reduce density matrix for the GHZ state.\n\njulia> reg = ghz_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> density_matrix(reg, (2,)).state\n2×2 Matrix{ComplexF64}:\n 0.5+0.0im  0.0+0.0im\n 0.0-0.0im  0.5+0.0im\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.rand_density_matrix","page":"Quantum Registers","title":"YaoArrayRegister.rand_density_matrix","text":"rand_density_matrix([T=ComplexF64], n::Int; nlevel::Int=2, pure::Bool=false)\n\nGenerate a random density matrix by partial tracing half of the pure state.\n\nnote: Note\nThe generated density matrix is not strict hermitian due to rounding error. If you need to check hermicity, do not use ishermitian consider using isapprox(dm.state, dm.state') or explicit mark it as Hermitian.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.completely_mixed_state","page":"Quantum Registers","title":"YaoArrayRegister.completely_mixed_state","text":"completely_mixed_state([T=ComplexF64], n::Int; nlevel::Int=2)\n\nGenerate the completely mixed state with density matrix I(n) ./ nlevel^n.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.partial_tr","page":"Quantum Registers","title":"YaoAPI.partial_tr","text":"partial_tr(ρ, locs) -> DensityMatrix\n\nReturn a density matrix which is the partial traced on locs.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.purify","page":"Quantum Registers","title":"YaoAPI.purify","text":"purify(r::DensityMatrix; nbit_env::Int=nactive(r)) -> ArrayReg\n\nGet a purification of target density matrix.\n\nExamples\n\nThe following example shows how to measure a local operator on the register, reduced density matrix and the purified register. Their results should be consistent.\n\njulia> reg = ghz_state(3)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/3\n    nlevel: 2\n\njulia> r = density_matrix(reg, (2,));\n\njulia> preg = purify(r)\nArrayReg{2, ComplexF64, Array...}\n    active qubits: 1/2\n    nlevel: 2\n\njulia> isapprox(expect(Z + Y, preg), 0.0; atol=1e-10)\ntrue\n\njulia> isapprox(expect(Z + Y, r), 0.0; atol=1e-10)\ntrue\n\njulia> isapprox(expect(put(3, 2=>(Z + Y)), reg), 0.0; atol=1e-10)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.von_neumann_entropy","page":"Quantum Registers","title":"YaoArrayRegister.von_neumann_entropy","text":"von_neumann_entropy(reg::AbstractArrayReg, part)\nvon_neumann_entropy(ρ::DensityMatrix)\n\nThe entanglement entropy between part and the rest part in quantum state reg. If the input is a density matrix, it returns the entropy of a mixed state.\n\nExample\n\nThe Von Neumann entropy of any segment of GHZ state is log 2.\n\njulia> von_neumann_entropy(ghz_state(3), (1,2))\n0.6931471805599612\n\n\n\n\n\nvon_neumann_entropy(rho) -> Real\n\nReturn the von-Neumann entropy for the input density matrix:\n\n-rm Tr(rholnrho)\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoArrayRegister.mutual_information","page":"Quantum Registers","title":"YaoArrayRegister.mutual_information","text":"mutual_information(register_or_rho, part1, part2)\n\nReturns the mutual information between subsystems part1 and part2 of the input quantum register or density matrix:\n\nS(rho_A) + S(rho_B) - S(rho_AB)\n\nExample\n\nThe mutual information of a GHZ state of any two disjoint parts is always equal to log 2.\n\njulia> mutual_information(ghz_state(4), (1,), (3,4))\n0.6931471805599132\n\n\n\n\n\n","category":"function"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"EditURL = \"../../../examples/2.qft-phase-estimation/main.jl\"","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: )","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#example-qft","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Let's use Yao first","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using Yao","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#Quantum-Fourier-Transformation","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The Quantum Fourier Transformation (QFT) circuit is to repeat two kinds of blocks repeatly:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: qft-circuit)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The basic building block control phase shift gate is defined as","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R(k)=beginbmatrix\n1  0\n0  expleft(frac2pi i2^kright)\nendbmatrix","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Let's define block A and block B, block A is actually a control block.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"A (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Once you construct the blockl you can inspect its matrix using mat function. Let's construct the circuit in dash box A, and see the matrix of R_4 gate.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R4 = A(4, 1)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(n -> control(n, 4, 1 => shift(0.39269908169872414)))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"If you have read about preparing GHZ state, you probably know that in Yao, we could just leave the number of qubits, and it will be evaluated when possible.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"R4(5)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"nqubits: 5\ncontrol(4)\n└─ (1,) shift(0.39269908169872414)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"its matrix will be","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"mat(R4(5))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32×32 Diagonal{ComplexF64, Vector{ComplexF64}}:\n 1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅               ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im      ⋅              ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅           1.0+0.0im          ⋅    \n     ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅          ⋅              ⋅               ⋅              ⋅               ⋅              ⋅               ⋅      0.92388+0.382683im","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Then we repeat this control block over and over on different qubits, and put a Hadamard gate to ith qubit to construct i-th B block.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"B(n, k) = chain(n, j==k ? put(k=>H) : A(j, k) for j in k:n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"B (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"We need to input the total number of qubits n here because we have to iterate through from k-th location to the last.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now, let's construct the circuit by chaining all the B blocks together","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"qft(n) = chain(B(n, k) for k in 1:n)\nqft(4)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"nqubits: 4\nchain\n├─ chain\n│  ├─ put on (1)\n│  │  └─ H\n│  ├─ control(2)\n│  │  └─ (1,) shift(1.5707963267948966)\n│  ├─ control(3)\n│  │  └─ (1,) shift(0.7853981633974483)\n│  └─ control(4)\n│     └─ (1,) shift(0.39269908169872414)\n├─ chain\n│  ├─ put on (2)\n│  │  └─ H\n│  ├─ control(3)\n│  │  └─ (2,) shift(1.5707963267948966)\n│  └─ control(4)\n│     └─ (2,) shift(0.7853981633974483)\n├─ chain\n│  ├─ put on (3)\n│  │  └─ H\n│  └─ control(4)\n│     └─ (3,) shift(1.5707963267948966)\n└─ chain\n   └─ put on (4)\n      └─ H\n","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#Wrap-QFT-to-an-external-block","page":"Quantum Fourier Transformation and Phase Estimation","title":"Wrap QFT to an external block","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In most cases, functions are enough to wrap quantum circuits, like A and B we defined above, but sometimes, we need to dispatch specialized methods on certain kinds of quantum circuit, or we want to define an external block to export, thus, it's useful to be able to wrap circuit to custom blocks.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First, we define a new type as subtype of PrimitiveBlock since we are not going to use the subblocks of QFT, if you need to use its subblocks, it'd be better to define it under CompositeBlock.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"struct QFT <: PrimitiveBlock{2}\n    n::Int\nend\n\nYaoBlocks.nqudits(q::QFT) = q.n","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now, let's define its circuit","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"circuit(q::QFT) = qft(q.n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"circuit (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"And forward mat to its circuit's matrix","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"YaoBlocks.mat(::Type{T}, x::QFT) where T = mat(T, circuit(x))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"You may notice, it is a little ugly to print QFT at the moment, this is because we print the type summary by default, you can define your own printing by overloading print_block","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"YaoBlocks.print_block(io::IO, x::QFT) = print(io, \"QFT($(x.n))\")","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since it is possible to use FFT to simulate the results of QFT (like cheating), we could define our custom apply! method:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using FFTW, LinearAlgebra\n\nfunction YaoBlocks.apply!(r::ArrayReg, x::QFT)\n    α = sqrt(length(statevec(r)))\n    invorder!(r)\n    lmul!(α, ifft!(statevec(r)))\n    return r\nend","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now let's check if our apply! method is correct:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = rand_state(5)\nr1 = r |> copy |> QFT(5)\nr2 = r |> copy |> circuit(QFT(5))\nr1 ≈ r2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"true","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"We can get iQFT (inverse QFT) directly by calling adjoint","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"QFT(5)'","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":" [†]QFT(5)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"QFT and iQFT are different from FFT and IFFT in three ways,","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"they are different by a factor of sqrt2^n with n the number of qubits.\nthe bit numbering will exchange after applying QFT or iQFT.\ndue to the convention, QFT is more related to IFFT rather than FFT.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html#Phase-Estimation","page":"Quantum Fourier Transformation and Phase Estimation","title":"Phase Estimation","text":"","category":"section"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since we have QFT and iQFT blocks we can then use them to realize phase estimation circuit, what we want to realize is the following circuit:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"(Image: phase estimation)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First we call Hadamard gates repeatly on first n qubits.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Hadamards(n) = repeat(H, 1:n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Hadamards (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Then in dashed box B, we have controlled unitaries:","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ControlU(n, m, U) = chain(n+m, control(k, n+1:n+m=>matblock(U^(2^(k-1)))) for k in 1:n)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ControlU (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"each of them is a U of power 2^(k-1).","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since we will only apply the qft and Hadamard on first n qubits, we could use Subroutine, which creates a context of a sub-scope of the qubits.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"PE(n, m, U) =\n    chain(n+m, # total number of the qubits\n        subroutine(Hadamards(n), 1:n), # apply H in local scope\n        ControlU(n, m, U),\n        subroutine(QFT(n)', 1:n))","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"PE (generic function with 1 method)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"we use the first n qubits as the output space to store phase ϕ, and the other m qubits as the input state which corresponds to an eigenvector of oracle matrix U.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"The subroutine here uses focus! and relax! to manage a local scope of quantum circuit, and only activate the first n qubits while applying the block inside the subroutine context, and the scope will be relax!ed back, after the context. This is equivalent to manually focus! then relax!","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"fullly activated","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = rand_state(5)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"first 3 qubits activated","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"focus!(r, 1:3)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 3/5\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"relax back to the original","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"relax!(r, 1:3)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 5/5\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In this way, we will be able to apply small operator directly on the subset of the qubits.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Details about the algorithm can be found here: Quantum Phase Estimation Algorithm","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Now let's check the results of our phase estimation.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"First we need to set up a unitary with known phase, we set the phase to be 0.75, which is 0.75 * 2^3 == 6 == 0b110 .","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"N, M = 3, 5\nP = eigen(rand_unitary(1<<M)).vectors\nθ = Int(0b110) / 1<<N\nphases = rand(1<<M)\nphases[0b010+1] = θ\nU = P * Diagonal(exp.(2π * im * phases)) * P'","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32×32 Matrix{ComplexF64}:\n   -0.275109-0.307557im      -0.122797+0.0400439im   -0.022713-0.0642879im   0.0425184+0.0385463im      0.108333+0.0458832im     -0.156257+0.0886815im     0.112831-0.00051013im   -0.0146596-0.141698im      -0.120256-0.0137786im    -0.0878995+0.0434356im    -0.0599196-0.0880626im     0.131865+0.163747im    -0.00509207+0.0465695im      0.185179-0.158763im     -0.0187722+0.1749im        0.105704-0.129625im    -0.0279678-0.123108im      5.85348e-5-0.0952165im     0.0333342+0.144832im    0.0642987+0.312028im     -0.075431-0.157255im     -0.151258+0.129521im      -0.147447+0.116254im      0.0566302+0.0357698im     0.0815815+0.0407966im    -0.0294459-0.0660425im    -0.123614+0.076542im      -0.0772107-0.0108104im    -0.184618-0.135468im     -0.0956767-0.10158im       -0.374944-0.0916564im     -0.0683627+0.0282316im\n  -0.0698784+0.146021im      -0.211849-0.103874im    0.0761941+0.0473379im   0.0254765-0.0366066im      0.112557+0.0381767im      0.112767-0.0316376im    -0.127351+0.215837im     -0.0224657+0.0158935im    -0.0698196-0.140345im       0.111466+0.045781im       0.024583-0.159061im      0.080488-0.166443im      -0.246988+0.161707im     -0.0324592+0.0226193im      -0.16298+0.102948im    -0.0763939+0.11556im     -0.0629487+0.0818148im     0.00889757+0.0263481im      0.102047-0.296212im   -0.0841186-0.00676247im   0.0081611+0.170475im     -0.168556+0.106717im       -0.19272-0.259331im       0.215652+0.0556499im      0.167129-0.176029im       0.083305+0.131405im    -0.0625927-0.0412872im       0.117723+0.00307215im   -0.301287-0.0442101im     0.0226568-0.126106im     -0.0367563+0.00487027im      0.124504+0.0645797im\n    0.132591+0.0626573im     0.0325003+0.0188578im    -0.21959+0.117574im    0.0986358-0.212643im      -0.107179-0.0949557im    -0.0216805+0.0187146im   -0.0386701+0.157553im       0.182503-0.0398284im      0.070315+0.192957im     -0.0305623+0.240683im       0.110615+0.0181452im   0.00164078-0.0597088im    -0.0340287-0.0709871im    -0.0887623-0.129366im      0.0409782+0.135473im      0.186468-0.163046im    -0.0278981+0.0913443im       0.129992+0.170967im     -0.0701677+0.204782im    -0.080539+0.275873im     -0.102388+0.172118im     -0.118588+0.0708286im     0.0524485-0.167768im       0.138064-0.168584im       0.041433-0.215122im      -0.210178+0.00760759im   0.0488962-0.0463591im      -0.200398+0.0758028im    0.0696371-0.0366675im     0.0668963+0.0335188im     0.0302315-0.0234601im      0.0921779-0.247976im\n    0.160854+0.0674774im     0.0712887-0.0114168im   -0.194091+0.0700315im   -0.393205+0.107198im       0.156503-0.0596096im     -0.135024-0.0323292im   -0.0205085-0.029403im     -0.0661665+0.108537im     -0.0710953-0.233939im       0.167924-0.0818134im     0.0478647+0.0321616im   -0.0128014+0.162293im     -0.0408835-0.0431395im      0.152474-0.134548im     -0.0763161-0.138349im     0.0111684+0.0951374im   -0.0079728+0.0552785im      -0.109849-0.225512im      0.0287664-0.0369732im    0.131782+0.103888im     -0.135028-0.068078im    -0.0515904-0.0375448im   -0.00488949-0.179272im     -0.0399412+0.0336155im     0.0214254-0.0603802im    -0.0981417-0.191394im     0.0240985-0.243509im       -0.153996+0.0365904im    -0.191303+0.175286im     -0.0481612+0.18934im      -0.0183861+0.0860045im      0.0303866-0.282348im\n   0.0810623+0.0505532im     0.0945776+0.0365655im  -0.0667556-0.257604im   0.00176716-0.220074im      -0.412265-0.00983576im   -0.0377744-0.00467631im   -0.161517+0.0429185im    -0.0928382-0.179779im      -0.193776+0.0320505im     0.0995366+0.0932401im      0.211696-0.166432im      0.147785-0.224252im     -0.0932233-0.11191im        0.141698-0.000300884im  -0.0283891-0.0196376im     0.118061-0.0326639im   -0.0827194-0.0431485im     -0.0896588+0.0696261im     0.0243869-0.026883im    0.0594448-0.10831im       0.204772-0.156083im    0.00653895+0.1049im       -0.0885421-0.0500058im     -0.114903+0.192115im     -0.0809787+0.0594406im     0.0652101-0.155367im    -0.0612015-0.0274432im     -0.0785708+0.204043im      -0.01806+0.242173im     -0.0614587+0.0607986im    -0.0958433-0.107848im      -0.0292799+0.0823236im\n   -0.131034+0.0148831im     0.0838695-0.167622im    -0.156137-0.0307362im   0.0600727-0.0140236im     0.0529251-0.228404im      -0.145584-0.184289im    -0.0820945+0.16167im       -0.106336+0.153234im    -0.00682216+0.0995054im    -0.0449234+0.0681674im    -0.0187468-0.0501403im     0.116996-0.048478im     -0.0189012-0.108465im    -0.00837489+0.117398im        0.10165-0.07422im      0.0807698+0.148657im     0.0831676+0.375202im       -0.045531-0.14153im      -0.0395074-0.0915353im     0.12024+0.273917im      0.130821-0.0739296im     0.253445+0.0865947im    -0.0746027-0.0139923im     -0.122785+0.0414422im     0.0954371+0.102736im      -0.152432+0.235955im     -0.159841-0.0177415im       0.126657-0.149811im      0.113524-0.15415im      -0.0874362+0.168855im    -0.00881214-0.0785852im   -0.000723671+0.0807899im\n  -0.0123683+0.0513776im     -0.110636-0.0305868im  -0.0285334-0.10673im    -0.0188082+0.142263im    -0.00987676+0.0595429im     0.0657322-0.109424im    -0.0311316-0.0824984im     0.0328343+0.0684815im      0.175904-0.0538817im     0.0521493+0.166642im       0.031027+0.355984im     0.0674618-0.0556408im     -0.187073+0.214252im      -0.264491-0.0188337im      0.277563-0.226671im      0.240787-0.0391918im   -0.0355901-0.207607im       0.0533335+0.0151643im    -0.0855852-0.218594im     0.101624+0.0262721im   -0.0779899-0.219046im     -0.148677+0.136837im       -0.13255-0.063181im       0.151133+0.0783966im    -0.0376441+0.0764757im    -0.0337402+0.00743739im   0.0980484-0.048096im      -0.0137491-0.0636082im      0.15926+0.038057im     -0.0793421+0.0114288im    -0.0700992-0.181402im       -0.153078-0.0285954im\n   0.0413269-0.0365556im    -0.0810488-0.0293291im   -0.129389+0.243383im     0.178487-0.0439811im     0.0192273-0.273292im        0.01439+0.0433523im    0.0669265+0.0650182im     -0.290001-0.113337im     0.00356698+0.0414342im     0.0368764-0.183713im     -0.0701734-0.0709556im   -0.0976253+0.0188904im     -0.119173+0.0759736im    -0.0309291+0.0426491im     0.0179764-0.219417im      0.185575+0.138244im     -0.237014-0.187055im      -0.0651102+0.13928im      -0.0141718+0.0496003im    0.058013+0.125183im      0.188066-0.0487797im   -0.0520319-0.115136im       0.247974+0.0826095im     0.0272691-0.0128606im      0.189249-0.0305765im      0.220835+0.00159124im  -0.0229983-0.17444im         0.166757+0.178161im     0.0749653-0.035489im       -0.12128-0.143294im     -0.0485855+0.081331im      -0.0585015-0.159758im\n  -0.0892496-0.0855474im     -0.134842+0.0326416im   0.0606131+0.200323im    -0.104364-0.0690041im    -0.0179442+0.108852im     -0.0227944-0.0442732im   0.00837827+0.221262im      0.0225844-0.0240213im     -0.111102+0.172636im       0.015535-0.0208281im    -0.0385163+0.157375im     0.0512574+0.213133im      -0.136714-0.247973im     -0.0276124-0.0636049im     -0.158352-0.307677im     -0.127011-0.012175im     0.0976228-0.100758im       0.0388899+0.209406im      -0.142943-0.210586im     0.110378+0.142272im      0.171496+0.213623im     0.0882647+0.197869im       0.103356+0.0323367im     0.0372333-0.0801312im    -0.0643824+0.12611im      -0.0479816-0.278489im     0.0671013-0.0333881im     -0.0750784-0.10229im     -0.0337409+0.0637429im     0.0835099+0.00247217im   -0.0197483-0.0263816im      0.0795403+0.241079im\n   -0.207307-0.0150258im     0.0469976+0.0980933im    -0.14287+0.22039im    -0.0150069+0.147286im      -0.150032+0.228531im     0.00605861+0.0537023im    -0.074388+0.197368im      0.0462548-0.0640229im       0.24009-0.183544im       -0.25187+0.158129im      0.0640863+0.174774im     0.0752557-0.0165359im      0.226931+0.0338609im      0.107476+0.0471676im    -0.0843176-0.0590235im    0.0687805+0.0528457im    -0.106736+0.0666813im      -0.120679-0.226832im      0.0815103+0.0905073im  0.00392803+0.135981im      0.199244-0.0422055im    0.0157217+0.00702788im   -0.0842057+0.049693im       0.193225-0.00679565im    0.0371057+0.0355502im      0.159272+0.00838038im  -0.0141011+0.0540655im       0.113881+0.110702im     0.0319182+0.278732im       0.143549-0.0607758im      0.196605+0.0161342im       0.135273-0.0147548im\n   0.0440377+0.045143im     -0.0519467+0.072041im    0.0637385+0.0954783im  -0.0611576+0.0581942im     -0.192184-0.0625881im      0.315933+0.288235im    -0.0737817+0.118104im      0.0405269+0.0342289im     -0.268923-0.150882im    -0.00538948+0.102021im      -0.177151+0.00866772im  -0.0185547-0.156526im      -0.138806+0.00274157im     0.105639-0.0332629im    -0.0558167-0.192914im      0.031214+0.273004im    -0.0616436-0.00335756im      0.205783-0.16537im       0.0566556+0.077377im    -0.127627+0.113625im      -0.17741-0.106928im     0.0525575-0.0232413im     0.0197214+0.00051928im   -0.0590634-0.244216im      -0.167767+0.175805im     -0.0305385+0.135975im    -0.0836796+0.0895868im      -0.216732-0.0599923im     0.136236-0.0567833im    -0.0784205-0.0637671im    -0.0822325+0.0793367im    -0.00234105+0.0436766im\n   0.0148481+0.0160644im      -0.23178+0.195362im    0.0314802-0.0681832im     0.15215+0.163836im     -0.0177629-0.0852041im     0.0106832+0.137173im      -0.08066+0.0806877im     -0.126439-0.12032im      -0.0467035+0.0901204im     -0.100272+0.0632494im      0.234557-0.0850844im    -0.186043+0.138794im      -0.202334+0.0370985im      0.182004+0.276326im       0.162789-0.049076im    -0.0303752-0.0788523im     0.217544+0.206499im        0.164795-0.0367476im    -0.0026648-0.0450253im    0.164752+0.0523548im    -0.144896-0.0496591im     -0.20427-0.156326im     -0.0500248+0.0516311im    -0.0475613+0.0220928im     0.0306899+0.0904367im     -0.222967-0.130177im      0.187609+0.0540413im       0.181804+0.070868im    -0.0468401+0.116885im      0.0180803-0.0307936im      0.149205+0.116259im       0.0292787+0.00143214im\n   0.0700254-0.188835im       0.167822+0.221672im   -0.0287303+0.140746im    0.0578877-0.0458512im     0.0674793-0.0584613im     0.0507953+0.00627552im   0.0712811+0.129742im    -0.00812764+0.169068im       0.106081+0.0821228im    -0.0159808+0.0488509im     0.0890416+0.198667im     0.0178717-0.0379314im     -0.258219-0.17623im       0.0891554-0.0318507im     0.0776723+0.0273796im    -0.317977-0.0873373im    -0.195794+0.0144637im      -0.216608+0.170364im      -0.155721-0.0262658im   -0.130991-0.0499835im   -0.0836733-0.199171im     -0.127623-0.0659694im     -0.249841+0.0949534im     -0.079712-0.0925386im    -0.0589352+0.107064im       0.129056+0.175519im    -0.0802519+0.000297475im  -0.00245518+0.0800655im    -0.212698-0.0508307im      -0.18149+0.128263im       0.119531-0.0248923im      0.0405391-0.0333673im\n   -0.218227-0.0519762im     0.0123773+0.158606im   -0.0895763-0.0408414im    0.104605-0.157786im      0.0818687-0.0131667im    -0.0522404-0.0395154im    0.0472699-0.0324949im     0.0613622-0.109887im      -0.171096+0.0116007im      0.127419+0.0617339im    -0.0801943-0.0661183im    0.0818701+0.112904im     -0.0650535+0.0304695im     -0.297303+0.111099im      -0.282709-0.180351im    -0.0651172-0.125073im     0.0179596+0.0415782im      0.0503455-0.118097im        0.11097-0.18865im     -0.214273+0.0272419im     0.162946-0.143704im     -0.189638-0.198627im      0.0227579+0.100942im    -0.00557682+0.0901642im     -0.148513-0.0775027im   -0.00748313+0.0920789im   -0.0122855+0.193227im      -0.0384777-0.0797492im     0.106431+0.0797846im      0.126516+0.250535im    -0.00699056+0.0908044im     -0.0157168-0.298484im\n    0.208604+0.00343736im    0.0113973+0.0255986im  -0.0508494+0.127956im   0.00242146-0.0346055im      0.144306+0.151899im      0.0167247+0.0653831im    -0.149652-0.183278im      0.0929567-0.062106im       0.246196+0.213502im      -0.017337+0.181637im      -0.101603+0.071309im     0.0439681-0.131379im      0.0142302+0.137864im      0.0498124+0.1759im        -0.155067-0.0781551im    0.0794729+0.192647im     0.0694445+0.141638im       -0.228992+0.0617852im      0.103964-0.0624327im   0.0185406-0.00301399im   0.0199484+0.057299im     -0.195611-0.0695425im     0.0666594+0.225683im      -0.209649-0.0355865im     -0.175383-0.122619im      -0.196738-0.0889932im    -0.206236-0.0982231im      0.0421496-0.027256im    -0.0744452+0.0514577im    -0.0838648-0.104367im      -0.300019-0.028361im       0.0536448+0.0882107im\n    0.165542+0.098383im    -0.00477323+0.0575071im   -0.112493-0.0373713im    0.252221-0.126127im      -0.185501-0.0724594im    -0.0677088+0.00462398im   0.0505507-0.0437374im    -0.0899601-0.0202297im      0.199337-0.149026im   -0.000834475-0.112799im      0.0679484+0.113116im     -0.169402+0.164595im     -0.0718038-0.0551072im     -0.106828-0.226074im      0.0498589+0.101785im     -0.101708+0.147323im    -0.0342549+0.0684271im    -0.00139271-0.232286im       0.010268-0.25022im     0.0364373-0.103972im     0.0122547-0.0109288im    -0.044625+0.150376im    -0.00421325+0.0593192im    -0.0114664-0.0902247im     0.0584475+0.137066im     -0.0802973-0.203241im     -0.333172+0.214821im      -0.0472769+0.0512893im   0.00418605-0.16962im        0.277992-0.121581im     -0.0938216+0.0242731im      0.0730505-0.0799554im\n    0.106941+0.123052im      -0.163856-0.229892im    -0.161973+0.219152im     0.259003+0.0959815im     0.0717687-0.0718242im      0.126552-0.177001im     0.0468806-0.0929539im     0.0797443+0.240195im      0.0447417+0.041551im       -0.15045+0.136966im     -0.0074893-0.229873im    -0.0951975+0.037374im     0.00859231-0.0590797im    -0.0216807+0.0081733im     -0.204895+0.0136812im   -0.0106674-0.028896im    -0.0455363-0.141763im         0.10132-0.0300544im     0.0970435+0.0909159im   -0.025081-0.0364656im    0.0519045-0.232501im      0.103001+0.308862im     -0.0659062+0.0502592im     -0.149017+0.119461im      -0.216173+0.132194im     -0.0275745-0.0416741im     0.250454+0.0448624im     -0.0116394+0.0504195im    -0.225973+0.0627718im     0.0276745-0.014573im     0.00402549+0.0167072im    -0.00193573-0.0737163im\n   -0.257167-0.0726003im     -0.124469+0.21274im     0.0875316+0.0425257im    0.104118+0.0143628im      0.121305+0.0822307im     0.0934702+0.0423687im   -0.0991024-0.164808im      -0.233432+0.106689im       0.186975-0.0192977im      0.201547-0.119823im     -0.0955852-0.224767im    -0.0453105-0.0652333im    -0.0953829-0.0540696im      0.048039-0.00141741im     0.102137-0.0718844im     0.283704-0.00706946im   -0.154092+0.199355im       -0.151056+0.0136058im     -0.130932+0.0656143im  -0.0195355+0.00292983im  -0.0353061+0.118453im      0.120375-0.0214948im    0.00828322-0.054815im      0.0241661+0.0434471im     -0.243233+0.016744im     -0.0194875-0.0535078im     0.022389+0.0426269im      -0.270775+0.0342791im   -0.0947648-0.0279893im       0.22569+0.0142642im      0.147888-0.277499im       0.0393433-0.0280841im\n    0.133867+0.0407831im     -0.249422-0.0364217im   0.0962137+0.0421254im   -0.072452-0.23895im        0.165646+0.0754179im    -0.0254174+0.300157im    -0.0964572-0.0124758im     -0.221286+0.099036im      0.0108145-0.0516148im     -0.195864+0.0201216im    0.00235509+0.00104388im     0.10916-0.081167im        0.27563+0.0508382im    -0.0570104-0.123273im      -0.023867+0.0383931im    0.0401544-0.00781279im  -0.0252336-0.0387025im       0.143003+0.0779584im    -0.0378123-0.146568im    0.0168414+0.0360263im    0.0592358+0.0700883im    -0.108113-0.0403681im     -0.205217+0.122617im      -0.294949-0.0636251im      0.251236+0.188387im      0.0524475+0.056515im      0.119168-0.0593894im     -0.0582993+0.102509im     0.0716342+0.00499752im      0.12965+0.298996im     0.00777695-0.127016im      0.00155147-0.0615098im\n    0.110958+0.20694im       0.0920977+0.089649im     0.180177+0.0687772im    -0.14037+0.0782118im     0.0638381-0.000393937im   -0.313477-0.0356406im    -0.030864+0.156758im       -0.19432+0.00973545im   -0.0211475+0.0476705im     -0.291684+0.108344im      0.0496766-0.0299121im     -0.04998+0.166977im        -0.2067-0.083316im     -0.0147829+0.0641683im    -0.0124621+0.059403im      0.135668-0.0173004im    -0.135128-0.0947531im      0.0497455-0.164326im      0.0214518-0.0363095im  -0.0565812-0.09547im      -0.191527+0.233751im     0.0215918+0.0896852im      0.135377+0.0782193im     0.0130658+0.10973im       -0.239827-0.112088im       0.189204+0.161517im     0.0173944+0.169735im       0.0622955+0.107859im      0.111045+0.00773161im   -0.0702475+0.110952im       -0.20603-0.165758im       0.0716061-0.00922448im\n  -0.0271364+0.19116im       0.0369823-0.124459im     0.178366+0.140307im   -0.0615593-0.100564im       0.013746-0.0285025im     0.0061669-0.0122903im   -0.0172404-0.316972im      0.0132373-0.178653im     -0.0427085+0.162101im      0.0217849+0.0835448im     0.0954741-0.0146949im   -0.0722555-0.0120423im     0.0766706-0.186116im      0.0677829-0.315532im     -0.0244191-0.197538im     0.0863185-0.0258543im   -0.0478323+0.114104im       0.0894824-0.17471im       -0.391132+0.0720694im  -0.0732757+0.00116445im   0.0627344+0.0528937im    -0.142776-0.112425im       -0.19849-0.024381im       0.154034+0.118786im     -0.0853558+0.156207im     0.00121181+0.141951im    -0.0376074-0.0328603im        0.24954-0.0688612im   -0.0838541+0.0106494im   -0.00266756-0.120465im     -0.0531559+0.148193im      -0.0272599-0.0153805im\n -0.00902674+0.0523521im     0.0159829+0.20781im     0.0991013+0.191016im    0.0828843+0.0273315im      0.101535+0.235303im      -0.334674-0.0102919im    -0.156361-0.0910845im      0.327881+0.162122im      -0.171429+0.0308984im     0.0571238-0.13417im      -0.0334642-0.104148im     0.0242354-0.123849im      -0.113291+0.0273522im     0.0472131-0.033959im       0.267921-0.0238497im    0.0521074+0.0627054im     0.024283+0.0344449im      0.0526334-0.0846902im     0.0395565+0.0834584im   0.0387471-0.0534044im     0.226149-0.104932im     -0.252011+0.252206im       0.104941-0.0542456im    -0.0969093-0.00292375im    0.0799803+0.0374113im      0.114334-0.0177656im   0.00902713-0.0388356im     -0.0411372+0.0766753im     0.131317-0.162119im      -0.024174+0.045541im       0.100421+0.20717im         0.108357+0.0390005im\n    0.138329+0.0277689im     0.0435172+0.074073im   -0.0679836-0.228339im     0.170292-0.0403595im  -0.000619116+0.165962im     -0.0912409+0.152778im      0.324413-0.021246im     -0.0563519-0.0609988im    -0.0353691-0.182343im      0.0803241-0.0445216im     -0.222095+0.16049im     0.00784005+0.138605im      0.0202857-0.271755im      -0.121421+0.13459im       -0.126607-0.0374219im     0.180414+0.237805im    -0.0229741+0.174662im       0.0585704+0.203989im      0.0412691+0.175213im    0.0993407-0.00185493im  -0.0908444-0.00719419im   -0.119339+0.183265im      -0.140165-0.0283916im     0.0796275+0.118088im     -0.0622297-0.00516868im   -0.0134883+0.20872im       0.109028-0.153856im       0.0918269+0.0827169im   -0.0545703+0.0164007im     0.0698847+0.0581401im    0.00720464+0.112384im       0.0723934+0.139462im\n   -0.143425+0.248471im     -0.0625716-0.0647829im  -0.0875204-0.0296272im   -0.156711+0.0802813im     -0.147588+0.0661505im     0.0461129+0.119242im     0.0758571+0.00848481im     0.185201-0.0500713im    -0.0109575-0.0299874im     0.0172216-0.0200136im     -0.156109-0.0781669im   -0.0442136+0.0884948im    -0.0268602-0.0637535im     0.0211678+0.28049im       0.0609267+0.0240089im    0.0101927-0.17133im       -0.25988-0.0801154im      -0.094207+0.134801im     -0.0550456+0.0127247im   0.0437676-0.0227844im   -0.0460137+0.231608im    -0.0726797+0.123351im     -0.0834751+0.0459924im     -0.241937+0.157079im       0.121552+0.238328im     -0.0614147-0.0224577im    -0.237829+0.0141022im       0.048139-0.24573im      0.0327024-0.0101804im     -0.108498-0.0954915im     0.0976194-0.0381229im       0.115742-0.329138im\n  -0.0603962+0.0545909im     0.0283015-0.171509im   -0.0392519+0.0326441im    0.147716-0.0936885im     0.0266972+0.186152im       0.175072+0.145625im     -0.138126+0.0588242im   -0.00838148-0.0799926im     -0.151956-0.0604255im     -0.127244-0.000779703im   0.0672075+0.0637588im    -0.249892+0.292601im      -0.109017+0.206776im      -0.099237-0.0553837im      0.106657+0.190043im     -0.131591-0.0889747im   -0.0682126+0.109873im       -0.110065-0.0283749im     -0.213912+0.0405653im    0.135073+0.0460404im    0.0975398-0.141251im     0.0295003-0.0369343im      0.117442-0.0819896im     -0.152748+0.123973im      -0.133259-0.127321im        0.10663+0.173103im    -0.0533257-0.299529im       -0.179228-0.150201im     0.0619095+0.132118im      0.0924017+0.0403405im     -0.106326+0.0249574im       0.053891+0.129235im\n   0.0221156+0.175674im      0.0673403-0.0870189im    0.170344+0.0194169im  -0.0107712+0.0076303im    -0.0553254+0.127406im      0.0366611-0.199417im      0.109697+0.215352im      -0.116257-0.0794623im    -0.0590963-0.108435im      -0.109468-0.0120007im    -0.0109446-0.00627655im    0.146237-0.060073im      -0.048379+0.0339713im      0.014802+0.0549207im       0.20809+0.0251303im     0.204833-0.0994862im    0.0212567-0.0977037im   -0.000604126-0.00440581im    0.0310815+0.030144im    -0.213784-0.0380657im    0.0600273-0.0620324im   -0.0343152-0.0607104im      0.156139+0.30346im       0.0707463-0.0955741im    -0.0507373+0.0918849im     -0.245146-0.00816736im   -0.149611-0.26182im       -0.0263919-0.0527118im    -0.343159-0.103909im       0.225581+0.18277im       0.0810828+0.168702im       -0.133302+0.00875895im\n    0.133426+0.00844348im     0.249335+0.232172im   -0.0283127-0.0604251im    -0.10815+0.0658932im     0.0319349+0.0434069im     0.0807495-0.110932im     -0.118529-0.259297im      0.0730354-0.049526im     -0.0107211-0.0832472im     -0.237241+0.208738im     -0.0376557-0.358198im     -0.135078+0.106077im     -0.0162249+0.0206898im    -0.0442314+0.0325155im    -0.0407474+0.00614539im   0.0376511+0.0815364im   -0.0516458-0.157944im       0.0225655+0.279373im      0.0063093-0.199306im     0.300026+0.200724im     0.0528805-0.0319941im    0.0904912-0.109671im      -0.077642-0.0222929im      0.213118-0.0985988im     0.0476462+0.0890999im      0.065851+0.0668614im     -0.12214+0.036081im      -0.0535055-0.0156315im   -0.0477923-0.123717im      0.0910976+0.104934im      0.0727464+0.0995424im     -0.0167015+0.0500518im\n   -0.278619-0.0405859im     -0.124022-0.171725im    0.0549692-0.220327im   -0.0186192-0.0522611im    -0.0495372+0.101609im      -0.162579+0.0758256im   -0.0205295-0.0609129im    -0.0367836+0.187392im    -0.00919346+0.0280441im    -0.0711507+0.286217im     -0.0109018+0.0563585im    -0.270326+0.0310022im     -0.020993-0.00981553im    0.0825473+0.0244772im     -0.144856-0.0364492im   -0.0567731+0.10511im       0.125397+0.0541166im     -0.0185803+0.028428im     -0.0876485-0.103596im   -0.0454944-0.123483im     0.0561842+0.0674024im    0.0504163+0.100128im      0.0545653+0.161511im       0.138557-0.0671425im   -0.00793595-0.03661im     -0.00528744+0.0283397im    -0.122368-0.194406im        -0.19017+0.342735im     0.0183259-0.100792im      -0.219364-0.0729975im      0.164472+0.105288im       -0.202786-0.213352im\n   0.0273861-0.0790857im   -0.00359234+0.166642im    -0.095824+0.0581379im    0.183258+0.170626im     -0.0829182+0.18968im      -0.0251386-0.00439219im  -0.0663598-0.00885501im    -0.134766-0.102443im     -0.0788194-0.0566943im     -0.103532+0.0248107im    -0.0929304-0.00142355im     0.11145-0.277687im      0.0978825-0.03839im       -0.260811-0.0200907im    -0.0354072+0.0612953im    -0.169377+0.0161935im     0.289422+0.0390053im       0.128843-0.0222241im     -0.237411+0.0256992im   0.0711199+0.0210443im    -0.142657+0.0477865im    0.0538476+0.00722204im     0.260435-0.17468im     -0.00615129+0.0704849im    -0.0729765+0.170205im       0.159891-0.0855455im    -0.122686-0.126984im        0.139605-0.0242225im    -0.213799-0.029535im       -0.15121+0.0606513im    -0.0574919-0.14673im       0.00203259-0.265901im\n   0.0160099-0.0527566im    -0.0449652-0.0849367im  -0.0922129-0.210017im    0.0546617-0.128143im       0.208541+0.133203im       0.120312+0.00552927im   0.0785519+0.239073im       0.290926-0.0195512im      0.262322+0.040676im      -0.201347-0.231189im      0.0623508-0.227047im      0.153494-0.0529017im     -0.080991-0.221196im      0.0447271-0.0364815im    -0.0133535-0.0423102im      0.12875+0.0136589im   -0.0924378+0.110017im         0.07632-0.133752im     -0.0850717-0.149413im     0.176275-0.11328im     -0.0960702+0.0207616im    -0.068278-0.0853213im      0.120294-0.0235399im    0.00756411-0.138791im      -0.040299+0.0649542im      0.168389+0.00679095im   0.0126039+0.00289382im    -0.0710192-0.0625631im    0.0319717+0.162687im     -0.0936496-0.0464047im    -0.0520235+0.12642im        -0.301711-0.050405im\n  -0.0210352-0.143578im      -0.143392-0.0608431im   0.0153655+0.0147698im   -0.176894-0.0481734im    -0.0467872-0.104576im       0.128878-0.0155678im    0.0761127-0.0631527im      0.115645-0.0907223im     -0.136253+0.101686im     -0.0691322-0.0312652im     0.0137043-0.00425308im   -0.152952+0.00501082im    0.0853316-0.0116345im    0.00328775+0.102005im      0.0628023+0.0363063im   -0.0213739+0.0783759im   -0.0779032+0.122704im       -0.186983-0.0546113im     0.0498344+0.0377978im    0.140781-0.287859im      0.132271-0.0810618im    -0.161262+0.134677im       0.240389-0.0659048im      0.293981-0.251465im      0.0506267+0.200817im       -0.12772+0.183302im       0.10534+0.0455336im      0.0702391+0.0396745im   -0.0954577+0.0219282im     0.0342741+0.238871im      -0.171741-0.288229im        0.154745-0.0937047im\n -0.00423974-0.0593807im     -0.234215+0.0414701im  -0.0687006-0.223586im    -0.025652-0.15941im       0.0779379+0.0549283im    -0.0746868-0.213525im     -0.182305+0.0544066im    0.00617054-0.0367129im     -0.123208-0.0888603im     -0.111689+0.0202575im     -0.031721+0.195863im     0.0164522-0.157386im      -0.137534+0.113159im       0.193945-0.168738im     -0.0685849-0.0401021im    -0.119188+0.118032im     -0.151393-0.0923374im      -0.120454+0.102643im    -0.00136543+0.237669im     0.226916-0.00327726im  -0.0214217+0.0780694im     0.082392-0.0199747im    -0.0138861+0.0114795im     -0.105118-0.0401017im     -0.232247-0.0645897im    -0.0526207+0.028534im     0.0819016+0.0801323im       0.291563-0.113163im      0.062011-0.158468im       0.262979-0.0120338im     0.0636955+0.0844707im     -0.0782981-0.221817im","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"and then generate the state ψ","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"psi = P[:, 3]","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"32-element Vector{ComplexF64}:\n   0.05861774142786644 + 0.15303407942259734im\n  -0.15347674058491173 - 0.07531381013062619im\n  -0.09280826926991304 + 0.08801666059451434im\n   0.06913896597772773 + 0.016872585513585444im\n   -0.1058394856767451 + 0.13165251562338953im\n   0.13352065884903128 + 0.16001266010657186im\n  -0.06405607819944795 + 0.2076673704124252im\n  -0.11213785729942491 + 0.2628147039729549im\n  0.014462151492666483 - 0.18627594154965005im\n    0.1764600339161313 - 0.06662115004395977im\n   -0.2570993080267284 + 0.14924758554745515im\n  -0.18826649317208158 + 0.09320935075077388im\n   0.07386393043876421 - 0.23480493362874044im\n   0.08338661950606888 + 0.03931546816930931im\n -0.007060085744992381 + 0.12863230792226352im\n    0.3067891864103167 + 0.0im\n  -0.18354494590646214 - 0.01723227382272574im\n   0.17883418420865344 + 0.20005842285205416im\n   0.02039450569900278 + 0.019638933037598002im\n   0.19030201038953948 - 0.17040458202239617im\n  -0.03985269445981397 + 0.11202004000509988im\n  -0.08094792115159133 - 0.043706700151629044im\n -0.018220330267416412 - 0.013496241907286342im\n  0.005304509087531691 + 0.022222487148900252im\n   0.05840754541773147 - 0.0354337391967368im\n    -0.117605084789912 - 0.06890150066070522im\n  -0.16398230530619462 + 0.1616526400189266im\n 0.0022449026371031203 - 0.026759537326638688im\n   0.10648315700677019 - 0.007077768061450829im\n  -0.09476153655186774 - 0.09736260642228184im\n   0.08568949492176728 + 0.15830216491938198im\n   0.06200103417993232 - 0.009575859817679375im","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"In the phase estimation process, we will feed the state to circuit and measure the first n qubits processed by iQFT.","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"r = join(ArrayReg(psi), zero_state(N))\nr |> PE(N, M, U)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"ArrayReg{2, ComplexF64, Array...}\n    active qubits: 8/8\n    nlevel: 2","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Since our phase can be represented by 3 qubits precisely, we only need to measure once","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"results = measure(r, 1:N; nshots=1)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"1-element Vector{DitStr{2, 3, Int64}}:\n 011 ₍₂₎","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"Recall that our QFT's bit numbering is reversed, let's reverse it back","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"using BitBasis\nestimated_phase = bfloat(results[]; nbits=N)","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"0.75","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"the phase is exactly 0.75!","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"","category":"page"},{"location":"generated/examples/2.qft-phase-estimation/index.html","page":"Quantum Fourier Transformation and Phase Estimation","title":"Quantum Fourier Transformation and Phase Estimation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"CurrentModule = BitBasis\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBlocks, YaoArrayRegister\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/bitbasis.html#BitBasis","page":"BitBasis","title":"BitBasis","text":"","category":"section"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Types and operations for basis represented by bits in linear algebra.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"For more details please ref to BitBasis.jl.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Modules = [BitBasis]\nOrder = [:macro, :function, :type, :module]","category":"page"},{"location":"man/bitbasis.html#BitBasis.@bit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@bit_str","text":"@bit_str -> BitStr64\n\nConstruct a bit string. such as bit\"0000\". The bit strings also supports string join. Just use it like normal strings.\n\nExample\n\njulia> bit\"10001\"\n10001 ₍₂₎\n\njulia> bit\"100_111_101\"\n100111101 ₍₂₎\n\njulia> join(bit\"1001\", bit\"11\", bit\"1110\")\n1001111110 ₍₂₎\n\njulia> onehot(bit\"1001\")\n16-element Vector{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 1.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@dit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@dit_str","text":"@dit_str -> DitStr64\n\nConstruct a dit string. such as dit\"0201;3\". The dit strings also supports string join. Just use it like normal strings.\n\nExample\n\njulia> dit\"10201;3\"\n10201 ₍₃₎\n\njulia> dit\"100_121_121;3\"\n100121121 ₍₃₎\n\njulia> join(dit\"1021;3\", dit\"11;3\", dit\"1210;3\")\n1021111210 ₍₃₎\n\njulia> onehot(dit\"1021;3\")\n81-element Vector{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n     ⋮\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@lbit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@lbit_str","text":"@lbit_str -> LongBitStr\n\nLong bit string version of @bit_str macro.\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@ldit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@ldit_str","text":"@ldit_str -> LongDitStr\n\nLong dit string version of @dit_str macro.\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#Base.:==-Union{Tuple{N2}, Tuple{N1}, Tuple{D}, Tuple{BitBasis.SubDitStr{D, N1}, DitStr{D, N2}}} where {D, N1, N2}","page":"BitBasis","title":"Base.:==","text":"==(lhs::SubDitStr{D,N,T}, rhs::DitStr{D,N,T}) -> Bool\n==(lhs::DitStr{D,N,T}, rhs::SubDitStr{D,N,T}) -> Bool\n==(lhs::SubDitStr{D,N,T}, rhs::SubDitStr{D,N,T}) -> Bool\n\nCompare the equality between SubDitStr and DitStr. \n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.allone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.allone","text":"allone(index::Integer, mask::Integer) -> Bool\n\nReturn true if all masked position of index is 1.\n\nExample\n\ntrue if all masked positions are 1.\n\njulia> allone(0b1011, 0b1011)\ntrue\n\njulia> allone(0b1011, 0b1001)\ntrue\n\njulia> allone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.anyone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.anyone","text":"anyone(index::Integer, mask::Integer) -> Bool\n\nReturn true if any masked position of index is 1.\n\nExample\n\ntrue if any masked positions is 1.\n\njulia> anyone(0b1011, 0b1001)\ntrue\n\njulia> anyone(0b1011, 0b1100)\ntrue\n\njulia> anyone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.baddrs-Tuple{Integer}","page":"BitBasis","title":"BitBasis.baddrs","text":"baddrs(b::Integer) -> Vector\n\nget the locations of nonzeros bits, i.e. the inverse operation of bmask.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.basis-Tuple{DitStr}","page":"BitBasis","title":"BitBasis.basis","text":"basis(ditstr) -> UnitRange{DitStr{D,N,T}}\nbasis(DitStr{D,N,T}) -> UnitRange{DitStr{D,N,T}}\n\nReturns the UnitRange for basis in Hilbert Space of qudits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bdistance-Union{Tuple{Ti}, Tuple{Ti, Ti}} where Ti<:Integer","page":"BitBasis","title":"BitBasis.bdistance","text":"bdistance(i::Integer, j::Integer) -> Int\n\nReturn number of different bits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with current bit numbering. See also bfloat_r.\n\nRef: wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with reversed bit numbering. See also bfloat.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{BitStr}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b; nbits=nothing) -> Int\n\ninteger view, with LSB 0 bit numbering. See also wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b; nbits::Int) -> Integer\n\ninteger read in inverse order.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bit_length-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bit_length","text":"bit_length(x::Integer) -> Int\n\nReturn the number of bits required to represent input integer x.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bitarray-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T<:Number","page":"BitBasis","title":"BitBasis.bitarray","text":"bitarray(v::Vector, [nbits::Int]) -> BitArray\nbitarray(v::Int, nbits::Int) -> BitArray\nbitarray(nbits::Int) -> Function\n\nConstruct BitArray from an integer vector, if nbits not supplied, it is 64. If an integer is supplied, it returns a function mapping a Vector/Int to bitarray.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bmask","page":"BitBasis","title":"BitBasis.bmask","text":"bmask(::Type{T}) where T <: Integer -> zero(T)\nbmask([T::Type], positions::Int...) -> T\nbmask([T::Type], range::UnitRange{Int}) -> T\n\nReturn an integer mask of type T where 1 is the position masked according to positions or range. Directly use T will return an empty mask 0.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(b::Integer[, masks::Vector{Integer}]; nbits) -> Integer\n\nReturn left-right reflected integer.\n\nExample\n\nReflect the order of bits.\n\njulia> breflect(0b1011; nbits=4) == 0b1101\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(bit_str[, masks])\n\nReturn left-right reflected bit string.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bsizeof-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"BitBasis","title":"BitBasis.bsizeof","text":"bsizeof(::Type)\n\nReturns the size of given type in number of binary digits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.btruncate-Union{Tuple{T}, Tuple{T, Any}} where T<:Integer","page":"BitBasis","title":"BitBasis.btruncate","text":"btruncate(b, n)\n\nTruncate bits b to given length n.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controldo-Union{Tuple{S}, Tuple{Union{Function, Type}, BitBasis.IterControl{S}}} where S","page":"BitBasis","title":"BitBasis.controldo","text":"controldo(f, itr::IterControl)\n\nExecute f while iterating itr.\n\nnote: Note\nthis is faster but equivalent than using itr as an iterator. See also itercontrol.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controller-Tuple{Union{UnitRange{T}, NTuple{var\"#s14\", T} where var\"#s14\", Vector{T}, T} where T<:Integer, Union{UnitRange{T}, NTuple{var\"#s14\", T} where var\"#s14\", Vector{T}, T} where T<:Integer}","page":"BitBasis","title":"BitBasis.controller","text":"controller([T=Int, ]cbits, cvals) -> Function\n\nReturn a function that checks whether a basis at cbits takes specific value cvals.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.flip-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.flip","text":"flip(index::Integer, mask::Integer) -> Integer\n\nReturn an Integer with bits at masked position flipped.\n\nExample\n\njulia> flip(0b1011, 0b1011) |> BitStr{4}\n0000 ₍₂₎\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.group_shift!-Tuple{Int64, AbstractVector{Int64}}","page":"BitBasis","title":"BitBasis.group_shift!","text":"group_shift!(nbits, positions)\n\nShift bits on positions together.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.hypercubic-Tuple{Array}","page":"BitBasis","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.indicator-Union{Tuple{T}, Tuple{Type{T}, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.indicator","text":"indicator(::Type{T}, k) -> T\n\nReturn an integer with k-th bit set to 1.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.indices_with-Tuple{Int64, Vector{Int64}, Vector{Int64}}","page":"BitBasis","title":"BitBasis.indices_with","text":"indices_with(n::Int, locs::Vector{Int}, vals::Vector{Int}) -> Vector{Int}\n\nReturn indices with specific positions locs with value vals in a hilbert space of n qubits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.invorder-Tuple{AbstractVecOrMat}","page":"BitBasis","title":"BitBasis.invorder","text":"invorder(X::AbstractVecOrMat)\n\nInverse the order of given vector/matrix X.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.ismatch-Union{Tuple{T}, Tuple{T, T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.ismatch","text":"ismatch(index::Integer, mask::Integer, target::Integer) -> Bool\n\nReturn true if bits at positions masked by mask equal to 1 are equal to target.\n\nExample\n\njulia> n = 0b11001; mask = 0b10100; target = 0b10000;\n\njulia> ismatch(n, mask, target)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.itercontrol-Tuple{Int64, AbstractVector, Any}","page":"BitBasis","title":"BitBasis.itercontrol","text":"itercontrol([T=Int], nbits, positions, bit_configs)\n\nReturns an iterator which iterate through controlled subspace of bits.\n\nExample\n\nTo iterate through all the bits satisfy 0xx10x1 where x means an arbitrary bit.\n\njulia> for each in itercontrol(7, [1, 3, 4, 7], (1, 0, 1, 0))\n           println(string(each, base=2, pad=7))\n       end\n0001001\n0001011\n0011001\n0011011\n0101001\n0101011\n0111001\n0111011\n\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2dim1-Tuple{Any}","page":"BitBasis","title":"BitBasis.log2dim1","text":"log2dim1(X)\n\nReturns the log2 of the first dimension's size.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2i","page":"BitBasis","title":"BitBasis.log2i","text":"log2i(x::Integer) -> Integer\n\nReturn log2(x), this integer version of log2 is fast but only valid for number equal to 2^n.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{BitStr{N}}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.neg","text":"neg(b::BitStr) -> BitStr\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.neg","text":"neg(index::Integer, nbits::Int) -> Integer\n\nReturn an integer with all bits flipped (with total number of bit nbits).\n\nExample\n\njulia> neg(0b1111, 4) |> BitStr{4}\n0000 ₍₂₎\n\njulia> neg(0b0111, 4) |> BitStr{4}\n1000 ₍₂₎\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.next_reordered_basis-Union{Tuple{T}, Tuple{N}, Tuple{T, NTuple{N, T}, NTuple{N, T}}} where {N, T}","page":"BitBasis","title":"BitBasis.next_reordered_basis","text":"next_reordered_basis(basis, takers, differ)\n\nReturns the next reordered basis accroding to current basis.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.onehot-Union{Tuple{T1}, Tuple{N}, Tuple{T}, Tuple{D}, Tuple{Type{T}, DitStr{D, N, T1}}} where {D, T, N, T1}","page":"BitBasis","title":"BitBasis.onehot","text":"onehot([T=Float64], dit_str[; nbatch])\n\nCreate an onehot vector in type Vector{T} or a batch of onehot vector in type Matrix{T}, where index x + 1 is one. One can specify the value of the nonzero entry by inputing a pair.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.packbits-Tuple{AbstractVector}","page":"BitBasis","title":"BitBasis.packbits","text":"packbits(arr::AbstractArray) -> AbstractArray\n\npack bits to integers, usually take a BitArray as input.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.readat-Union{Tuple{T}, Tuple{N}, Tuple{D}, Tuple{DitStr{D, N, T}, Vararg{Integer}}} where {D, N, T}","page":"BitBasis","title":"BitBasis.readat","text":"readat(x, loc...) -> Integer\n\nRead the dit config at given location.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.readbit-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.readbit","text":"readbit(x, loc...)\n\nRead the bit config at given location.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.reorder","page":"BitBasis","title":"BitBasis.reorder","text":"reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\ntip: Tip\nAlthough orders can be any iterable, Tuple is preferred inorder to gain as much performance as possible. But the conversion won't take much anyway.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.setbit-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.setbit","text":"setbit(index::Integer, mask::Integer) -> Integer\n\nset the bit at masked position to 1.\n\nExample\n\njulia> setbit(0b1011, 0b1100) |> BitStr{4}\n1111 ₍₂₎\n\njulia> setbit(0b1011, 0b0100) |> BitStr{4}\n1111 ₍₂₎\n\njulia> setbit(0b1011, 0b0000) |> BitStr{4}\n1011 ₍₂₎\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.swapbits-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.swapbits","text":"swapbits(n::Integer, mask_ij::Integer) -> Integer\nswapbits(n::Integer, i::Int, j::Int) -> Integer\n\nReturn an integer with bits at i and j flipped.\n\nExample\n\njulia> swapbits(0b1011, 0b1100) == 0b0111\ntrue\n\ntip: Tip\nlocations i and j specified by mask could be faster when bmask is not straight forward but known by constant.\n\nwarning: Warning\nmask_ij should only contain two 1, swapbits will not check it, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_reorder","page":"BitBasis","title":"BitBasis.unsafe_reorder","text":"unsafe_reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\nwarning: Warning\nunsafe_reorder won't check whether the length of orders and the size of first dimension of X match, use at your own risk.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{N}, Tuple{UnitRange{T}, NTuple{N, T}}} where {N, T}","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange, b::NTuple{N}) -> NTuple{N}\n\nReturns result in type Tuple of a .- b. This will not check the length of a and b, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{UnitRange{T}, Vector{T}}} where T","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange{T}, b::Vector{T}) where T\n\nReturns a .- b, fallback version when b is a Vector.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.BitStr","page":"BitBasis","title":"BitBasis.BitStr","text":"BitStr{N,T} <: Integer\n\nThe struct for bit string with fixed length N and storage type T. It is an alias of DitStr{2,N,T}.\n\nBitStr{N,T}(integer)\nBitStr64{N}(integer)\nBitStr64(vector)\nLongBitStr{N}(integer)\nLongBitStr(vector)\n\nReturns a BitStr. When the input is an integer, the bits are read from right to left. When the input is a vector, the bits are read from left to right.\n\nExamples\n\nBitStr supports some basic arithmetic operations. It acts like an integer, but supports some frequently used methods for binary basis.\n\njulia> bit\"0101\" * 2\n1010 ₍₂₎\n\njulia> join([bit\"101\" for i in 1:10])\n\"101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎101 ₍₂₎\"\n\njulia> repeat(bit\"101\", 2)\n101101 ₍₂₎\n\njulia> bit\"1101\"[2]\n0\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.DitStr","page":"BitBasis","title":"BitBasis.DitStr","text":"DitStr{D,N,T<:Integer} <: Integer\n\nThe struct for dit string with fixed length N and storage type T, where dit is a extension of dit from binary system to a d-ary system.\n\nDitStr{D,N,T}(integer)\nDitStr{D,N}(integer)\nDitStr{D}(vector)\n\nReturns a DitStr. When the input is an integer, the dits are read from right to left. When the input is a vector, the dits are read from left to right.\n\nExamples\n\njulia> DitStr{3}([1,2,1,1,0])\n01121 ₍₃₎\n\njulia> DitStr{3, 5}(71)\n02122 ₍₃₎\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.DitStr-Union{Tuple{BitBasis.SubDitStr{D, N, T}}, Tuple{T}, Tuple{N}, Tuple{D}} where {D, N, T}","page":"BitBasis","title":"BitBasis.DitStr","text":"DitStr(dit::SubDitStr{D,N,T}) -> DitStr{D,N,T}\n\nRaise type SubDitStr to DitStr.\n\njulia> x = DitStr{3, 5}(71)\n02122 ₍₃₎\n\njulia> sx =  SubDitStr(x, 2, 4)\nSubDitStr{3, 5, Int64}(02122 ₍₃₎, 1, 3)\n\njulia> DitStr(sx)\n212 ₍₃₎\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.IterControl","page":"BitBasis","title":"BitBasis.IterControl","text":"IterControl{S}\nIterControl(n::Int, base::Int, masks, factors) -> IterControl\n\nIterator to iterate through controlled subspace. See also itercontrol.  S is the number of chunks,  n is the size of Hilbert space,  base is the base of counter,  masks and factors are helpers for enumerating over the target Hilbert Space.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.LongLongUInt","page":"BitBasis","title":"BitBasis.LongLongUInt","text":"LongLongUInt{C} <: Integer\n\nA LongLongUInt{C} is an integer with C UInt numbers to store the value.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis{N, T}\n\nLazy reorderd basis.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis-Union{Tuple{Tuple{T, Vararg{T, N}}}, Tuple{T}, Tuple{N}} where {N, T<:Integer}","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis(orders::NTuple{N, <:Integer})\n\nReturns a lazy set of reordered basis.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.SubDitStr","page":"BitBasis","title":"BitBasis.SubDitStr","text":"SubDitStr{D,N,T<:Integer} <: Integer\n\nThe struct as a SubString-like object for DitStr(SubString is an official implementation of sliced strings, see String for reference). This slicing returns a view into the parent DitStr instead of making a copy (similar to the @views macro for strings).\n\nSubDitStr can be used to describe the qubit configuration within the subspace of the entire Hilbert space.It provides similar getindex, length functions as DitStr. \n\nSubDitStr(dit::DitStr{D,N,T}, i::Int, j::Int)\nSubDitStr(dit::DitStr{D,N,T}, r::AbstractUnitRange{<:Integer})\n\nOr by @views macro for DitStr (this macro makes your life easier by supporting begin and end syntax):\n\n@views dit[i:j]\n\nReturns a SubDitStr.\n\nExamples\n\njulia> x = DitStr{3, 5}(71)\n02122 ₍₃₎\n\njulia> sx =  SubDitStr(x, 2, 4) \nSubDitStr{3, 5, Int64}(02122 ₍₃₎, 1, 3)\n\njulia> @views x[2:end] \nSubDitStr{3, 5, Int64}(02122 ₍₃₎, 1, 4)\n\njulia> sx == dit\"212;3\"\ntrue\n\n\n\n\n\n","category":"type"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Yao","category":"page"},{"location":"index.html#Yao","page":"Home","title":"Yao","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A General Purpose Quantum Computation Simulation Framework","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to Yao, a Flexible, Extensible, Efficient Framework for Quantum Algorithm Design. Yao (幺) is the Chinese character for normalized but not orthogonal.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We aim to provide a powerful tool for researchers, students to study and explore quantum computing in near term future, before quantum computer being used in large-scale.","category":"page"},{"location":"index.html#Quick-Starts","page":"Home","title":"Quick Starts","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"You can learn how to use Yao with some quick examples in this section. There are three badges on the top of each tutorial that allows you to open it in mybinder, preview it in nbviewer or download the tutorial as .zip file, which includes the notebook and the scripts and other related materials.","category":"page"},{"location":"index.html#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you are interesting in polishing or contributing our tutorial, you can just open a PR in our tutorial repo.","category":"page"},{"location":"index.html#Syntax","page":"Home","title":"Syntax","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The tutorials are written with Literate.","category":"page"},{"location":"index.html#Pluto-Notebooks","page":"Home","title":"Pluto Notebooks","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"There is also a set of Pluto notebooks available in the notebooks folder","category":"page"},{"location":"index.html#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"man/array_registers.md\",\n    \"man/blocks.md\",\n    \"man/registers.md\",\n    \"man/extending_blocks.md\",\n]\nDepth = 1","category":"page"},{"location":"man/simplification.html#Simplification","page":"Simplification","title":"Simplification","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"The simplification for YaoBlocks is currently implemented in a limited and straightforward fashion, there is only one interface simplify to call.","category":"page"},{"location":"man/simplification.html#APIs","page":"Simplification","title":"APIs","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"Modules = [YaoBlocks.Optimise]\nOrder = [:function, :macro]","category":"page"},{"location":"man/simplification.html#YaoBlocks.Optimise.is_pauli-Tuple","page":"Simplification","title":"YaoBlocks.Optimise.is_pauli","text":"is_pauli(x)\n\nCheck if x is an element of pauli group.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.replace_block-Tuple{Any, AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.replace_block","text":"replace_block(actor, tree::AbstractBlock) -> AbstractBlock\nreplace_block(pair::Pair{Type{ST}, TT}, tree::AbstractBlock) -> AbstractBlock\n\nreplace blocks in a circuit, where actor is a function that given input block, returns the block to replace, or nothing for skip replacing and visit sibling. If pair is provided, then replace original block with type ST with new block (pair.second).\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.simplify-Tuple{AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.simplify","text":"simplify(block[; rules=__default_simplification_rules__])\n\nSimplify a block tree accroding to given rules, default to use YaoBlocks.Optimise.__default_simplification_rules__.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.to_basictypes","page":"Simplification","title":"YaoBlocks.Optimise.to_basictypes","text":"to_basictypes(block::AbstractBlock)\n\nconvert gates to basic types\n\n* ChainBlock\n* PutBlock\n* PrimitiveBlock\n\n\n\n\n\n","category":"function"}]
}
